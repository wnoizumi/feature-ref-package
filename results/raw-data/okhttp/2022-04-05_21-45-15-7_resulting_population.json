{
  "executionId" : "4766418e-fb41-42ae-a91b-2e8cadd60fba",
  "computingTime" : 9540,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.5816733067729087,
    "meanNumConcerns" : 1.7258687258687258,
    "meanMetricsIntensity" : 0.10570392479894604,
    "meanLackOfCohesion" : 0.6760798143144731
  },
  "population" : [ {
    "solutionId" : "05ee63fe-5fc3-409f-9544-0b42d9ab6e42",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 0.6758525453677701,
      "MetricsIntensity" : 0.1056078817149051,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 3.3844617652215416,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.722007722007722,
      "LackOfCohesion" : 0.6758525453677701,
      "MetricsIntensity" : 0.1056078817149051,
      "Density" : 3.565737051792829,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    } ]
  }, {
    "solutionId" : "4e1b5765-6eb4-481c-99c1-05402d30ff82",
    "objectives" : {
      "NumberOfConcerns" : 1.0178970917225951,
      "NumberOfRefactorings" : 5.0,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671023,
      "Density" : 1.0077864293659622
    },
    "euclideanDistance" : 5.245697362917842,
    "generation" : 0,
    "numberOfRefactorings" : 5,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7234848484848484,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671023,
      "Density" : 3.5390625,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6298a49c-74fc-406e-bf1c-5d623d175196",
    "objectives" : {
      "NumberOfConcerns" : 1.0313199105145414,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.6811777347793944,
      "MetricsIntensity" : 0.10359192548580999,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 9.139446163299283,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7201492537313434,
      "LackOfCohesion" : 0.6811777347793944,
      "MetricsIntensity" : 0.10359192548581,
      "Density" : 3.4423076923076916,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "a51bdf95-ece0-4c2b-9cce-7a8f4eb9ddcd",
    "objectives" : {
      "NumberOfConcerns" : 1.0156599552572707,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 0.6754869606829536,
      "MetricsIntensity" : 0.10482854319095347,
      "Density" : 1.0022246941045607
    },
    "euclideanDistance" : 13.095926509403848,
    "generation" : 0,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706766917293233,
      "LackOfCohesion" : 0.6754869606829536,
      "MetricsIntensity" : 0.10482854319095346,
      "Density" : 3.492248062015504,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "67cd4e59-2062-4569-bf9e-9ddd87a95767",
    "objectives" : {
      "NumberOfConcerns" : 1.0246085011185682,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.6729028687207748,
      "MetricsIntensity" : 0.10412680364854418,
      "Density" : 1.003337041156841
    },
    "euclideanDistance" : 17.073961123907146,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7153558052434457,
      "LackOfCohesion" : 0.6729028687207748,
      "MetricsIntensity" : 0.10412680364854418,
      "Density" : 3.4826254826254823,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "3567601e-ecc7-48c7-a194-4a9a190007e0",
    "objectives" : {
      "NumberOfConcerns" : 1.0089485458612975,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.6751138668252765,
      "MetricsIntensity" : 0.10476023645767317,
      "Density" : 0.9988876529477196
    },
    "euclideanDistance" : 19.065217207043027,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6954887218045112,
      "LackOfCohesion" : 0.6751138668252765,
      "MetricsIntensity" : 0.10476023645767318,
      "Density" : 3.480620155038759,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "60085f3f-e5b1-4816-acb3-8a6adbfc8394",
    "objectives" : {
      "NumberOfConcerns" : 1.0067114093959733,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.6720799783877426,
      "MetricsIntensity" : 0.10589383313886669,
      "Density" : 0.9922135706340378
    },
    "euclideanDistance" : 24.051213288165005,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6981132075471699,
      "LackOfCohesion" : 0.6720799783877426,
      "MetricsIntensity" : 0.10589383313886669,
      "Density" : 3.470817120622568,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "54b86ef6-8be9-4122-b608-96580d4b52f9",
    "objectives" : {
      "NumberOfConcerns" : 1.0044742729306488,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.6696688720761738,
      "MetricsIntensity" : 0.10520607059874418,
      "Density" : 0.9911012235817576
    },
    "euclideanDistance" : 26.04708764748726,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.68796992481203,
      "LackOfCohesion" : 0.6696688720761738,
      "MetricsIntensity" : 0.10520607059874418,
      "Density" : 3.453488372093023,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ed844b62-7c0f-49d5-a8dd-2044ff23db3c",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.6845842575890598,
      "MetricsIntensity" : 0.10567941547524952,
      "Density" : 0.9888765294771968
    },
    "euclideanDistance" : 35.03515634063669,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6905660377358491,
      "LackOfCohesion" : 0.6845842575890598,
      "MetricsIntensity" : 0.1056794154752495,
      "Density" : 3.445736434108527,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "097273f9-7f12-4be1-b58e-414fc1791c85",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.6926385650672381,
      "MetricsIntensity" : 0.1060107494320621,
      "Density" : 0.9888765294771968
    },
    "euclideanDistance" : 36.03421143834305,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6893939393939394,
      "LackOfCohesion" : 0.6926385650672381,
      "MetricsIntensity" : 0.10601074943206208,
      "Density" : 3.47265625,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "9451c989-5e7b-4fdd-bbd7-c47c91b1d802",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.6820966109514613,
      "MetricsIntensity" : 0.10638214507852736,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 38.031614161828884,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673003802281369,
      "LackOfCohesion" : 0.6820966109514613,
      "MetricsIntensity" : 0.10638214507852735,
      "Density" : 3.450980392156863,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "87576b01-bbf8-4e6c-b746-83b82895bbe9",
    "objectives" : {
      "NumberOfConcerns" : 0.9955257270693513,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6754748794889301,
      "MetricsIntensity" : 0.10635911288264133,
      "Density" : 0.9844271412680756
    },
    "euclideanDistance" : 39.03111254939367,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6856060606060606,
      "LackOfCohesion" : 0.6754748794889301,
      "MetricsIntensity" : 0.10635911288264133,
      "Density" : 3.443579766536965,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "9e71e20e-9243-4a47-9849-2eda039e22c0",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6834388731672095,
      "MetricsIntensity" : 0.10666438647288994,
      "Density" : 0.9888765294771968
    },
    "euclideanDistance" : 39.0314216178081,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6893939393939394,
      "LackOfCohesion" : 0.6834388731672095,
      "MetricsIntensity" : 0.10666438647288994,
      "Density" : 3.4591439688715955,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "3411c6f5-b0d2-4dc8-af32-090c71dc1d4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.6802543316595875,
      "MetricsIntensity" : 0.1065868677186911,
      "Density" : 0.9766407119021134
    },
    "euclideanDistance" : 44.02722861048536,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.666666666666667,
      "LackOfCohesion" : 0.6802543316595875,
      "MetricsIntensity" : 0.10658686771869111,
      "Density" : 3.4163424124513617,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "82857693-5000-4c85-9f59-c8496f6831d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.6964243505810043,
      "MetricsIntensity" : 0.10529856948338824,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 44.027577241690665,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6666666666666667,
      "LackOfCohesion" : 0.6964243505810043,
      "MetricsIntensity" : 0.10529856948338825,
      "Density" : 3.4453125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a37aca7a-eeb9-44e7-bf2f-8ba117811b23",
    "objectives" : {
      "NumberOfConcerns" : 0.9932885906040269,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.6839086404340284,
      "MetricsIntensity" : 0.10521056160362555,
      "Density" : 0.9866518353726362
    },
    "euclideanDistance" : 44.02770609921895,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6754716981132074,
      "LackOfCohesion" : 0.6839086404340284,
      "MetricsIntensity" : 0.10521056160362555,
      "Density" : 3.4513618677042803,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "cb180b39-3230-4d0f-8b89-bc4c94d7f13e",
    "objectives" : {
      "NumberOfConcerns" : 0.9955257270693513,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.69096540177548,
      "MetricsIntensity" : 0.1048662447148774,
      "Density" : 0.9899888765294772
    },
    "euclideanDistance" : 45.027320368467855,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6856060606060606,
      "LackOfCohesion" : 0.69096540177548,
      "MetricsIntensity" : 0.1048662447148774,
      "Density" : 3.4765625,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.FormBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.internal.http2.Huffman.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "0739387f-46f8-47e3-b481-ac0258536444",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.6950413567638313,
      "MetricsIntensity" : 0.10605228010415144,
      "Density" : 0.9888765294771968
    },
    "euclideanDistance" : 45.02741095262004,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6830188679245286,
      "LackOfCohesion" : 0.6950413567638313,
      "MetricsIntensity" : 0.10605228010415145,
      "Density" : 3.4457364341085275,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "439a9545-6792-4734-ad92-b8cdcb623740",
    "objectives" : {
      "NumberOfConcerns" : 0.9932885906040269,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6803280029119548,
      "MetricsIntensity" : 0.10530828469219022,
      "Density" : 0.9988876529477196
    },
    "euclideanDistance" : 51.024095629357376,
    "generation" : 0,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6882129277566542,
      "LackOfCohesion" : 0.6803280029119548,
      "MetricsIntensity" : 0.10530828469219021,
      "Density" : 3.5078125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.FormBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.internal.http2.Huffman.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "30d2c777-6c62-4459-b006-b3e5749a3764",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.6827183034742087,
      "MetricsIntensity" : 0.10650017499860606,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 52.02307324807616,
    "generation" : 0,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6628787878787878,
      "LackOfCohesion" : 0.6827183034742087,
      "MetricsIntensity" : 0.10650017499860606,
      "Density" : 3.424124513618677,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "dd40aad9-f78d-4047-85aa-5078c3178597",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6813455744716096,
      "MetricsIntensity" : 0.10620042921005182,
      "Density" : 0.9777530589543938
    },
    "euclideanDistance" : 53.02264079325921,
    "generation" : 0,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6666666666666665,
      "LackOfCohesion" : 0.6813455744716096,
      "MetricsIntensity" : 0.10620042921005182,
      "Density" : 3.42023346303502,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "2f554162-a5bd-4733-8134-fa0cd9f0bcc6",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6811267132251794,
      "MetricsIntensity" : 0.10613510940806317,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 53.022803336517086,
    "generation" : 0,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6742424242424243,
      "LackOfCohesion" : 0.6811267132251794,
      "MetricsIntensity" : 0.10613510940806317,
      "Density" : 3.4357976653696496,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "534bd56f-bbba-4ac0-baf8-abc15f19739d",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.6774976857767822,
      "MetricsIntensity" : 0.10591129592152984,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 59.02018269447679,
    "generation" : 0,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6515151515151516,
      "LackOfCohesion" : 0.6774976857767822,
      "MetricsIntensity" : 0.10591129592152985,
      "Density" : 3.4280155642023344,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b549c969-741c-4a9c-8a9c-713ea68968ac",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.6852285731806652,
      "MetricsIntensity" : 0.10746246448338807,
      "Density" : 0.9866518353726362
    },
    "euclideanDistance" : 60.020229112837455,
    "generation" : 0,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6768060836501903,
      "LackOfCohesion" : 0.6852285731806652,
      "MetricsIntensity" : 0.10746246448338807,
      "Density" : 3.46484375,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "62d858bf-668a-4402-a48f-4dd8f8c0a073",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.6937804369283995,
      "MetricsIntensity" : 0.10571639499595813,
      "Density" : 0.9755283648498332
    },
    "euclideanDistance" : 63.01900944490918,
    "generation" : 0,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6577946768060836,
      "LackOfCohesion" : 0.6937804369283995,
      "MetricsIntensity" : 0.10571639499595814,
      "Density" : 3.42578125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "bacd6dac-25d6-4df1-9940-5c856c5cfacb",
    "objectives" : {
      "NumberOfConcerns" : 0.9955257270693513,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.6889429777721178,
      "MetricsIntensity" : 0.10604875672594591,
      "Density" : 0.9988876529477196
    },
    "euclideanDistance" : 63.01963770747887,
    "generation" : 0,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.679245283018868,
      "LackOfCohesion" : 0.6889429777721178,
      "MetricsIntensity" : 0.1060487567259459,
      "Density" : 3.494163424124513,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "a407629a-26e2-461f-8ea2-163bd3a1c4a8",
    "objectives" : {
      "NumberOfConcerns" : 0.9686800894854586,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.6882235045295078,
      "MetricsIntensity" : 0.10711733877548042,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 65.0183680853298,
    "generation" : 0,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6526717557251909,
      "LackOfCohesion" : 0.6882235045295078,
      "MetricsIntensity" : 0.10711733877548042,
      "Density" : 3.4763779527559056,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "884efea1-77ad-4a36-96c5-c16989fe8c09",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.6903390846797823,
      "MetricsIntensity" : 0.10585258374391697,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 67.01793702468487,
    "generation" : 0,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6577946768060834,
      "LackOfCohesion" : 0.6903390846797823,
      "MetricsIntensity" : 0.10585258374391698,
      "Density" : 3.4627450980392167,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "670dda09-26fd-4c01-99d7-e800f8492cfb",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.6965966676465858,
      "MetricsIntensity" : 0.10712932674021226,
      "Density" : 0.9944382647385984
    },
    "euclideanDistance" : 68.01807822635745,
    "generation" : 0,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6768060836501903,
      "LackOfCohesion" : 0.6965966676465858,
      "MetricsIntensity" : 0.10712932674021226,
      "Density" : 3.4921875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "ce097a00-eff1-4bf8-9857-5340b2fd7a8b",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.6698466006472257,
      "MetricsIntensity" : 0.10487154455528845,
      "Density" : 0.9899888765294772
    },
    "euclideanDistance" : 69.01742024016367,
    "generation" : 0,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6628787878787878,
      "LackOfCohesion" : 0.6698466006472257,
      "MetricsIntensity" : 0.10487154455528845,
      "Density" : 3.4765625,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.FormBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.internal.http2.Huffman.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "7936ad2e-a379-4d1a-acb1-5f6f26a778eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9798657718120806,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.6926879286052002,
      "MetricsIntensity" : 0.10540801541686727,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 71.01702593273983,
    "generation" : 0,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6653992395437265,
      "LackOfCohesion" : 0.6926879286052002,
      "MetricsIntensity" : 0.10540801541686727,
      "Density" : 3.453125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.Cache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.FormBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.internal.http2.Huffman.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.mockwebserver.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "09b0deb2-8c09-4ba3-9b0e-fae0dd2f148d",
    "objectives" : {
      "NumberOfConcerns" : 0.9798657718120806,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.6849369911472651,
      "MetricsIntensity" : 0.10660265280022803,
      "Density" : 0.9933259176863182
    },
    "euclideanDistance" : 72.01685452806824,
    "generation" : 0,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6590909090909092,
      "LackOfCohesion" : 0.6849369911472651,
      "MetricsIntensity" : 0.10660265280022801,
      "Density" : 3.4747081712062267,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "0f80d36f-f432-4419-925f-c8c56af86434",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 85.0,
      "LackOfCohesion" : 0.6919327839309286,
      "MetricsIntensity" : 0.10715291205091437,
      "Density" : 0.9844271412680756
    },
    "euclideanDistance" : 85.01412841275356,
    "generation" : 0,
    "numberOfRefactorings" : 85,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.650190114068441,
      "LackOfCohesion" : 0.6919327839309286,
      "MetricsIntensity" : 0.10715291205091437,
      "Density" : 3.45703125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http2.Http2Stream.FramingSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.PostStreamingWithPipe'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.connection.ConnectionSpecSelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.LoggingInterceptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.Dispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.recipes.WebSocketEcho'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Settings'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      } ]
    } ]
  }, {
    "solutionId" : "1d9dafaf-9634-4d85-b4bb-699764201bdc",
    "objectives" : {
      "NumberOfConcerns" : 0.9530201342281879,
      "NumberOfRefactorings" : 119.0,
      "LackOfCohesion" : 0.7030898058381521,
      "MetricsIntensity" : 0.10809856844036685,
      "Density" : 0.9733036707452726
    },
    "euclideanDistance" : 119.00992222494435,
    "generation" : 0,
    "numberOfRefactorings" : 119,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447876447876448,
      "LackOfCohesion" : 0.7030898058381521,
      "MetricsIntensity" : 0.10809856844036685,
      "Density" : 3.5,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.cache2.FileOperator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.recipes.PrintEvents.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.Address'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.Challenge'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.publicsuffix.PublicSuffixDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.publicsuffix.PublicSuffixDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.publicsuffix.PublicSuffixDatabase'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.FormBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.tls.HandshakeCertificates'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.sse.ServerSentEventReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.sse.ServerSentEventReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache.DiskLruCache.Snapshot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.mockwebserver.MockWebServer.TruncatingBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.mockwebserver.QueueDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.mockwebserver.QueueDispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.mockwebserver.QueueDispatcher'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.CacheControl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.mockwebserver.MockResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.internal.http2.Http2Connection.ReaderRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.logging.HttpLoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.logging.HttpLoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.logging.HttpLoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.logging.HttpLoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.recipes.RequestBodyCompression'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.Challenge'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.Challenge'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.sample.OkHttpContributors.Contributor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  } ]
}