{
  "executionId" : "64a8ff21-d66e-4d90-ae99-04d9b6d8c314",
  "computingTime" : 1348605,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 17,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.5816733067729087,
    "meanNumConcerns" : 1.7258687258687258,
    "meanMetricsIntensity" : 0.10570392479894604,
    "meanLackOfCohesion" : 0.6760798143144731
  },
  "population" : [ {
    "solutionId" : "73319008-857e-4839-bfec-6d42cf6e9246",
    "objectives" : {
      "NumberOfConcerns" : 0.9731543624161074,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6903572840704776,
      "MetricsIntensity" : 0.10685334812498724,
      "Density" : 0.9721913236929922
    },
    "euclideanDistance" : 39.03050340695887,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6603053435114503,
      "LackOfCohesion" : 0.6903572840704776,
      "MetricsIntensity" : 0.10685334812498724,
      "Density" : 3.454545454545454
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "9fc46866-812c-496c-b1a0-962bb0468d70",
    "objectives" : {
      "NumberOfConcerns" : 0.9731543624161074,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.690498850241451,
      "MetricsIntensity" : 0.10673239283290477,
      "Density" : 0.9721913236929922
    },
    "euclideanDistance" : 39.030505580235804,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6603053435114503,
      "LackOfCohesion" : 0.690498850241451,
      "MetricsIntensity" : 0.10673239283290475,
      "Density" : 3.454545454545454
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "0fe0d00d-5482-4cfc-adf0-6543d957bfbf",
    "objectives" : {
      "NumberOfConcerns" : 0.9731543624161074,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6904508632939007,
      "MetricsIntensity" : 0.10673239283290477,
      "Density" : 0.9733036707452726
    },
    "euclideanDistance" : 39.030532454052924,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6603053435114503,
      "LackOfCohesion" : 0.6904508632939007,
      "MetricsIntensity" : 0.10673239283290475,
      "Density" : 3.458498023715415
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "32b810e0-93ee-49f8-a11d-b0d8965832b9",
    "objectives" : {
      "NumberOfConcerns" : 0.9731543624161074,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.690740246571344,
      "MetricsIntensity" : 0.10668248640745248,
      "Density" : 0.9733036707452726
    },
    "euclideanDistance" : 39.030537437879524,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6603053435114503,
      "LackOfCohesion" : 0.690740246571344,
      "MetricsIntensity" : 0.10668248640745248,
      "Density" : 3.4584980237154155
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "08717325-4759-4751-b5e7-fd63a06faf22",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6895471710878756,
      "MetricsIntensity" : 0.10674864647642986,
      "Density" : 0.9755283648498332
    },
    "euclideanDistance" : 39.03062790606111,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6641221374045803,
      "LackOfCohesion" : 0.6895471710878756,
      "MetricsIntensity" : 0.10674864647642984,
      "Density" : 3.48015873015873
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "d8f2c3dc-0333-4902-8ed6-78acff4d48df",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6870482447352374,
      "MetricsIntensity" : 0.10694560985007452,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 39.03092005607504,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6755725190839694,
      "LackOfCohesion" : 0.6870482447352374,
      "MetricsIntensity" : 0.10694560985007452,
      "Density" : 3.476377952755906
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "b94ce616-a4e3-47e4-86a7-ed6b98958d22",
    "objectives" : {
      "NumberOfConcerns" : 0.9731543624161074,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.6905825561298108,
      "MetricsIntensity" : 0.10706358274924753,
      "Density" : 0.9699666295884316
    },
    "euclideanDistance" : 40.029691874322324,
    "generation" : 1,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6603053435114503,
      "LackOfCohesion" : 0.6905825561298108,
      "MetricsIntensity" : 0.1070635827492475,
      "Density" : 3.4466403162055337
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.get()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "22a19203-6d8f-414c-a203-435dd7548ff6",
    "objectives" : {
      "NumberOfConcerns" : 0.9731543624161074,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.6900659679854245,
      "MetricsIntensity" : 0.10678229925835703,
      "Density" : 0.9755283648498332
    },
    "euclideanDistance" : 40.029817367848715,
    "generation" : 1,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6603053435114503,
      "LackOfCohesion" : 0.6900659679854245,
      "MetricsIntensity" : 0.10678229925835703,
      "Density" : 3.466403162055336
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "6febcff8-c04a-4a43-bb26-739dadb75cc9",
    "objectives" : {
      "NumberOfConcerns" : 0.9731543624161074,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.6867667305817601,
      "MetricsIntensity" : 0.10686904901021528,
      "Density" : 0.9744160177975528
    },
    "euclideanDistance" : 42.028318851991926,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6603053435114505,
      "LackOfCohesion" : 0.6867667305817601,
      "MetricsIntensity" : 0.10686904901021527,
      "Density" : 3.4624505928853755
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "382f7265-e731-4ef5-aa21-7249b92047a0",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.6913738429644334,
      "MetricsIntensity" : 0.10685710066352692,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 42.028471931380466,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.656488549618321,
      "LackOfCohesion" : 0.6913738429644334,
      "MetricsIntensity" : 0.10685710066352692,
      "Density" : 3.4822134387351777
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "005943cd-15e2-4510-8027-a70978ccfe1d",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.6864146370765205,
      "MetricsIntensity" : 0.10693872638759726,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 42.028520509017696,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.6864146370765205,
      "MetricsIntensity" : 0.10693872638759724,
      "Density" : 3.464566929133858
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.sample.OkHttpContributors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "d9937472-f421-4ebd-a0d3-f19bc359ccf5",
    "objectives" : {
      "NumberOfConcerns" : 0.9798657718120806,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.686155049717026,
      "MetricsIntensity" : 0.10699830538948199,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 42.02867238332542,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6717557251908395,
      "LackOfCohesion" : 0.686155049717026,
      "MetricsIntensity" : 0.106998305389482,
      "Density" : 3.507936507936508
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "8ded8e2f-ad07-4a75-ac24-c6e37a806d15",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.6860774022895819,
      "MetricsIntensity" : 0.10692208501543296,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 42.02872313836297,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6755725190839694,
      "LackOfCohesion" : 0.6860774022895819,
      "MetricsIntensity" : 0.10692208501543295,
      "Density" : 3.507936507936508
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "cf3a9619-9183-4abc-9f54-7c1e5882200e",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.6912062279496568,
      "MetricsIntensity" : 0.10690700708897917,
      "Density" : 0.9733036707452726
    },
    "euclideanDistance" : 43.02765616964111,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6912062279496568,
      "MetricsIntensity" : 0.10690700708897917,
      "Density" : 3.4584980237154155
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers(), okhttp3.internal.connection.Exchange.Exchange(Transmitter, Call, EventListener, ExchangeFinder, ExchangeCodec)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "c501209d-2eaf-4820-958c-035846b7f11b",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.6911251772681695,
      "MetricsIntensity" : 0.10690700708897917,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 43.02780635559936,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6911251772681695,
      "MetricsIntensity" : 0.10690700708897917,
      "Density" : 3.4822134387351777
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "9a310d31-9343-41f5-87d3-b9d646882083",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.6889662656415572,
      "MetricsIntensity" : 0.10688734276025724,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 44.02714090280418,
    "generation" : 1,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6889662656415572,
      "MetricsIntensity" : 0.10688734276025724,
      "Density" : 3.468503937007874
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  }, {
    "solutionId" : "38adfafc-095d-4b7c-85e6-fbedc87e72d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.6851468553983363,
      "MetricsIntensity" : 0.10708179762363643,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 44.02727986283855,
    "generation" : 1,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977095,
      "LackOfCohesion" : 0.6851468553983363,
      "MetricsIntensity" : 0.10708179762363643,
      "Density" : 3.490118577075099
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.internal.platform.AndroidPlatform.CustomTrustRootIndex'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.internal.http2.Hpack.Reader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.AndroidPlatform.AndroidCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.Cache.CacheResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.Cache.CacheResponseBody'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.PrintEvents'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.ConnectInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.recipes.CancelCall'"
      } ]
    } ]
  } ]
}