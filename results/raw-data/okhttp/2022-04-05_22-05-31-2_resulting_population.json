{
  "executionId" : "adea8e5e-da59-40d3-83c7-1d59359330b4",
  "computingTime" : 8603,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.5816733067729087,
    "meanNumConcerns" : 1.7258687258687258,
    "meanMetricsIntensity" : 0.10570392479894604,
    "meanLackOfCohesion" : 0.6760798143144731
  },
  "population" : [ {
    "solutionId" : "deb913b0-bf1a-415d-8e39-3b8a91fbed8e",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 0.67585254536777,
      "MetricsIntensity" : 0.10560788171490511,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 3.3844617652215416,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.722007722007722,
      "LackOfCohesion" : 0.67585254536777,
      "MetricsIntensity" : 0.10560788171490511,
      "Density" : 3.5657370517928286,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    } ]
  }, {
    "solutionId" : "e0629100-3d26-40bf-b956-43bcb5d8d4c3",
    "objectives" : {
      "NumberOfConcerns" : 1.0178970917225951,
      "NumberOfRefactorings" : 5.0,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671023,
      "Density" : 1.010011123470523
    },
    "euclideanDistance" : 5.2461252182580616,
    "generation" : 0,
    "numberOfRefactorings" : 5,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.723484848484849,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671021,
      "Density" : 3.546875,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "144bdd53-f4ba-4cb9-bfe6-2cefe52e0ffa",
    "objectives" : {
      "NumberOfConcerns" : 1.0313199105145414,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.6801476350450874,
      "MetricsIntensity" : 0.10440350966019332,
      "Density" : 0.9944382647385984
    },
    "euclideanDistance" : 9.13925758026804,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7201492537313434,
      "LackOfCohesion" : 0.6801476350450874,
      "MetricsIntensity" : 0.10440350966019332,
      "Density" : 3.4384615384615387,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d96f2df8-fac5-49bb-a5f1-d0d78026cf95",
    "objectives" : {
      "NumberOfConcerns" : 1.0313199105145414,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.6811777347793945,
      "MetricsIntensity" : 0.10359192548580999,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 9.139446163299283,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7201492537313434,
      "LackOfCohesion" : 0.6811777347793945,
      "MetricsIntensity" : 0.10359192548580999,
      "Density" : 3.442307692307692,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "2ab0114d-cc31-4341-a07b-8e65f1fbeeb9",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.6806191076479581,
      "MetricsIntensity" : 0.10594721998054242,
      "Density" : 0.9911012235817576
    },
    "euclideanDistance" : 30.040992461904658,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6969696969696968,
      "LackOfCohesion" : 0.6806191076479581,
      "MetricsIntensity" : 0.1059472199805424,
      "Density" : 3.48046875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "7bf65a75-7cd9-4959-8018-7704bd70c188",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.6880176500597124,
      "MetricsIntensity" : 0.10567276902594995,
      "Density" : 0.9899888765294772
    },
    "euclideanDistance" : 30.041123352402614,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6905660377358493,
      "LackOfCohesion" : 0.6880176500597124,
      "MetricsIntensity" : 0.10567276902594995,
      "Density" : 3.463035019455253,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "48a89521-1994-463f-b119-337e1c7ef283",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.6683035279749006,
      "MetricsIntensity" : 0.10587907380431069,
      "Density" : 0.9755283648498332
    },
    "euclideanDistance" : 32.03762624749842,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6867924528301887,
      "LackOfCohesion" : 0.6683035279749006,
      "MetricsIntensity" : 0.10587907380431069,
      "Density" : 3.4124513618677046,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "70724b9d-0eb6-4107-8756-dfa56369585e",
    "objectives" : {
      "NumberOfConcerns" : 1.0044742729306488,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.6732631027379576,
      "MetricsIntensity" : 0.10538442123169735,
      "Density" : 0.9944382647385984
    },
    "euclideanDistance" : 33.03728598279681,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6943396226415097,
      "LackOfCohesion" : 0.6732631027379576,
      "MetricsIntensity" : 0.10538442123169733,
      "Density" : 3.4785992217898825,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "f7d09ad6-1dc7-4ce1-af18-dcd5a9440e0c",
    "objectives" : {
      "NumberOfConcerns" : 1.0089485458612975,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.6871112361607334,
      "MetricsIntensity" : 0.10488375130139868,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 35.03517714247892,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6954887218045112,
      "LackOfCohesion" : 0.6871112361607334,
      "MetricsIntensity" : 0.10488375130139868,
      "Density" : 3.41860465116279,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "dfb72d7c-ed92-41be-828d-ad143f32de57",
    "objectives" : {
      "NumberOfConcerns" : 1.0044742729306488,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.6826214040439691,
      "MetricsIntensity" : 0.10377364283125787,
      "Density" : 0.9922135706340378
    },
    "euclideanDistance" : 36.034291963141655,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.68796992481203,
      "LackOfCohesion" : 0.6826214040439691,
      "MetricsIntensity" : 0.10377364283125785,
      "Density" : 3.4573643410852717,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "8127bcd9-b20d-4c32-a422-25581d45d991",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.6920816364087485,
      "MetricsIntensity" : 0.10552786055405969,
      "Density" : 0.9922135706340378
    },
    "euclideanDistance" : 37.03348593055031,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6905660377358493,
      "LackOfCohesion" : 0.6920816364087485,
      "MetricsIntensity" : 0.10552786055405969,
      "Density" : 3.4708171206225678,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3239e748-a47b-4425-bafb-9185f048a4e8",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.6878398054416793,
      "MetricsIntensity" : 0.10645147726228488,
      "Density" : 0.9911012235817576
    },
    "euclideanDistance" : 38.03238446222108,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6893939393939394,
      "LackOfCohesion" : 0.6878398054416793,
      "MetricsIntensity" : 0.10645147726228489,
      "Density" : 3.48046875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "b830518b-0bc2-4003-a7fe-e23cb7a5c6c1",
    "objectives" : {
      "NumberOfConcerns" : 0.9955257270693513,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.6782906599308764,
      "MetricsIntensity" : 0.10619495264433829,
      "Density" : 0.9922135706340378
    },
    "euclideanDistance" : 42.029119843631314,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6856060606060606,
      "LackOfCohesion" : 0.6782906599308764,
      "MetricsIntensity" : 0.10619495264433827,
      "Density" : 3.484375,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "db0cacf1-e80a-40dd-8617-bef4a77847e2",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.6922107852101379,
      "MetricsIntensity" : 0.1056434462372771,
      "Density" : 0.9977753058954394
    },
    "euclideanDistance" : 43.02894782756905,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6842105263157894,
      "LackOfCohesion" : 0.6922107852101379,
      "MetricsIntensity" : 0.1056434462372771,
      "Density" : 3.4767441860465116,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "98c92450-9190-433e-96fa-505061f2c486",
    "objectives" : {
      "NumberOfConcerns" : 0.9932885906040269,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.677219010243377,
      "MetricsIntensity" : 0.10493286791131874,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 44.02752737439784,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6818181818181819,
      "LackOfCohesion" : 0.677219010243377,
      "MetricsIntensity" : 0.10493286791131874,
      "Density" : 3.453125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "904c21c0-8078-4a4e-98b8-e86e328d6a4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.6799899698712327,
      "MetricsIntensity" : 0.10672624582812903,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 47.02555750409397,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6793893129770994,
      "LackOfCohesion" : 0.6799899698712327,
      "MetricsIntensity" : 0.10672624582812903,
      "Density" : 3.468503937007874,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5e42e118-b5a7-4cb7-872e-49a973a3b093",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.698503587540687,
      "MetricsIntensity" : 0.10574034443671496,
      "Density" : 0.9566184649610678
    },
    "euclideanDistance" : 48.024863786420404,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6768060836501903,
      "LackOfCohesion" : 0.698503587540687,
      "MetricsIntensity" : 0.10574034443671497,
      "Density" : 3.372549019607843,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "635b18a7-7ca3-4353-9983-71d6c7a01324",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.6726690348828445,
      "MetricsIntensity" : 0.10615349841427313,
      "Density" : 0.985539488320356
    },
    "euclideanDistance" : 48.02531177421552,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6893939393939394,
      "LackOfCohesion" : 0.6726690348828445,
      "MetricsIntensity" : 0.10615349841427311,
      "Density" : 3.4609375,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "36de16b5-cf72-4975-82ac-5792db9f030d",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.6942181762448228,
      "MetricsIntensity" : 0.10549395914247098,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 50.02428409372348,
    "generation" : 0,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6806083650190111,
      "LackOfCohesion" : 0.6942181762448228,
      "MetricsIntensity" : 0.10549395914247099,
      "Density" : 3.4509803921568625,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "21f475c5-4270-42b2-b949-a14ed7914ebb",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6870325598414307,
      "MetricsIntensity" : 0.10662015900915349,
      "Density" : 0.9844271412680756
    },
    "euclideanDistance" : 51.02373372967465,
    "generation" : 0,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6666666666666665,
      "LackOfCohesion" : 0.6870325598414307,
      "MetricsIntensity" : 0.10662015900915348,
      "Density" : 3.45703125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "672d02f0-b585-4993-b1e2-7e1b80bb1705",
    "objectives" : {
      "NumberOfConcerns" : 0.9865771812080537,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6889850291408388,
      "MetricsIntensity" : 0.10699986632128812,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 51.02378261027672,
    "generation" : 0,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6704545454545454,
      "LackOfCohesion" : 0.6889850291408388,
      "MetricsIntensity" : 0.10699986632128812,
      "Density" : 3.453125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "a74ab24d-ac4d-46ae-a0e2-7236aa25ffe5",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6969490228191182,
      "MetricsIntensity" : 0.10730513991153671,
      "Density" : 0.9877641824249166
    },
    "euclideanDistance" : 51.02402065859155,
    "generation" : 0,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6742424242424243,
      "LackOfCohesion" : 0.6969490228191182,
      "MetricsIntensity" : 0.10730513991153673,
      "Density" : 3.46875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "dafb6e07-a33a-4678-ac4b-1baa25b139f4",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.6901002295281838,
      "MetricsIntensity" : 0.10648602594163196,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 53.02294068928915,
    "generation" : 0,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6806083650190111,
      "LackOfCohesion" : 0.6901002295281838,
      "MetricsIntensity" : 0.10648602594163195,
      "Density" : 3.466666666666667,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "a00613e9-b76c-4bb6-8184-3c0afd3e3e7d",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.6862571673727728,
      "MetricsIntensity" : 0.10550373921423496,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 61.01967204516403,
    "generation" : 0,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6577946768060834,
      "LackOfCohesion" : 0.6862571673727728,
      "MetricsIntensity" : 0.10550373921423496,
      "Density" : 3.466666666666667,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "c79a1d39-f7a3-4010-b75f-f36006d67552",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.685506396616603,
      "MetricsIntensity" : 0.1048755162782157,
      "Density" : 0.9911012235817576
    },
    "euclideanDistance" : 61.01993219311856,
    "generation" : 0,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6666666666666665,
      "LackOfCohesion" : 0.685506396616603,
      "MetricsIntensity" : 0.1048755162782157,
      "Density" : 3.48046875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "d10622ba-3b57-4cd8-b514-bb28501cc240",
    "objectives" : {
      "NumberOfConcerns" : 0.9798657718120806,
      "NumberOfRefactorings" : 65.0,
      "LackOfCohesion" : 0.6784076493173051,
      "MetricsIntensity" : 0.10547662071727501,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 65.01844666839914,
    "generation" : 0,
    "numberOfRefactorings" : 65,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6653992395437263,
      "LackOfCohesion" : 0.6784076493173051,
      "MetricsIntensity" : 0.10547662071727501,
      "Density" : 3.466666666666667,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "70178918-c374-4a3f-a076-a6670e1d2aec",
    "objectives" : {
      "NumberOfConcerns" : 0.970917225950783,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.6825193538234094,
      "MetricsIntensity" : 0.10587328337583478,
      "Density" : 0.9710789766407119
    },
    "euclideanDistance" : 68.01737069645517,
    "generation" : 0,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6564885496183208,
      "LackOfCohesion" : 0.6825193538234094,
      "MetricsIntensity" : 0.10587328337583476,
      "Density" : 3.437007874015748,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "a042bbfb-19b0-4dc0-bff5-9f86524fac6d",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.6938417043173807,
      "MetricsIntensity" : 0.10571541274359463,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 71.01696069393763,
    "generation" : 0,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.661596958174905,
      "LackOfCohesion" : 0.6938417043173807,
      "MetricsIntensity" : 0.10571541274359461,
      "Density" : 3.454901960784314,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "40c2f4f7-e91e-411a-864f-0f9f40c74981",
    "objectives" : {
      "NumberOfConcerns" : 0.9753914988814317,
      "NumberOfRefactorings" : 75.0,
      "LackOfCohesion" : 0.6906691627399872,
      "MetricsIntensity" : 0.10589483372678876,
      "Density" : 0.985539488320356
    },
    "euclideanDistance" : 75.0160710399265,
    "generation" : 0,
    "numberOfRefactorings" : 75,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6515151515151516,
      "LackOfCohesion" : 0.6906691627399872,
      "MetricsIntensity" : 0.10589483372678878,
      "Density" : 3.4609375,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "2be72c1a-9e0d-4f47-999f-ac132a1e5640",
    "objectives" : {
      "NumberOfConcerns" : 0.9619686800894854,
      "NumberOfRefactorings" : 82.0,
      "LackOfCohesion" : 0.6964301611178993,
      "MetricsIntensity" : 0.10695978609714427,
      "Density" : 0.978865406006674
    },
    "euclideanDistance" : 82.01451101231847,
    "generation" : 0,
    "numberOfRefactorings" : 82,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412213740458015,
      "LackOfCohesion" : 0.6964301611178993,
      "MetricsIntensity" : 0.10695978609714425,
      "Density" : 3.4645669291338583,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "8a5bd472-a00d-4869-89d4-8da30eedab85",
    "objectives" : {
      "NumberOfConcerns" : 0.9619686800894854,
      "NumberOfRefactorings" : 91.0,
      "LackOfCohesion" : 0.7122971774895286,
      "MetricsIntensity" : 0.10626992106885338,
      "Density" : 0.967741935483871
    },
    "euclideanDistance" : 91.0130791082268,
    "generation" : 0,
    "numberOfRefactorings" : 91,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6412213740458015,
      "LackOfCohesion" : 0.7122971774895286,
      "MetricsIntensity" : 0.10626992106885338,
      "Density" : 3.4251968503937014,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.slack.SlackClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.internal.http2.Http2Stream'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.mockwebserver.MockWebServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.Cookie.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "fc856b46-5ef7-47b6-a354-52adc2245e15",
    "objectives" : {
      "NumberOfConcerns" : 0.9664429530201343,
      "NumberOfRefactorings" : 93.0,
      "LackOfCohesion" : 0.6963593894586997,
      "MetricsIntensity" : 0.1080092482931965,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 93.01286541206535,
    "generation" : 0,
    "numberOfRefactorings" : 93,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6488549618320612,
      "LackOfCohesion" : 0.6963593894586997,
      "MetricsIntensity" : 0.1080092482931965,
      "Density" : 3.47244094488189,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.BridgeInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http.RequestLine'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "05d6b583-ee63-41af-853e-108e5d081585",
    "objectives" : {
      "NumberOfConcerns" : 0.9530201342281879,
      "NumberOfRefactorings" : 94.0,
      "LackOfCohesion" : 0.6967168244498638,
      "MetricsIntensity" : 0.10804472944420503,
      "Density" : 0.9799777530589544
    },
    "euclideanDistance" : 94.0125826247198,
    "generation" : 0,
    "numberOfRefactorings" : 94,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6384615384615386,
      "LackOfCohesion" : 0.6967168244498638,
      "MetricsIntensity" : 0.10804472944420501,
      "Density" : 3.4960317460317456,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.recipes.PostStreamingWithPipe.PipeBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.OkHttpClient.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.slack.RtmSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.http2.Http2Reader.ContinuationSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.sse.EventSourceListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.guide.PostExample'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.ExchangeFinder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.internal.cache.CacheStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.FormBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CertificatePinning'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.AsynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Part'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.http2.Hpack.Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.recipes.RequestBodyCompression'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "b9b5dab9-0893-478b-83a7-df5fbc1018f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9530201342281879,
      "NumberOfRefactorings" : 119.0,
      "LackOfCohesion" : 0.704422295262307,
      "MetricsIntensity" : 0.10769555147380414,
      "Density" : 0.9877641824249166
    },
    "euclideanDistance" : 119.01004888058065,
    "generation" : 0,
    "numberOfRefactorings" : 119,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6447876447876448,
      "LackOfCohesion" : 0.704422295262307,
      "MetricsIntensity" : 0.10769555147380414,
      "Density" : 3.5238095238095237,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.cache2.Relay.RelaySource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.cache2.Relay.RelaySource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.CancelRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.ws.RealWebSocket.Streams'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.recipes.CancelCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.UnknownLengthSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.unixdomainsockets.ClientAndServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.unixdomainsockets.ClientAndServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.unixdomainsockets.ClientAndServer'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.MultipartBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.tls.CertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.internal.http2.Huffman.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.recipes.PostString'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.recipes.PostString'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.KnownLengthSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Writer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.http.CallServerInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.http.CallServerInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.cache2.Relay.RelaySource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RetryAndFollowUpInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.Request'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.mockwebserver.PushPromise'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.slack.RtmStartResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.recipes.PostFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.recipes.PostFile'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.MultipartBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.sse.RealEventSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.sse.RealEventSource'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.RealConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.logging.LoggingEventListener.Factory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http.HttpDate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http.HttpDate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.guide.GetExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.guide.GetExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.guide.GetExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.guide.GetExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.guide.GetExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      } ]
    } ]
  } ]
}