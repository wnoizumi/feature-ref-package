{
  "executionId" : "df5ca2d0-e8c5-4dad-8114-239237a8ec08",
  "computingTime" : 8580,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.5816733067729087,
    "meanNumConcerns" : 1.7258687258687258,
    "meanMetricsIntensity" : 0.10570392479894604,
    "meanLackOfCohesion" : 0.6760798143144731
  },
  "population" : [ {
    "solutionId" : "1292dbdf-9533-4b95-954b-fcbc2388f85f",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 0.67585254536777,
      "MetricsIntensity" : 0.10560788171490511,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 3.3844617652215416,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.722007722007722,
      "LackOfCohesion" : 0.67585254536777,
      "MetricsIntensity" : 0.1056078817149051,
      "Density" : 3.565737051792829,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    } ]
  }, {
    "solutionId" : "8a738645-d7b2-40c7-8387-81c533ebab4a",
    "objectives" : {
      "NumberOfConcerns" : 1.0201342281879195,
      "NumberOfRefactorings" : 5.0,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671023,
      "Density" : 1.0122358175750834
    },
    "euclideanDistance" : 5.24698847346496,
    "generation" : 0,
    "numberOfRefactorings" : 5,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7272727272727273,
      "LackOfCohesion" : 0.6738751678184635,
      "MetricsIntensity" : 0.10716858200671023,
      "Density" : 3.5546875,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "6de71646-eb78-46b8-9738-5e2799919a09",
    "objectives" : {
      "NumberOfConcerns" : 1.0246085011185682,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.6811777347793945,
      "MetricsIntensity" : 0.10359192548580999,
      "Density" : 1.0055617352614015
    },
    "euclideanDistance" : 9.139787271997713,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.708955223880597,
      "LackOfCohesion" : 0.6811777347793945,
      "MetricsIntensity" : 0.10359192548580999,
      "Density" : 3.4769230769230766,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "ac409158-c162-4eb0-81e3-c536129d36cb",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.6859653357538346,
      "MetricsIntensity" : 0.10602452905210151,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 33.036710869041826,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6742424242424245,
      "LackOfCohesion" : 0.6859653357538346,
      "MetricsIntensity" : 0.10602452905210152,
      "Density" : 3.462745098039216,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "e37ea84f-de02-45aa-aa78-0edc57d4fc67",
    "objectives" : {
      "NumberOfConcerns" : 1.0044742729306488,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.6878470584313305,
      "MetricsIntensity" : 0.1057839807655061,
      "Density" : 0.996662958843159
    },
    "euclideanDistance" : 33.03765472071056,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6943396226415095,
      "LackOfCohesion" : 0.6878470584313305,
      "MetricsIntensity" : 0.10578398076550609,
      "Density" : 3.4863813229571985,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "ca60b022-1a5a-412f-97c7-9ee1aa8079b9",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.6744217267300235,
      "MetricsIntensity" : 0.10674163569905927,
      "Density" : 0.9911012235817576
    },
    "euclideanDistance" : 36.033682490587864,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6806083650190111,
      "LackOfCohesion" : 0.6744217267300235,
      "MetricsIntensity" : 0.10674163569905927,
      "Density" : 3.4941176470588236,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "5948655b-1016-44f4-b44d-c2840dcfe9c9",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.6783403778130302,
      "MetricsIntensity" : 0.10615874461273854,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 36.034185662615805,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6931818181818183,
      "LackOfCohesion" : 0.6783403778130302,
      "MetricsIntensity" : 0.10615874461273854,
      "Density" : 3.49609375,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "42eb7e2c-9b3e-44d3-ba96-58f6cb65c553",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.6911273655502693,
      "MetricsIntensity" : 0.10504511318365836,
      "Density" : 1.0
    },
    "euclideanDistance" : 38.032731843915926,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6931818181818181,
      "LackOfCohesion" : 0.6911273655502693,
      "MetricsIntensity" : 0.10504511318365835,
      "Density" : 3.498054474708171,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "e68369f8-86a9-4fec-9d41-ec5e8b646421",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.6929790418432675,
      "MetricsIntensity" : 0.10553746353318237,
      "Density" : 0.9977753058954394
    },
    "euclideanDistance" : 39.031870486433235,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6867924528301887,
      "LackOfCohesion" : 0.6929790418432675,
      "MetricsIntensity" : 0.10553746353318237,
      "Density" : 3.490272373540856,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "7a09a402-a40c-4544-b4e7-166655256f56",
    "objectives" : {
      "NumberOfConcerns" : 0.9977628635346756,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.685652053245383,
      "MetricsIntensity" : 0.10514356493028088,
      "Density" : 1.0088987764182424
    },
    "euclideanDistance" : 48.02597819285177,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6893939393939394,
      "LackOfCohesion" : 0.685652053245383,
      "MetricsIntensity" : 0.10514356493028089,
      "Density" : 3.529182879377432,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "146091fa-d422-4391-ac52-a635da5221ba",
    "objectives" : {
      "NumberOfConcerns" : 1.0044742729306488,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.693902435043467,
      "MetricsIntensity" : 0.10463271737848921,
      "Density" : 1.0111234705228032
    },
    "euclideanDistance" : 48.02628226120076,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.68796992481203,
      "LackOfCohesion" : 0.693902435043467,
      "MetricsIntensity" : 0.1046327173784892,
      "Density" : 3.5096525096525095,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "a6078ba3-6b03-4213-b11e-8f8b95768bd3",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6902276628081927,
      "MetricsIntensity" : 0.10695858512111481,
      "Density" : 0.9944382647385984
    },
    "euclideanDistance" : 51.024101607108804,
    "generation" : 0,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6780303030303032,
      "LackOfCohesion" : 0.6902276628081927,
      "MetricsIntensity" : 0.10695858512111481,
      "Density" : 3.4921875,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "1ce3d056-0daf-4c3a-86af-cac350c8ae2c",
    "objectives" : {
      "NumberOfConcerns" : 1.0022371364653244,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.6872513761085333,
      "MetricsIntensity" : 0.1055239205685812,
      "Density" : 0.9933259176863182
    },
    "euclideanDistance" : 51.02425526559141,
    "generation" : 0,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6842105263157894,
      "LackOfCohesion" : 0.6872513761085333,
      "MetricsIntensity" : 0.10552392056858122,
      "Density" : 3.4612403100775193,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "0b80b0e5-e161-4d43-bb74-aa265b3fb4a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9955257270693513,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.7047575363776245,
      "MetricsIntensity" : 0.10618013853339635,
      "Density" : 0.9988876529477196
    },
    "euclideanDistance" : 54.02311362207262,
    "generation" : 0,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6792452830188678,
      "LackOfCohesion" : 0.7047575363776245,
      "MetricsIntensity" : 0.10618013853339635,
      "Density" : 3.494163424124513,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "9756df52-77ca-43a4-94db-64be2dc51da2",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.7055000266700737,
      "MetricsIntensity" : 0.10623530112940571,
      "Density" : 0.967741935483871
    },
    "euclideanDistance" : 56.02163237924585,
    "generation" : 0,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6870229007633586,
      "LackOfCohesion" : 0.7055000266700737,
      "MetricsIntensity" : 0.10623530112940571,
      "Density" : 3.425196850393701,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "92ea4d3f-4896-42de-9b9e-3b7eb33c4a17",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.6923567868903359,
      "MetricsIntensity" : 0.10739854727180256,
      "Density" : 0.9844271412680756
    },
    "euclideanDistance" : 56.02164327549863,
    "generation" : 0,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6755725190839694,
      "LackOfCohesion" : 0.6923567868903359,
      "MetricsIntensity" : 0.10739854727180256,
      "Density" : 3.4980237154150196,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "b4b05d2f-a49b-43bf-a78e-5cdf014f1e9b",
    "objectives" : {
      "NumberOfConcerns" : 0.9955257270693513,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.699693105892895,
      "MetricsIntensity" : 0.10543632547255825,
      "Density" : 0.9844271412680756
    },
    "euclideanDistance" : 56.021967615667386,
    "generation" : 0,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6856060606060606,
      "LackOfCohesion" : 0.699693105892895,
      "MetricsIntensity" : 0.10543632547255825,
      "Density" : 3.443579766536966,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "a320ccf0-16fb-4cab-9b37-06676d0b5abf",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 56.0,
      "LackOfCohesion" : 0.7077792596610387,
      "MetricsIntensity" : 0.10619935792454918,
      "Density" : 0.9888765294771968
    },
    "euclideanDistance" : 56.02206966508227,
    "generation" : 0,
    "numberOfRefactorings" : 56,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6844106463878328,
      "LackOfCohesion" : 0.7077792596610387,
      "MetricsIntensity" : 0.10619935792454918,
      "Density" : 3.4862745098039216,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET_URI, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET_URI, okhttp3.HttpUrl.QUERY_COMPONENT_ENCODE_SET, okhttp3.HttpUrl.PATH_SEGMENT_ENCODE_SET, okhttp3.HttpUrl.INVALID_HOST, okhttp3.HttpUrl.FORM_ENCODE_SET, okhttp3.HttpUrl.QUERY_ENCODE_SET, okhttp3.HttpUrl.USERNAME_ENCODE_SET, okhttp3.HttpUrl.PASSWORD_ENCODE_SET, okhttp3.HttpUrl.QUERY_COMPONENT_REENCODE_SET, okhttp3.HttpUrl.FRAGMENT_ENCODE_SET], extractedMethods=[okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.canonicalize(String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.queryStringToNamesAndValues(String)]"
      } ]
    } ]
  }, {
    "solutionId" : "3fceea38-7d8e-4d39-aad6-4c24111240b4",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.6996642185936743,
      "MetricsIntensity" : 0.10635458696494551,
      "Density" : 0.9833147942157954
    },
    "euclideanDistance" : 59.02064617254844,
    "generation" : 0,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673003802281369,
      "LackOfCohesion" : 0.6996642185936743,
      "MetricsIntensity" : 0.10635458696494553,
      "Density" : 3.4803149606299213,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "aabeef08-50a0-4eb5-b75c-1fa9a0ae5e66",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.7032391973588704,
      "MetricsIntensity" : 0.1057204303884648,
      "Density" : 0.9699666295884316
    },
    "euclideanDistance" : 64.01883381914314,
    "generation" : 0,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692015209125475,
      "LackOfCohesion" : 0.7032391973588704,
      "MetricsIntensity" : 0.10572043038846482,
      "Density" : 3.4196078431372547,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "dfc23faf-d640-4d33-b0f4-82ae5d81e8de",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.6877436876182501,
      "MetricsIntensity" : 0.10685612765629547,
      "Density" : 0.9810901001112347
    },
    "euclideanDistance" : 64.01883686477645,
    "generation" : 0,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6755725190839694,
      "LackOfCohesion" : 0.6877436876182501,
      "MetricsIntensity" : 0.10685612765629547,
      "Density" : 3.47244094488189,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.CertificatePinner.Pin'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.HttpUrl.HEX_DIGITS], extractedMethods=[okhttp3.HttpUrl.get(URL), okhttp3.HttpUrl.percentEncoded(String, int, int), okhttp3.HttpUrl.newBuilder(String), okhttp3.HttpUrl.redact(), okhttp3.HttpUrl.equals(Object), okhttp3.HttpUrl.resolve(String), okhttp3.HttpUrl.isHttps(), okhttp3.HttpUrl.uri(), okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean), okhttp3.HttpUrl.queryStringToNamesAndValues(String), okhttp3.HttpUrl.get(URI), okhttp3.HttpUrl.parse(String), okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>), okhttp3.HttpUrl.hashCode(), okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>), okhttp3.HttpUrl.url(), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean), okhttp3.HttpUrl.percentDecode(List<String>, boolean), okhttp3.HttpUrl.newBuilder(), okhttp3.HttpUrl.percentDecode(String, boolean), okhttp3.HttpUrl.toString(), okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.encodedUsername(), okhttp3.HttpUrl.scheme(), okhttp3.HttpUrl.get(String), okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset), okhttp3.HttpUrl.defaultPort(String), okhttp3.HttpUrl.percentDecode(String, int, int, boolean)]"
      } ]
    } ]
  }, {
    "solutionId" : "f56175d4-f3b6-4e4f-92d7-ed2cbfc0e394",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.6887997138467288,
      "MetricsIntensity" : 0.10530913247837083,
      "Density" : 1.0077864293659622
    },
    "euclideanDistance" : 66.01877704336266,
    "generation" : 0,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6742424242424245,
      "LackOfCohesion" : 0.6887997138467288,
      "MetricsIntensity" : 0.10530913247837083,
      "Density" : 3.5252918287937733,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "9a760208-10d7-47b2-a542-d35ded7c9ee8",
    "objectives" : {
      "NumberOfConcerns" : 0.9888143176733781,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.7001978333303113,
      "MetricsIntensity" : 0.10701837238269263,
      "Density" : 1.0022246941045607
    },
    "euclideanDistance" : 66.01881503049064,
    "generation" : 0,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6742424242424243,
      "LackOfCohesion" : 0.7001978333303113,
      "MetricsIntensity" : 0.10701837238269264,
      "Density" : 3.51953125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "ccd8131a-baa3-40a0-8210-1d7fd423365c",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.7141485713384434,
      "MetricsIntensity" : 0.10614717381940343,
      "Density" : 0.9955506117908788
    },
    "euclideanDistance" : 67.01861367866275,
    "generation" : 0,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6780303030303032,
      "LackOfCohesion" : 0.7141485713384434,
      "MetricsIntensity" : 0.10614717381940342,
      "Density" : 3.49609375,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "1126de7a-5c38-41de-81a6-c6ab906ce259",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.6943498321915818,
      "MetricsIntensity" : 0.10706308402836719,
      "Density" : 0.996662958843159
    },
    "euclideanDistance" : 69.01776182526787,
    "generation" : 0,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692015209125473,
      "LackOfCohesion" : 0.6943498321915818,
      "MetricsIntensity" : 0.10706308402836719,
      "Density" : 3.5137254901960784,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "49a1ed2f-126a-4ca1-982b-9cfd18317d49",
    "objectives" : {
      "NumberOfConcerns" : 0.9843400447427293,
      "NumberOfRefactorings" : 70.0,
      "LackOfCohesion" : 0.6969597093195717,
      "MetricsIntensity" : 0.107146176116709,
      "Density" : 0.996662958843159
    },
    "euclideanDistance" : 70.01756562118312,
    "generation" : 0,
    "numberOfRefactorings" : 70,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6730038022813691,
      "LackOfCohesion" : 0.6969597093195717,
      "MetricsIntensity" : 0.107146176116709,
      "Density" : 3.5137254901960784,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "db67cad0-0895-4915-8226-8e6cd4ef3859",
    "objectives" : {
      "NumberOfConcerns" : 0.9910514541387024,
      "NumberOfRefactorings" : 71.0,
      "LackOfCohesion" : 0.692408566320265,
      "MetricsIntensity" : 0.10630765978556649,
      "Density" : 0.9988876529477196
    },
    "euclideanDistance" : 71.01739709725501,
    "generation" : 0,
    "numberOfRefactorings" : 71,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6780303030303032,
      "LackOfCohesion" : 0.692408566320265,
      "MetricsIntensity" : 0.10630765978556649,
      "Density" : 3.5078125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.commit(), okhttp3.internal.cache.DiskLruCache.Editor.abort(), okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.CertificatePinner.Pin'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "87fd80d8-1c26-409a-b858-1542dd95af8c",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 73.0,
      "LackOfCohesion" : 0.698402037016746,
      "MetricsIntensity" : 0.10748732702997366,
      "Density" : 0.9944382647385984
    },
    "euclideanDistance" : 73.01673769857022,
    "generation" : 0,
    "numberOfRefactorings" : 73,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.698402037016746,
      "MetricsIntensity" : 0.10748732702997364,
      "Density" : 3.519685039370079,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN], extractedMethods=[okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.toString(), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Response.Builder.checkPriorResponse(Response), okhttp3.Response.Builder.checkSupportResponse(String, Response), okhttp3.Response.Builder.code(int), okhttp3.Response.Builder.handshake(Handshake), okhttp3.Response.Builder.receivedResponseAtMillis(long), okhttp3.Response.Builder.addHeader(String, String), okhttp3.Response.Builder.networkResponse(Response), okhttp3.Response.Builder.priorResponse(Response), okhttp3.Response.Builder.cacheResponse(Response), okhttp3.Response.Builder.sentRequestAtMillis(long), okhttp3.Response.Builder.protocol(Protocol), okhttp3.Response.Builder.request(Request), okhttp3.Response.Builder.initExchange(Exchange), okhttp3.Response.Builder.body(ResponseBody)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "ca598dd6-80db-4a0e-afea-cbc7b1dde5da",
    "objectives" : {
      "NumberOfConcerns" : 0.9821029082774049,
      "NumberOfRefactorings" : 75.0,
      "LackOfCohesion" : 0.7098243035671751,
      "MetricsIntensity" : 0.10551661881167876,
      "Density" : 0.9933259176863182
    },
    "euclideanDistance" : 75.01643957693523,
    "generation" : 0,
    "numberOfRefactorings" : 75,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6692015209125475,
      "LackOfCohesion" : 0.7098243035671751,
      "MetricsIntensity" : 0.10551661881167876,
      "Density" : 3.48828125,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.Handshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.RealCall'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.slack.SlackApi.SlackJsonAdapters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.connection(), okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.proceed(Request), okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis(), okhttp3.internal.http.RealInterceptorChain.call(), okhttp3.internal.http.RealInterceptorChain.transmitter(), okhttp3.internal.http.RealInterceptorChain.exchange(), okhttp3.internal.http.RealInterceptorChain.request()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.Headers.namesAndValues, okhttp3.Headers.namesAndValues], extractedMethods=[okhttp3.Headers.hashCode(), okhttp3.Headers.getInstant(String), okhttp3.Headers.get(String), okhttp3.Headers.size(), okhttp3.Headers.toString(), okhttp3.Headers.name(int), okhttp3.Headers.value(int), okhttp3.Headers.equals(Object), okhttp3.Headers.getDate(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.of(String...), okhttp3.Headers.toMultimap(), okhttp3.Headers.checkName(String), okhttp3.Headers.byteCount()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "bdd995bf-4f18-4863-9545-3d20b7314682",
    "objectives" : {
      "NumberOfConcerns" : 0.9642058165548099,
      "NumberOfRefactorings" : 80.0,
      "LackOfCohesion" : 0.7025219843443979,
      "MetricsIntensity" : 0.10696068540813834,
      "Density" : 0.982202447163515
    },
    "euclideanDistance" : 80.01499479616682,
    "generation" : 0,
    "numberOfRefactorings" : 80,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513409961685823,
      "LackOfCohesion" : 0.7025219843443979,
      "MetricsIntensity" : 0.10696068540813834,
      "Density" : 3.490118577075099,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.CacheControl.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.recipes.ConfigureTimeouts'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.internal.http2.Http2Connection.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.recipes.HttpsServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.Credentials'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Exchange.codec, okhttp3.internal.connection.Exchange.eventListener, okhttp3.internal.connection.Exchange.call, okhttp3.internal.connection.Exchange.duplex], extractedMethods=[okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException), okhttp3.internal.connection.Exchange.trackFailure(IOException), okhttp3.internal.connection.Exchange.responseHeadersStart(), okhttp3.internal.connection.Exchange.timeoutEarlyExit(), okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean), okhttp3.internal.connection.Exchange.readResponseHeaders(boolean), okhttp3.internal.connection.Exchange.openResponseBody(Response), okhttp3.internal.connection.Exchange.newWebSocketStreams(), okhttp3.internal.connection.Exchange.isDuplex(), okhttp3.internal.connection.Exchange.flushRequest(), okhttp3.internal.connection.Exchange.responseHeadersEnd(Response), okhttp3.internal.connection.Exchange.finishRequest(), okhttp3.internal.connection.Exchange.writeRequestHeaders(Request), okhttp3.internal.connection.Exchange.webSocketUpgradeFailed(), okhttp3.internal.connection.Exchange.cancel(), okhttp3.internal.connection.Exchange.trailers()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "f711a024-f6a9-4239-bb77-72235db86ee8",
    "objectives" : {
      "NumberOfConcerns" : 0.9642058165548099,
      "NumberOfRefactorings" : 82.0,
      "LackOfCohesion" : 0.6951970491931123,
      "MetricsIntensity" : 0.10845282033668689,
      "Density" : 0.9699666295884316
    },
    "euclideanDistance" : 82.01442305515927,
    "generation" : 0,
    "numberOfRefactorings" : 82,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6513409961685823,
      "LackOfCohesion" : 0.6951970491931123,
      "MetricsIntensity" : 0.10845282033668689,
      "Density" : 3.46031746031746,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeoutEarlyExit, okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.request], extractedMethods=[okhttp3.internal.connection.Transmitter.createAddress(HttpUrl), okhttp3.internal.connection.Transmitter.canRetry(), okhttp3.internal.connection.Transmitter.isCanceled(), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents(), okhttp3.internal.connection.Transmitter.timeoutEnter(), okhttp3.internal.connection.Transmitter.prepareToConnect(Request), okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException), okhttp3.internal.connection.Transmitter.callStart(), okhttp3.internal.connection.Transmitter.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[okhttp3.Headers.toMultimap(), okhttp3.Headers.size(), okhttp3.Headers.names(), okhttp3.Headers.values(String), okhttp3.Headers.of(Map<String,String>), okhttp3.Headers.of(String...), okhttp3.Headers.checkValue(String, String), okhttp3.Headers.checkName(String)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "b319f183-9e81-4cde-a237-d12a46db4264",
    "objectives" : {
      "NumberOfConcerns" : 0.9686800894854586,
      "NumberOfRefactorings" : 83.0,
      "LackOfCohesion" : 0.7019771344574427,
      "MetricsIntensity" : 0.10832365443311953,
      "Density" : 0.9877641824249166
    },
    "euclideanDistance" : 83.01456814985704,
    "generation" : 0,
    "numberOfRefactorings" : 83,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6590038314176245,
      "LackOfCohesion" : 0.7019771344574427,
      "MetricsIntensity" : 0.10832365443311955,
      "Density" : 3.5238095238095237,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.AbstractSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.slack.SlackApi'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.tls.HandshakeCertificates.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.platform.Platform.logger, okhttp3.internal.platform.Platform.WARN, okhttp3.internal.platform.Platform.INFO], extractedMethods=[okhttp3.internal.platform.Platform.getStackTraceForCloseable(String), okhttp3.internal.platform.Platform.logCloseableLeak(String, Object), okhttp3.internal.platform.Platform.log(int, String, Throwable), okhttp3.internal.platform.Platform.findPlatform(), okhttp3.internal.platform.Platform.isConscryptPreferred(), okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>), okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>), okhttp3.internal.platform.Platform.getSSLContext(), okhttp3.internal.platform.Platform.afterHandshake(SSLSocket), okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int), okhttp3.internal.platform.Platform.configureTlsExtensions(SSLSocket, String, List<Protocol>), okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String), okhttp3.internal.platform.Platform.configureSslSocketFactory(SSLSocketFactory), okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String), okhttp3.internal.platform.Platform.getPrefix(), okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.Util'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.Util'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "903799e0-b829-40d4-8048-d10799bff4ef",
    "objectives" : {
      "NumberOfConcerns" : 0.9776286353467561,
      "NumberOfRefactorings" : 86.0,
      "LackOfCohesion" : 0.7041473031040821,
      "MetricsIntensity" : 0.10810730512404268,
      "Density" : 0.9733036707452726
    },
    "euclideanDistance" : 86.0140139070258,
    "generation" : 0,
    "numberOfRefactorings" : 86,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6679389312977098,
      "LackOfCohesion" : 0.7041473031040821,
      "MetricsIntensity" : 0.10810730512404267,
      "Density" : 3.4448818897637796,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.cache.DiskLruCache.Editor.done, okhttp3.internal.cache.DiskLruCache.Editor.entry], extractedMethods=[okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted(), okhttp3.internal.cache.DiskLruCache.Editor.newSource(int), okhttp3.internal.cache.DiskLruCache.Editor.newSink(int), okhttp3.internal.cache.DiskLruCache.Editor.detach()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.RealCall.originalRequest, okhttp3.RealCall.transmitter], extractedMethods=[okhttp3.RealCall.cancel(), okhttp3.RealCall.request(), okhttp3.RealCall.getResponseWithInterceptorChain(), okhttp3.RealCall.isCanceled(), okhttp3.RealCall.redactedUrl(), okhttp3.RealCall.isExecuted(), okhttp3.RealCall.toLoggableString(), okhttp3.RealCall.timeout()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[okhttp3.internal.connection.Transmitter.timeout, okhttp3.internal.connection.Transmitter.timeoutEarlyExit], extractedMethods=[okhttp3.internal.connection.Transmitter.timeoutExit(IOException), okhttp3.internal.connection.Transmitter.timeoutEarlyExit(), okhttp3.internal.connection.Transmitter.timeout(), okhttp3.internal.connection.Transmitter.timeoutEnter()]"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.ConscryptPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.recipes.Progress.ProgressResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.http2.Http2Connection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.RequestBodyCompression.GzipRequestInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.guide.PostExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.CertificatePinner.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.cache.FaultHidingSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.http2.Hpack'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.PrintEventsNonConcurrent.PrintingEventListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.recipes.CustomCipherSuites'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.sse.EventSources'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.internal.http.HttpMethod'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.internal.http.HttpMethod'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.JavaNetAuthenticator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.CertificatePinner.Pin'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter.TransmitterReference'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.internal.ws.WebSocketWriter.FrameSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.cache2.Relay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.ConnectionSpec.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.unixdomainsockets.UnixDomainServerSocketFactory.UnixDomainServerSocket'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.internal.Version'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  }, {
    "solutionId" : "6ca4f72c-4a86-4ee4-bacb-26790811d37e",
    "objectives" : {
      "NumberOfConcerns" : 0.9642058165548099,
      "NumberOfRefactorings" : 119.0,
      "LackOfCohesion" : 0.7129910439755474,
      "MetricsIntensity" : 0.10770986595082402,
      "Density" : 0.967741935483871
    },
    "euclideanDistance" : 119.0100255228709,
    "generation" : 0,
    "numberOfRefactorings" : 119,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6640926640926643,
      "LackOfCohesion" : 0.7129910439755474,
      "MetricsIntensity" : 0.10770986595082405,
      "Density" : 3.4661354581673303,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "okhttp3.internal.cache.DiskLruCache.Editor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSource(int)', targetType='okhttp3.internal.ws.RealWebSocket.Streams'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.newSink(int)', targetType='okhttp3.internal.ws.RealWebSocket.Streams'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.abortUnlessCommitted()', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.cache.DiskLruCache.Editor.detach()', targetType='okhttp3.Cache.CacheRequestImpl'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.RealCall",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.timeout()', targetType='okhttp3.internal.http1.Http1ExchangeCodec.ChunkedSink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isCanceled()', targetType='okhttp3.mockwebserver.PushPromise'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.toLoggableString()', targetType='okhttp3.internal.http1.Http1ExchangeCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.redactedUrl()', targetType='okhttp3.tls.internal.TlsUtil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.getResponseWithInterceptorChain()', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.isExecuted()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.RealCall.request()', targetType='okhttp3.internal.http2.StreamResetException'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Transmitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEarlyExit()', targetType='okhttp3.MultipartBody.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeout()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.isCanceled()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.releaseConnectionNoEvents()', targetType='okhttp3.internal.http2.Http2Connection.Listener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.createAddress(HttpUrl)', targetType='okhttp3.OkHttpClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.canRetry()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutEnter()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.prepareToConnect(Request)', targetType='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.internal.connection.Transmitter.request', targetTypeName='okhttp3.internal.platform.AndroidPlatform.CloseGuard'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.timeoutExit(IOException)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.noMoreExchanges(IOException)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Transmitter.callStart()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform.AlpnProvider'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.platform.Platform",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.concatLengthPrefixed(List<Protocol>)', targetType='okhttp3.internal.tls.OkHostnameVerifier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getPrefix()', targetType='okhttp3.logging.HttpLoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isCleartextTrafficPermitted(String)', targetType='okhttp3.internal.tls.BasicCertificateChainCleaner'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.<T>readFieldOrNull(Object, Class<T>, String)', targetType='okhttp3.recipes.CacheResponse'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.alpnProtocolNames(List<Protocol>)', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getSelectedProtocol(SSLSocket)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.connectSocket(Socket, InetSocketAddress, int)', targetType='okhttp3.unixdomainsockets.ClientAndServer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.toString()', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.log(int, String, Throwable)', targetType='okhttp3.internal.http2.Huffman.Node'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.findPlatform()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.isConscryptPreferred()', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.getStackTraceForCloseable(String)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.platform.Platform.logCloseableLeak(String, Object)', targetType='okhttp3.internal.platform.Jdk8WithJettyBootPlatform'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.http.RealInterceptorChain",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.exchange()', targetType='okhttp3.sample.Crawler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.readTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.writeTimeoutMillis()', targetType='okhttp3.internal.http.RealResponseBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connectTimeoutMillis()', targetType='okhttp3.internal.cache.DiskLruCache.Editor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.call()', targetType='okhttp3.internal.cache.DiskLruCache.Editor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.connection()', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.transmitter()', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.proceed(Request)', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.http.RealInterceptorChain.request()', targetType='okhttp3.recipes.PreemptiveAuth.BasicAuthInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Response.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.code(int)', targetType='okhttp3.internal.ws.RealWebSocket.Close'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.sentRequestAtMillis(long)', targetType='okhttp3.guide.GetExample'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.initExchange(Exchange)', targetType='okhttp3.internal.http.RetryAndFollowUpInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.addHeader(String, String)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.receivedResponseAtMillis(long)', targetType='okhttp3.ResponseBody.BomAwareReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.handshake(Handshake)', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.request(Request)', targetType='okhttp3.internal.duplex.MwsDuplexAccess'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkPriorResponse(Response)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.body(ResponseBody)', targetType='okhttp3.internal.connection.RouteSelector.Selection'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.networkResponse(Response)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.protocol(Protocol)', targetType='okhttp3.mockwebserver.Dispatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.checkSupportResponse(String, Response)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.priorResponse(Response)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Response.Builder.cacheResponse(Response)', targetType='okhttp3.recipes.LoggingInterceptors.LoggingInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.internal.connection.Exchange",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.cancel()', targetType='okhttp3.internal.ws.RealWebSocket.Message'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trailers()', targetType='okhttp3.internal.ws.RealWebSocket.PingRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.webSocketUpgradeFailed()', targetType='okhttp3.recipes.CurrentDateHeader.CurrentDateInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.trackFailure(IOException)', targetType='okhttp3.ConnectionPool'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.newWebSocketStreams()', targetType='okhttp3.HttpUrl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersEnd(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.openResponseBody(Response)', targetType='okhttp3.Response.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.isDuplex()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.timeoutEarlyExit()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.bodyComplete(long, boolean, boolean, IOException)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.writeRequestHeaders(Request)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.createRequestBody(Request, boolean)', targetType='okhttp3.recipes.PostForm'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.flushRequest()', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.finishRequest()', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.responseHeadersStart()', targetType='okhttp3.recipes.SynchronousGet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.internal.connection.Exchange.readResponseHeaders(boolean)', targetType='okhttp3.recipes.SynchronousGet'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.Headers",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.equals(Object)', targetType='okhttp3.MultipartBody'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(Map<String,String>)', targetType='okhttp3.internal.connection.RouteDatabase'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toMultimap()', targetType='okhttp3.Route'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getDate(String)', targetType='okhttp3.internal.http.HttpDate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkValue(String, String)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.checkName(String)', targetType='okhttp3.internal.connection.Exchange.RequestBodySink'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.toString()', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.get(String)', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.size()', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.name(int)', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.value(int)', targetType='okhttp3.internal.ws.WebSocketReader'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.hashCode()', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.getInstant(String)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.of(String...)', targetType='okhttp3.CertificatePinner.Pin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.Headers.byteCount()', targetType='okhttp3.CertificatePinner.Pin'"
      } ]
    }, {
      "refactoredTypeName" : "okhttp3.HttpUrl",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(Buffer, String, int, int, boolean)', targetType='okhttp3.internal.connection.Transmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.resolve(String)', targetType='okhttp3.Credentials'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(Buffer, String, int, int, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='okhttp3.HttpUrl.HEX_DIGITS', targetTypeName='okhttp3.Cache.CacheRequestImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.isHttps()', targetType='okhttp3.dnsoverhttps.DnsRecordCodec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentEncoded(String, int, int)', targetType='okhttp3.dnsoverhttps.BootstrapDns'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean, Charset)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.canonicalize(String, String, boolean, boolean, boolean, boolean)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.queryStringToNamesAndValues(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.parse(String)', targetType='okhttp3.internal.http.RealInterceptorChain'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.scheme()', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.defaultPort(String)', targetType='okhttp3.internal.http2.StreamResetException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.pathSegmentsToString(StringBuilder, List<String>)', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.hashCode()', targetType='okhttp3.Headers'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(List<String>, boolean)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder()', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.namesAndValuesToQueryString(StringBuilder, List<String>)', targetType='okhttp3.ConnectionSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.redact()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.percentDecode(String, boolean)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URI)', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.uri()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.encodedUsername()', targetType='okhttp3.recipes.CheckHandshake'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(URL)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.newBuilder(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.get(String)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.url()', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.equals(Object)', targetType='okhttp3.slack.OAuthSession'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='okhttp3.HttpUrl.toString()', targetType='okhttp3.slack.OAuthSession'"
      } ]
    } ]
  } ]
}