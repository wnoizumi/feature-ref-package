{
  "executionId" : "448695ee-09e2-459a-a809-d1e1362d6bc1",
  "computingTime" : 3753043,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 41,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1001177856301525,
    "meanNumConcerns" : 2.011830985915493,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "70fb69fe-a2cf-4e2d-8939-9683cf9a4a9a",
    "objectives" : {
      "NumberOfConcerns" : 0.9980397647717726,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3020114361087645,
      "MetricsIntensity" : 0.06280239179772336,
      "Density" : 0.9969604863221885
    },
    "euclideanDistance" : 10.182788984533019,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067567567567557,
      "LackOfCohesion" : 1.3020114361087645,
      "MetricsIntensity" : 0.06280239179772336,
      "Density" : 3.090694935217903
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.RepeatObserver(Observer<? super T>, long, Predicate<? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "8d0e1b5f-75cc-46ed-8021-4ab1dea724e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032587043397281,
      "MetricsIntensity" : 0.06279879736478114,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 10.182819272560291,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3032587043397281,
      "MetricsIntensity" : 0.06279879736478114,
      "Density" : 3.0883392226148407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "063d881d-884e-4d10-ad20-dabcae1f62a0",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032587043397286,
      "MetricsIntensity" : 0.06279879736478108,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 10.182819272560291,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3032587043397286,
      "MetricsIntensity" : 0.0627987973647811,
      "Density" : 3.0883392226148407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "92925793-dc1d-47dc-a2ef-a00d67bbad2c",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032587043397283,
      "MetricsIntensity" : 0.06279879736478111,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 10.182819272560291,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3032587043397283,
      "MetricsIntensity" : 0.06279879736478113,
      "Density" : 3.0883392226148407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "78740862-3b67-4df9-949d-89d77ca8244c",
    "objectives" : {
      "NumberOfConcerns" : 0.9971996639596752,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032227600103057,
      "MetricsIntensity" : 0.06280449180609994,
      "Density" : 0.996580547112462
    },
    "euclideanDistance" : 10.182824457049437,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005067567567567,
      "LackOfCohesion" : 1.3032227600103057,
      "MetricsIntensity" : 0.06280449180609994,
      "Density" : 3.089517078916372
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "654db31d-6d67-4cc6-9908-f3b2b0462a09",
    "objectives" : {
      "NumberOfConcerns" : 0.9983197983758051,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3020114361087645,
      "MetricsIntensity" : 0.06280239179772334,
      "Density" : 0.9971504559270516
    },
    "euclideanDistance" : 10.182835036067223,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.00731981981982,
      "LackOfCohesion" : 1.3020114361087645,
      "MetricsIntensity" : 0.06280239179772334,
      "Density" : 3.091283863368669
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onNext(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "66fb1400-fbb6-454e-81df-fef995933b36",
    "objectives" : {
      "NumberOfConcerns" : 0.9977597311677401,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3032191655773633,
      "MetricsIntensity" : 0.06277848100467266,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 10.182841522066969,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0061936936936937,
      "LackOfCohesion" : 1.3032191655773633,
      "MetricsIntensity" : 0.06277848100467266,
      "Density" : 3.0883392226148407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "98b08195-b291-4baa-ab59-1e0f79597d63",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031832212479408,
      "MetricsIntensity" : 0.06280511692487248,
      "Density" : 0.9967705167173252
    },
    "euclideanDistance" : 10.18286542191847,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031832212479408,
      "MetricsIntensity" : 0.06280511692487248,
      "Density" : 3.090106007067138
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "fd949dd5-e951-4ecf-9250-351cddcdd6b1",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031832212479406,
      "MetricsIntensity" : 0.06280511692487249,
      "Density" : 0.9967705167173252
    },
    "euclideanDistance" : 10.18286542191847,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031832212479406,
      "MetricsIntensity" : 0.0628051169248725,
      "Density" : 3.0901060070671376
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "87f757ab-f187-43bc-b3bc-a463d0a2331e",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3031832212479406,
      "MetricsIntensity" : 0.06280511692487249,
      "Density" : 0.9967705167173252
    },
    "euclideanDistance" : 10.18286542191847,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031832212479406,
      "MetricsIntensity" : 0.0628051169248725,
      "Density" : 3.0901060070671393
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "3785ad9e-668f-4eae-88ef-c4c776b47a1b",
    "objectives" : {
      "NumberOfConcerns" : 0.9977597311677401,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3020006528099375,
      "MetricsIntensity" : 0.0627778558859001,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 11.166337219134698,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0061936936936937,
      "LackOfCohesion" : 1.3020006528099375,
      "MetricsIntensity" : 0.0627778558859001,
      "Density" : 3.0883392226148407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "1e789cea-fdd7-440a-983b-34797db64715",
    "objectives" : {
      "NumberOfConcerns" : 0.9980397647717726,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3019611140475726,
      "MetricsIntensity" : 0.06277848100467266,
      "Density" : 0.9963905775075987
    },
    "euclideanDistance" : 11.16637458780516,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067567567567566,
      "LackOfCohesion" : 1.3019611140475726,
      "MetricsIntensity" : 0.06277848100467266,
      "Density" : 3.088928150765607
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "bca1ac9d-0f6e-4d43-b5e4-e0ff2c1d756e",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.0865724381625443
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "497d1358-7aa0-4e04-8202-74dbdf2cf5c4",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.0865724381625443
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "8270e5e8-6466-419f-b0ab-20bfd80c40d4",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.0865724381625443
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "44ba41df-a2b8-497b-99ae-d6d2f5071d9e",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224445,
      "MetricsIntensity" : 0.06277650797354674,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224445,
      "MetricsIntensity" : 0.06277650797354672,
      "Density" : 3.0865724381625452
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "7655f7e5-2c40-41d4-abc9-6e7cfe0cadad",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.086572438162544
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "957e710d-4663-416d-975c-282020ae326e",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.086572438162544
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "db79b0a7-84b7-4baf-8b3d-77843b396c3d",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354677,
      "Density" : 3.0865724381625443
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "78a6bb93-11d4-4d08-986f-f4473c85341e",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.086572438162544
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "9ed3bca3-ac00-4db7-bf87-2f029e2607c4",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9956306990881459
    },
    "euclideanDistance" : 11.166396866738117,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3031622537224443,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.0865724381625452
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "69013705-22db-4824-8266-460e55e24f1e",
    "objectives" : {
      "NumberOfConcerns" : 0.9969196303556427,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031766314542135,
      "MetricsIntensity" : 0.06283918589797739,
      "Density" : 0.9963905775075987
    },
    "euclideanDistance" : 11.16641666016395,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0045045045045047,
      "LackOfCohesion" : 1.3031766314542135,
      "MetricsIntensity" : 0.0628391858979774,
      "Density" : 3.0889281507656063
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.processors.FlowableProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "a457c169-daab-4b28-be47-632874685c49",
    "objectives" : {
      "NumberOfConcerns" : 0.9971996639596752,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031263093930217,
      "MetricsIntensity" : 0.06280314389374658,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 11.166418639568477,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005067567567567,
      "LackOfCohesion" : 1.3031263093930217,
      "MetricsIntensity" : 0.06280314389374658,
      "Density" : 3.0883392226148407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "613843ef-dec7-4862-81b1-ab8bc23da1e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9971996639596752,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031263093930219,
      "MetricsIntensity" : 0.06280314389374657,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 11.166418639568477,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005067567567568,
      "LackOfCohesion" : 1.3031263093930219,
      "MetricsIntensity" : 0.06280314389374658,
      "Density" : 3.0883392226148434
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "ed4a4e5a-c317-4ea1-baf7-c87d0c602924",
    "objectives" : {
      "NumberOfConcerns" : 0.9971996639596752,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3031263093930217,
      "MetricsIntensity" : 0.06280314389374658,
      "Density" : 0.9962006079027356
    },
    "euclideanDistance" : 11.166418639568477,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005067567567567,
      "LackOfCohesion" : 1.3031263093930217,
      "MetricsIntensity" : 0.06280314389374658,
      "Density" : 3.0883392226148407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "3f04e8f4-6531-47c4-aa39-3c1d6d4662cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9980397647717726,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3018856309557851,
      "MetricsIntensity" : 0.06282777748037803,
      "Density" : 0.9977203647416414
    },
    "euclideanDistance" : 11.166484801583628,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.006756756756757,
      "LackOfCohesion" : 1.3018856309557851,
      "MetricsIntensity" : 0.06282777748037803,
      "Density" : 3.0930506478209656
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onNext(T)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "977fd74e-3137-435c-afef-d7d499f40279",
    "objectives" : {
      "NumberOfConcerns" : 0.9977597311677401,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3019042021926537,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9958206686930091
    },
    "euclideanDistance" : 12.152616126866524,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0061936936936937,
      "LackOfCohesion" : 1.3019042021926537,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.0871613663133095
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "3990a215-3345-4fe1-8038-a3c87db460d9",
    "objectives" : {
      "NumberOfConcerns" : 0.9977597311677401,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3019042021926537,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 0.9958206686930091
    },
    "euclideanDistance" : 12.152616126866524,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0061936936936937,
      "LackOfCohesion" : 1.3019042021926537,
      "MetricsIntensity" : 0.06277650797354675,
      "Density" : 3.0871613663133095
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "0cae63af-bd5d-4431-97ce-7a8598fc444c",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3030364485694654,
      "MetricsIntensity" : 0.062823460253855,
      "Density" : 0.9967705167173252
    },
    "euclideanDistance" : 12.152792600201302,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3030364485694654,
      "MetricsIntensity" : 0.062823460253855,
      "Density" : 3.090106007067138
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "76c8663f-e392-4300-b5fa-a2d7966a3e32",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3030364485694652,
      "MetricsIntensity" : 0.06282580444925213,
      "Density" : 0.9967705167173252
    },
    "euclideanDistance" : 12.152792612319768,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0056306306306295,
      "LackOfCohesion" : 1.3030364485694652,
      "MetricsIntensity" : 0.06282580444925213,
      "Density" : 3.0901060070671393
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "f319f96f-a815-4602-90c3-89a31060b8ae",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3030933604243844,
      "MetricsIntensity" : 0.06278464428507094,
      "Density" : 0.9971504559270516
    },
    "euclideanDistance" : 12.152829670342108,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3030933604243844,
      "MetricsIntensity" : 0.06278464428507094,
      "Density" : 3.0912838633686697
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "01eb42cf-5244-493c-97a3-24a0055dc52d",
    "objectives" : {
      "NumberOfConcerns" : 0.9971996639596752,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3030005042400425,
      "MetricsIntensity" : 0.06282517933047957,
      "Density" : 0.996580547112462
    },
    "euclideanDistance" : 13.141131506605205,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005067567567567,
      "LackOfCohesion" : 1.3030005042400425,
      "MetricsIntensity" : 0.06282517933047957,
      "Density" : 3.089517078916372
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "4989a07e-90dc-4e4f-888e-422ddc8d3c94",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 0.9960106382978723
    },
    "euclideanDistance" : 14.131007917372878,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 3.087750294464075
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "5fc7e8e4-fc3d-404a-8dd1-6af9575df982",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 0.9960106382978723
    },
    "euclideanDistance" : 14.131007917372878,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0056306306306304,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 3.0877502944640765
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "673d3f92-8a83-4505-98c0-825342f66a64",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 0.9960106382978723
    },
    "euclideanDistance" : 14.131007917372878,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248197,
      "Density" : 3.087750294464075
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "b87a575a-4a59-44bc-bb34-57aee1367906",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 0.9960106382978723
    },
    "euclideanDistance" : 14.131007917372878,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005630630630631,
      "LackOfCohesion" : 1.3017054300509467,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 3.087750294464075
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "78c52813-debd-4322-bc8e-b304e7bbc745",
    "objectives" : {
      "NumberOfConcerns" : 0.9974796975637077,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3018147008123915,
      "MetricsIntensity" : 0.06279744945242774,
      "Density" : 0.9960106382978723
    },
    "euclideanDistance" : 14.131017938335628,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0056306306306304,
      "LackOfCohesion" : 1.3018147008123915,
      "MetricsIntensity" : 0.06279744945242774,
      "Density" : 3.087750294464077
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "90aeff5d-99d8-4cc0-8b75-d0fc6c2b066b",
    "objectives" : {
      "NumberOfConcerns" : 0.9971996639596752,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3029634815807372,
      "MetricsIntensity" : 0.06280760763248194,
      "Density" : 0.9958206686930091
    },
    "euclideanDistance" : 14.131090708218775,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005067567567567,
      "LackOfCohesion" : 1.3029634815807372,
      "MetricsIntensity" : 0.06280760763248196,
      "Density" : 3.0871613663133095
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "5cb57e39-cf82-44a4-a2d9-614df4018783",
    "objectives" : {
      "NumberOfConcerns" : 0.9969196303556427,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.302927537251315,
      "MetricsIntensity" : 0.06283424355268177,
      "Density" : 0.9963905775075987
    },
    "euclideanDistance" : 14.131107926904562,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0045045045045047,
      "LackOfCohesion" : 1.302927537251315,
      "MetricsIntensity" : 0.06283424355268177,
      "Density" : 3.088928150765607
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "213bcd3c-d704-46cc-a818-c876f1967555",
    "objectives" : {
      "NumberOfConcerns" : 0.9969196303556427,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.302927537251315,
      "MetricsIntensity" : 0.06283424355268177,
      "Density" : 0.9963905775075987
    },
    "euclideanDistance" : 14.131107926904562,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.004504504504506,
      "LackOfCohesion" : 1.302927537251315,
      "MetricsIntensity" : 0.06283424355268177,
      "Density" : 3.088928150765607
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "fe9656b3-61e3-4ebc-b5b6-1a9e960e44bd",
    "objectives" : {
      "NumberOfConcerns" : 0.9969196303556427,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.302927537251315,
      "MetricsIntensity" : 0.06283424355268177,
      "Density" : 0.9963905775075987
    },
    "euclideanDistance" : 14.131107926904562,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.004504504504505,
      "LackOfCohesion" : 1.302927537251315,
      "MetricsIntensity" : 0.06283424355268177,
      "Density" : 3.0889281507656063
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array9Func'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutOtherMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScanSeed.ScanSeedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleMap.MapSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZip'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtMaybe.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      } ]
    } ]
  } ]
}