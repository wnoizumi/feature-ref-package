{
  "executionId" : "71639601-79c4-467b-a65a-09b628a5713d",
  "computingTime" : 3824759,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 32,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.411590774689533,
    "meanNumConcerns" : 1.872676056338028,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "e4ed84ca-3bef-4648-8ec0-8d40703709fc",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3024813058625224,
      "MetricsIntensity" : 0.06305852423564341,
      "Density" : 0.9967065349280638
    },
    "euclideanDistance" : 11.166505795701514,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797513,
      "LackOfCohesion" : 1.3024813058625224,
      "MetricsIntensity" : 0.0630585242356434,
      "Density" : 3.3943329397874864
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "b2c2776d-07c1-45da-88c6-665aba091f93",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3024089417059699,
      "MetricsIntensity" : 0.0630299423114146,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 11.166656154979387,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8661417322834646,
      "LackOfCohesion" : 1.3024089417059699,
      "MetricsIntensity" : 0.0630299423114146,
      "Density" : 3.401416765053129
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2c362c5d-095e-4fb4-a98b-4e89da5cb55d",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3024089417059699,
      "MetricsIntensity" : 0.0630299423114146,
      "Density" : 0.9987866181313919
    },
    "euclideanDistance" : 11.166656154979387,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8661417322834644,
      "LackOfCohesion" : 1.3024089417059699,
      "MetricsIntensity" : 0.0630299423114146,
      "Density" : 3.401416765053129
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "e0da6dc4-2454-4a0f-b295-6d60aaf4408b",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.302289199582607,
      "MetricsIntensity" : 0.06303969413597217,
      "Density" : 0.999653319466112
    },
    "euclideanDistance" : 11.166746695460274,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797522,
      "LackOfCohesion" : 1.302289199582607,
      "MetricsIntensity" : 0.06303969413597217,
      "Density" : 3.404368358913813
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.get()', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "e25882f0-e4f1-40f0-ba1f-3b5ebaad25f0",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3019941549906398,
      "MetricsIntensity" : 0.06309123531081108,
      "Density" : 1.0
    },
    "euclideanDistance" : 11.166770526559233,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8672665916760405,
      "LackOfCohesion" : 1.3019941549906398,
      "MetricsIntensity" : 0.0630912353108111,
      "Density" : 3.405548996458087
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.get()', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "a9593816-c314-4447-84c3-d05a90edd5d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9987966305655837,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3019941549906398,
      "MetricsIntensity" : 0.06309123531081108,
      "Density" : 1.0
    },
    "euclideanDistance" : 11.166770526559233,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8672665916760403,
      "LackOfCohesion" : 1.3019941549906398,
      "MetricsIntensity" : 0.06309123531081108,
      "Density" : 3.405548996458087
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.get()', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2cb89c49-25f1-4518-bf65-705ab0b2b119",
    "objectives" : {
      "NumberOfConcerns" : 0.9990974729241877,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3019270994015566,
      "MetricsIntensity" : 0.0630762415144943,
      "Density" : 1.000520020800832
    },
    "euclideanDistance" : 11.166836116681687,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8678290213723276,
      "LackOfCohesion" : 1.3019270994015566,
      "MetricsIntensity" : 0.0630762415144943,
      "Density" : 3.4073199527744986
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.get()', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ed83be53-9175-4b4a-84ce-e0dd0c80d639",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3022508022750483,
      "MetricsIntensity" : 0.06303634591192485,
      "Density" : 0.9968798751950078
    },
    "euclideanDistance" : 12.152801901519164,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797524,
      "LackOfCohesion" : 1.3022508022750483,
      "MetricsIntensity" : 0.06303634591192485,
      "Density" : 3.394923258559622
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ec2e5910-f560-4998-951e-9512fa23f967",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3022766266596535,
      "MetricsIntensity" : 0.0630293859010044,
      "Density" : 0.9968798751950078
    },
    "euclideanDistance" : 12.152804632695574,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.866704161979752,
      "LackOfCohesion" : 1.3022766266596535,
      "MetricsIntensity" : 0.06302938590100442,
      "Density" : 3.394923258559622
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "13c1f8e0-537f-4361-a642-c8615651e9d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3022766266596535,
      "MetricsIntensity" : 0.0630293859010044,
      "Density" : 0.9968798751950078
    },
    "euclideanDistance" : 12.152804632695574,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797524,
      "LackOfCohesion" : 1.3022766266596535,
      "MetricsIntensity" : 0.0630293859010044,
      "Density" : 3.394923258559622
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "337e0dc3-63ac-4c4d-828c-143f7a8e2e4a",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3022706395534853,
      "MetricsIntensity" : 0.06302213304249961,
      "Density" : 0.998959958398336
    },
    "euclideanDistance" : 12.152950043355593,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8661417322834646,
      "LackOfCohesion" : 1.3022706395534853,
      "MetricsIntensity" : 0.0630221330424996,
      "Density" : 3.4020070838252656
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ef07da2e-cdf9-4c02-9c83-ec885cf1986c",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.30175275486994,
      "MetricsIntensity" : 0.06304812814640033,
      "Density" : 1.0
    },
    "euclideanDistance" : 12.152980229194464,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8661417322834652,
      "LackOfCohesion" : 1.30175275486994,
      "MetricsIntensity" : 0.06304812814640033,
      "Density" : 3.405548996458087
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.get()', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "5b2e0d85-6567-435d-addc-4ea206f83d0b",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.302232920784626,
      "MetricsIntensity" : 0.06301838459342038,
      "Density" : 0.9961865141272318
    },
    "euclideanDistance" : 13.141079183593737,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.865579302587177,
      "LackOfCohesion" : 1.302232920784626,
      "MetricsIntensity" : 0.06301838459342038,
      "Density" : 3.3925619834710745
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "04cc6788-cdc1-40e6-b615-9cfdc3eec49d",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3023728993268375,
      "MetricsIntensity" : 0.06301838459342039,
      "Density" : 0.9960131738602878
    },
    "euclideanDistance" : 13.141079916429266,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8655793025871765,
      "LackOfCohesion" : 1.3023728993268375,
      "MetricsIntensity" : 0.06301838459342039,
      "Density" : 3.391971664698938
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ae739a8-b070-4785-a089-0a253b44ca69",
    "objectives" : {
      "NumberOfConcerns" : 0.9981949458483754,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021803939065109,
      "MetricsIntensity" : 0.06303634591192486,
      "Density" : 0.9967065349280638
    },
    "euclideanDistance" : 13.141136344542888,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8661417322834644,
      "LackOfCohesion" : 1.3021803939065109,
      "MetricsIntensity" : 0.06303634591192486,
      "Density" : 3.394332939787486
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "7e91aa11-44f3-4c88-a70f-fe3bef5b7141",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021803939065106,
      "MetricsIntensity" : 0.06302853664300989,
      "Density" : 0.9967065349280638
    },
    "euclideanDistance" : 13.141159162362401,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797522,
      "LackOfCohesion" : 1.3021803939065106,
      "MetricsIntensity" : 0.06302853664300989,
      "Density" : 3.3943329397874855
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0f2953d2-f067-4155-9cd4-1005097f2f60",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021803939065109,
      "MetricsIntensity" : 0.06302853664300988,
      "Density" : 0.9967065349280638
    },
    "euclideanDistance" : 13.141159162362401,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797524,
      "LackOfCohesion" : 1.3021803939065109,
      "MetricsIntensity" : 0.06302853664300988,
      "Density" : 3.3943329397874864
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "d48231a6-19fc-47e0-a5f4-3506e64dd846",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3021803939065106,
      "MetricsIntensity" : 0.06302853664300989,
      "Density" : 0.9967065349280638
    },
    "euclideanDistance" : 13.141159162362401,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797522,
      "LackOfCohesion" : 1.3021803939065106,
      "MetricsIntensity" : 0.06302853664300989,
      "Density" : 3.394332939787485
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "8bcfd5f0-adf1-4da4-a472-3edf9c7079a6",
    "objectives" : {
      "NumberOfConcerns" : 0.9984957882069796,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3016823465014022,
      "MetricsIntensity" : 0.0629038128568514,
      "Density" : 0.9993066389322239
    },
    "euclideanDistance" : 13.141306686115595,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797518,
      "LackOfCohesion" : 1.3016823465014022,
      "MetricsIntensity" : 0.0629038128568514,
      "Density" : 3.403187721369539
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.cleanup()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.ItemDelayFunction'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.get()', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "c345ad29-15a9-43e7-84ab-470c68af5c29",
    "objectives" : {
      "NumberOfConcerns" : 0.9972924187725631,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3023024909582999,
      "MetricsIntensity" : 0.06301838459342037,
      "Density" : 0.9954931530594557
    },
    "euclideanDistance" : 14.13101418444842,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8644544431946009,
      "LackOfCohesion" : 1.3023024909582999,
      "MetricsIntensity" : 0.06301838459342035,
      "Density" : 3.390200708382527
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "5d850bca-2d65-4c87-9d77-46064de5b320",
    "objectives" : {
      "NumberOfConcerns" : 0.9975932611311673,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3021625124160885,
      "MetricsIntensity" : 0.06301838459342042,
      "Density" : 0.9960131738602878
    },
    "euclideanDistance" : 14.131059163512694,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650168728908887,
      "LackOfCohesion" : 1.3021625124160885,
      "MetricsIntensity" : 0.06301838459342042,
      "Density" : 3.391971664698938
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "a4468956-a358-4b25-8f08-9065c5bf1b0b",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3021625124160885,
      "MetricsIntensity" : 0.06301057532450541,
      "Density" : 0.9960131738602878
    },
    "euclideanDistance" : 14.131080370078834,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8655793025871765,
      "LackOfCohesion" : 1.3021625124160885,
      "MetricsIntensity" : 0.06301057532450541,
      "Density" : 3.391971664698938
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "e107c6ae-bbd5-4a9f-9b9b-934b4f015179",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3023259604144792,
      "MetricsIntensity" : 0.0630105753245054,
      "Density" : 0.9958398335933437
    },
    "euclideanDistance" : 14.13108321593653,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8655793025871765,
      "LackOfCohesion" : 1.3023259604144792,
      "MetricsIntensity" : 0.0630105753245054,
      "Density" : 3.3913813459268005
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f2c583e8-83cb-4e13-9312-abe254fc4df0",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3025975355502668,
      "MetricsIntensity" : 0.06299979853340272,
      "Density" : 0.9956664933263997
    },
    "euclideanDistance" : 14.131095984457447,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8655793025871767,
      "LackOfCohesion" : 1.3025975355502668,
      "MetricsIntensity" : 0.06299979853340272,
      "Density" : 3.3907910271546644
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0222a464-2fc9-4d15-98cd-becaf400b9eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3025975355502666,
      "MetricsIntensity" : 0.06299979853340273,
      "Density" : 0.9956664933263997
    },
    "euclideanDistance" : 14.131095984457447,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8655793025871767,
      "LackOfCohesion" : 1.3025975355502666,
      "MetricsIntensity" : 0.06299979853340273,
      "Density" : 3.3907910271546644
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "4d0a697f-7ae8-4254-ac27-e0eaacd850ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9969915764139591,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.302434087551876,
      "MetricsIntensity" : 0.06300760780231769,
      "Density" : 0.9953198127925117
    },
    "euclideanDistance" : 15.122333095267932,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8638920134983126,
      "LackOfCohesion" : 1.302434087551876,
      "MetricsIntensity" : 0.0630076078023177,
      "Density" : 3.3896103896103895
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "c24e2c36-feb0-4967-8c4d-b73b2a9e73e2",
    "objectives" : {
      "NumberOfConcerns" : 0.996690734055355,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3021390429599093,
      "MetricsIntensity" : 0.06301838459342038,
      "Density" : 0.9953198127925117
    },
    "euclideanDistance" : 16.114701094127884,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8633295838020252,
      "LackOfCohesion" : 1.3021390429599093,
      "MetricsIntensity" : 0.06301838459342037,
      "Density" : 3.3896103896103895
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "5bbe6fb3-7ea3-4b57-826d-d1aed522eb37",
    "objectives" : {
      "NumberOfConcerns" : 0.9972924187725631,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3021390429599093,
      "MetricsIntensity" : 0.06301057532450545,
      "Density" : 0.9956664933263997
    },
    "euclideanDistance" : 16.114759705136077,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8644544431946009,
      "LackOfCohesion" : 1.3021390429599093,
      "MetricsIntensity" : 0.06301057532450544,
      "Density" : 3.390791027154664
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "86be3e68-6764-41a8-9a3d-98e165c4d001",
    "objectives" : {
      "NumberOfConcerns" : 0.9972924187725631,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3025044959204137,
      "MetricsIntensity" : 0.06299979853340273,
      "Density" : 0.9954931530594557
    },
    "euclideanDistance" : 16.11477848817158,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8644544431946009,
      "LackOfCohesion" : 1.3025044959204137,
      "MetricsIntensity" : 0.06299979853340273,
      "Density" : 3.390200708382526
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "2044966b-7417-40a5-905e-0fbda2034c55",
    "objectives" : {
      "NumberOfConcerns" : 0.9978941034897714,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3021331755958643,
      "MetricsIntensity" : 0.063024944379309,
      "Density" : 0.9965331946611198
    },
    "euclideanDistance" : 16.114850107911103,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8655793025871763,
      "LackOfCohesion" : 1.3021331755958643,
      "MetricsIntensity" : 0.063024944379309,
      "Density" : 3.3937426210153476
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "0046574e-7257-460c-bee8-66a3465a7a03",
    "objectives" : {
      "NumberOfConcerns" : 0.9969915764139591,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3022094513284466,
      "MetricsIntensity" : 0.06301057532450545,
      "Density" : 0.9954931530594557
    },
    "euclideanDistance" : 17.10803082207185,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8638920134983128,
      "LackOfCohesion" : 1.3022094513284466,
      "MetricsIntensity" : 0.06301057532450544,
      "Density" : 3.390200708382527
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "dae93398-ec37-4656-ae33-31c2ade740b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9975932611311673,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3021097061396856,
      "MetricsIntensity" : 0.06301057532450541,
      "Density" : 0.9960131738602878
    },
    "euclideanDistance" : 17.108088571683965,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8650168728908885,
      "LackOfCohesion" : 1.3021097061396856,
      "MetricsIntensity" : 0.06301057532450541,
      "Density" : 3.3919716646989384
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.set(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.replace(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate.InnerSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer.complete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.UnboundedReplayBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.close(AutoCloseable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.drain(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.isDisposed(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.clear(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSuccess(T), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onComplete(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.requestFusion(int), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.dispose(), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onSubscribe(Disposable), io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsObservable.FlattenStreamMultiObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.schedulers.AbstractDirectTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.run()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.dispose()', targetType='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.INTERRUPTED', targetTypeName='io.reactivex.rxjava3.internal.util.OpenHashSet'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.FutureMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.FutureMultiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.FutureMultiObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.shutdown()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJoin'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.FutureSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.isDone()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoAfterNext.DoAfterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.FutureSubscriber.cancel(boolean)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDelay.DelaySubscriber.OnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose(), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)]"
      } ]
    } ]
  } ]
}