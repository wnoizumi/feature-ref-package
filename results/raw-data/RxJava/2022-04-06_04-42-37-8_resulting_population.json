{
  "executionId" : "ba9e58e0-6745-4c79-b173-ddae30458615",
  "computingTime" : 10852,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.3807285546415975,
    "meanNumConcerns" : 1.8659154929577462,
    "meanMetricsIntensity" : 0.06269018858892111,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "fddc1a52-bca8-4eeb-b16a-9fe44f78c134",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 3.0,
      "LackOfCohesion" : 1.3022143633212244,
      "MetricsIntensity" : 0.06259638036499575,
      "Density" : 1.0008689607229753
    },
    "euclideanDistance" : 3.564498667631712,
    "generation" : 0,
    "numberOfRefactorings" : 3,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8667041619797522,
      "LackOfCohesion" : 1.3022143633212244,
      "MetricsIntensity" : 0.06259638036499575,
      "Density" : 3.377712609970675,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c0bbfce2-3bd1-45c7-8aab-f74c2f8a920d",
    "objectives" : {
      "NumberOfConcerns" : 1.0045289855072463,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 1.2996185695120044,
      "MetricsIntensity" : 0.06251951363992977,
      "Density" : 1.0006951685783803
    },
    "euclideanDistance" : 9.203444269345392,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8649103139013452,
      "LackOfCohesion" : 1.2996185695120044,
      "MetricsIntensity" : 0.06251951363992977,
      "Density" : 3.3672514619883045,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8a64a30b-b672-4ac6-bd37-722bd7bccfe6",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.300315968378988,
      "MetricsIntensity" : 0.06253122548126847,
      "Density" : 0.9982620785540494
    },
    "euclideanDistance" : 16.114920265880606,
    "generation" : 0,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8590679393599099,
      "LackOfCohesion" : 1.300315968378988,
      "MetricsIntensity" : 0.06253122548126847,
      "Density" : 3.364967779730522,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "3fbafdbe-6713-4c83-911e-4dff92b5059f",
    "objectives" : {
      "NumberOfConcerns" : 1.0036231884057971,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.299553644290513,
      "MetricsIntensity" : 0.06253654619091407,
      "Density" : 1.0005213764337852
    },
    "euclideanDistance" : 19.097147771931937,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8653198653198655,
      "LackOfCohesion" : 1.299553644290513,
      "MetricsIntensity" : 0.06253654619091407,
      "Density" : 3.3686366296079577,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.FlattenIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "2f934b14-0902-494e-a061-b00c67e7a050",
    "objectives" : {
      "NumberOfConcerns" : 1.0015096618357489,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2993429197539224,
      "MetricsIntensity" : 0.0626160548624089,
      "Density" : 1.0
    },
    "euclideanDistance" : 20.092168484167942,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8624368332397527,
      "LackOfCohesion" : 1.2993429197539224,
      "MetricsIntensity" : 0.0626160548624089,
      "Density" : 3.3688524590163924,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "f5634db5-46a3-4b28-9017-bd551c92a7bb",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.2995468662103202,
      "MetricsIntensity" : 0.06252504114391312,
      "Density" : 0.9998262078554049
    },
    "euclideanDistance" : 20.09220285096426,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8625140291806959,
      "LackOfCohesion" : 1.2995468662103202,
      "MetricsIntensity" : 0.06252504114391313,
      "Density" : 3.368266978922717,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "c34af5f1-227e-4dce-8cb9-1f1f305f589c",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2992398908843374,
      "MetricsIntensity" : 0.062612585131677,
      "Density" : 0.9994786235662148
    },
    "euclideanDistance" : 22.083738499283704,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601909039865248,
      "LackOfCohesion" : 1.2992398908843374,
      "MetricsIntensity" : 0.062612585131677,
      "Density" : 3.3690685413005266,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "7b61bc28-13a3-4a69-b8df-b67c3a86199e",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2984318839204003,
      "MetricsIntensity" : 0.06274729197033214,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 23.08005046288623,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601909039865248,
      "LackOfCohesion" : 1.2984318839204003,
      "MetricsIntensity" : 0.06274729197033214,
      "Density" : 3.367896895137668,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f532d2db-56f0-4bc7-a9c1-2bdd6389c1dd",
    "objectives" : {
      "NumberOfConcerns" : 1.0003019323671498,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2991278339939036,
      "MetricsIntensity" : 0.06278067128788689,
      "Density" : 0.9996524157108099
    },
    "euclideanDistance" : 23.080112292835125,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8612359550561794,
      "LackOfCohesion" : 1.2991278339939036,
      "MetricsIntensity" : 0.06278067128788689,
      "Density" : 3.3696543643819563,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "aa6978ad-bc69-4224-bc28-54f10c8ee3ea",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3009273800617729,
      "MetricsIntensity" : 0.06261454775499992,
      "Density" : 0.9987834549878345
    },
    "euclideanDistance" : 24.07679568061348,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8589887640449434,
      "LackOfCohesion" : 1.3009273800617729,
      "MetricsIntensity" : 0.06261454775499992,
      "Density" : 3.3686987104337645,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "8edd4c77-b7d8-4246-ba41-06645a4cc1d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0021135265700483,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2975260280363685,
      "MetricsIntensity" : 0.06281582856618662,
      "Density" : 1.0005213764337852
    },
    "euclideanDistance" : 24.07681029884536,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8635597978663674,
      "LackOfCohesion" : 1.2975260280363685,
      "MetricsIntensity" : 0.06281582856618662,
      "Density" : 3.3706088992974244,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "64915a0c-0047-4398-8ced-0db0499d7b52",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2986485400210028,
      "MetricsIntensity" : 0.06270944823273013,
      "Density" : 0.9991310392770246
    },
    "euclideanDistance" : 26.070886065812775,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8618753509264454,
      "LackOfCohesion" : 1.2986485400210028,
      "MetricsIntensity" : 0.06270944823273011,
      "Density" : 3.367896895137668,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "6cb674b0-5fca-4088-aeb0-2a52ced55658",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.29950364942494,
      "MetricsIntensity" : 0.06278909005612758,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 26.070889174533374,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8606741573033705,
      "LackOfCohesion" : 1.29950364942494,
      "MetricsIntensity" : 0.06278909005612758,
      "Density" : 3.3704572098475967,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "a35fc58a-4e95-4dc7-bf17-1509aa777552",
    "objectives" : {
      "NumberOfConcerns" : 0.9996980676328503,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2980824837618063,
      "MetricsIntensity" : 0.06282731355536139,
      "Density" : 0.9993048314216197
    },
    "euclideanDistance" : 27.068191143453035,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8601123595505613,
      "LackOfCohesion" : 1.2980824837618063,
      "MetricsIntensity" : 0.06282731355536139,
      "Density" : 3.3684827182190973,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "81e26cd7-dedf-4f8b-8ae4-b76011c4024b",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.300503388885493,
      "MetricsIntensity" : 0.06263621316705924,
      "Density" : 0.9977407021202641
    },
    "euclideanDistance" : 27.068193492766337,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858347386172007,
      "LackOfCohesion" : 1.300503388885493,
      "MetricsIntensity" : 0.06263621316705924,
      "Density" : 3.365181711606095,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "d3860cab-029f-4ecf-a196-606f992a46d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.29941721326753,
      "MetricsIntensity" : 0.06284113284692286,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 28.0657077932387,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.858347386172007,
      "LackOfCohesion" : 1.29941721326753,
      "MetricsIntensity" : 0.06284113284692285,
      "Density" : 3.3645955451348177,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.FlattenIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "47e465c2-d837-42b0-9ec3-976ad6ba8bf6",
    "objectives" : {
      "NumberOfConcerns" : 0.9951690821256038,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3026416708036155,
      "MetricsIntensity" : 0.06270107119757844,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 28.065718858616584,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8548114800225093,
      "LackOfCohesion" : 1.3026416708036155,
      "MetricsIntensity" : 0.06270107119757844,
      "Density" : 3.365610328638498,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "3e0623aa-6ba5-4c35-af3d-24815c565c87",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3015953211918363,
      "MetricsIntensity" : 0.0627025219638097,
      "Density" : 0.9966979492526937
    },
    "euclideanDistance" : 28.06572388710325,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298257,
      "LackOfCohesion" : 1.3015953211918363,
      "MetricsIntensity" : 0.0627025219638097,
      "Density" : 3.3656103286384984,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array7Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "c2380058-cbdf-4f23-ace3-32a786541fcf",
    "objectives" : {
      "NumberOfConcerns" : 0.9972826086956522,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2991462264685143,
      "MetricsIntensity" : 0.06284977318288355,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 29.06342175038602,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8566610455311974,
      "LackOfCohesion" : 1.2991462264685143,
      "MetricsIntensity" : 0.06284977318288355,
      "Density" : 3.3683284457478013,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "876592ae-4af8-4ca0-b98b-ca5c19910339",
    "objectives" : {
      "NumberOfConcerns" : 1.001207729468599,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.2990457643427358,
      "MetricsIntensity" : 0.06283787484089036,
      "Density" : 1.000173792144595
    },
    "euclideanDistance" : 32.05767042422784,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8639685216413713,
      "LackOfCohesion" : 1.2990457643427358,
      "MetricsIntensity" : 0.06283787484089037,
      "Density" : 3.3733880422039864,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.FlattenIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext(), io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "7af0c2ef-097c-4c1a-ac68-8e1655e8be9e",
    "objectives" : {
      "NumberOfConcerns" : 0.9948671497584541,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.2999910162230173,
      "MetricsIntensity" : 0.06286714135253761,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 33.05564044062355,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.854248733821047,
      "LackOfCohesion" : 1.2999910162230173,
      "MetricsIntensity" : 0.06286714135253761,
      "Density" : 3.3646506165590138,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array7Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "5f6f8d72-07d4-4c9a-9daf-805cc103bfad",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.3011137782427313,
      "MetricsIntensity" : 0.06266868963258473,
      "Density" : 0.9961765728189086
    },
    "euclideanDistance" : 33.05571289101964,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8553742262239732,
      "LackOfCohesion" : 1.3011137782427313,
      "MetricsIntensity" : 0.06266868963258473,
      "Density" : 3.3658250146799764,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array7Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "6a9ea922-fdbc-4cfa-aaf9-a3cbc40b2f94",
    "objectives" : {
      "NumberOfConcerns" : 0.9954710144927537,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.3023815152104166,
      "MetricsIntensity" : 0.06271999123868663,
      "Density" : 0.9958289885297185
    },
    "euclideanDistance" : 34.05411530672254,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8564189189189184,
      "LackOfCohesion" : 1.3023815152104166,
      "MetricsIntensity" : 0.06271999123868663,
      "Density" : 3.3646506165590133,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array7Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "99fdccba-e295-4bc2-b8bc-dca1c174ce4a",
    "objectives" : {
      "NumberOfConcerns" : 0.9990942028985508,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2994226325163252,
      "MetricsIntensity" : 0.0628241409515942,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 34.05420019407953,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8610798650168732,
      "LackOfCohesion" : 1.2994226325163252,
      "MetricsIntensity" : 0.0628241409515942,
      "Density" : 3.3712609970674485,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "dcc11776-cdbf-45c2-9ebe-a4b56d8484a4",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.3009145439905185,
      "MetricsIntensity" : 0.06303437043004273,
      "Density" : 0.9940910670837678
    },
    "euclideanDistance" : 35.05251117254297,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8602816901408454,
      "LackOfCohesion" : 1.3009145439905185,
      "MetricsIntensity" : 0.06303437043004273,
      "Density" : 3.3587786259541987,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableWindow'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimer.TimerDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSinglePublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SingleScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.SingleScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFromCallable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSkipUntil.SkipUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapIntoIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.disposables.SubscriptionDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmpty.SwitchIfEmptyObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.subjects.AsyncSubject.AsyncDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.subjects.AsyncSubject.AsyncDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array5Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmpty.SwitchIfEmptyMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableEmpty'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.ItemDelayFunction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.disposables.CompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleOnErrorComplete'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFromAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletable.ConcatMapCompletableObserver.ConcatMapInnerObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "a70b9cca-97d6-4fe8-a8c3-321eeb67b804",
    "objectives" : {
      "NumberOfConcerns" : 0.9966787439613527,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.30009519686702,
      "MetricsIntensity" : 0.06291767507102343,
      "Density" : 0.9975669099756691
    },
    "euclideanDistance" : 35.05257072474565,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8576252110298253,
      "LackOfCohesion" : 1.30009519686702,
      "MetricsIntensity" : 0.06291767507102343,
      "Density" : 3.3685446009389666,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "ca72c3a2-3a6f-4b68-866b-7f96b01f4e7b",
    "objectives" : {
      "NumberOfConcerns" : 0.9969806763285024,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3007902180921749,
      "MetricsIntensity" : 0.06290000816877898,
      "Density" : 0.9980882864094542
    },
    "euclideanDistance" : 36.05116034608251,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8581879572312892,
      "LackOfCohesion" : 1.3007902180921749,
      "MetricsIntensity" : 0.06290000816877898,
      "Density" : 3.3703051643192494,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.FlattenIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4f5211df-a2b5-4838-bae3-6d0c0b91a798",
    "objectives" : {
      "NumberOfConcerns" : 0.9984903381642513,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2993310851993969,
      "MetricsIntensity" : 0.06283218591366022,
      "Density" : 0.9984358706986444
    },
    "euclideanDistance" : 38.048469959984686,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.859955005624297,
      "LackOfCohesion" : 1.2993310851993969,
      "MetricsIntensity" : 0.06283218591366022,
      "Density" : 3.36950146627566,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.serialVersionUID, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.source, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.downstream, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.produced, io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.sa], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5d344ef1-8629-4c52-9dc3-063f423af670",
    "objectives" : {
      "NumberOfConcerns" : 0.9930555555555556,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3013483688638325,
      "MetricsIntensity" : 0.06299025787170968,
      "Density" : 0.9956551963851233
    },
    "euclideanDistance" : 40.04591070204597,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8529577464788738,
      "LackOfCohesion" : 1.3013483688638325,
      "MetricsIntensity" : 0.06299025787170968,
      "Density" : 3.3660399529964753,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFilter.FilterObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArray'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable.TakeUntilMainObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticast.MulticastSubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromObservable.CompletableFromObservableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "40a4a5e0-09aa-493e-a616-d562c174c47d",
    "objectives" : {
      "NumberOfConcerns" : 0.9981884057971014,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3005506360332315,
      "MetricsIntensity" : 0.06258882299156651,
      "Density" : 0.997393117831074
    },
    "euclideanDistance" : 40.04605501722504,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.860438942037141,
      "LackOfCohesion" : 1.3005506360332315,
      "MetricsIntensity" : 0.06258882299156651,
      "Density" : 3.367957746478874,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.QueueWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLast.TakeLastObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array7Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)]"
      } ]
    } ]
  }, {
    "solutionId" : "b9d8ca65-6f90-48b9-9ec4-b937bdffad7a",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2984401264563574,
      "MetricsIntensity" : 0.06282922018129292,
      "Density" : 0.9987834549878345
    },
    "euclideanDistance" : 40.04606675646009,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.862767154105737,
      "LackOfCohesion" : 1.2984401264563574,
      "MetricsIntensity" : 0.0628292201812929,
      "Density" : 3.3706744868035194,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array7Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.downstream, io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.other], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed(), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "3b7c7ccc-5ec5-4be3-8086-c09b861298ed",
    "objectives" : {
      "NumberOfConcerns" : 0.998792270531401,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.3010184235214917,
      "MetricsIntensity" : 0.06255616391784867,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 41.04500047256984,
    "generation" : 0,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.863661971830986,
      "LackOfCohesion" : 1.3010184235214917,
      "MetricsIntensity" : 0.06255616391784867,
      "Density" : 3.3772032902467686,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.FlattenIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    } ]
  }, {
    "solutionId" : "fa1c4061-0f22-40ba-9ace-786753c7f6e0",
    "objectives" : {
      "NumberOfConcerns" : 0.9993961352657005,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2998325504425188,
      "MetricsIntensity" : 0.06288060521644721,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 42.04390832030824,
    "generation" : 0,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8616422947131612,
      "LackOfCohesion" : 1.2998325504425188,
      "MetricsIntensity" : 0.06288060521644721,
      "Density" : 3.3732394366197176,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.exceptions.Exceptions'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.size()', targetType='io.reactivex.rxjava3.internal.schedulers.NewThreadScheduler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>)', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.clear()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.disposables.CompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.core.ToFlowablePerf'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.FlattenIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.Emitter(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.tryOnError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.scheduler, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.delayError, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.value, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.unit, io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.error], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.RepeatSubscriber(Subscriber<? super T>, BooleanSupplier, SubscriptionArbiter, Publisher<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  }, {
    "solutionId" : "466b76c0-4fc7-4a04-9725-378834a97de2",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2995031868124358,
      "MetricsIntensity" : 0.06265623300820886,
      "Density" : 0.9989572471324296
    },
    "euclideanDistance" : 43.04289197902098,
    "generation" : 0,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8638154192459198,
      "LackOfCohesion" : 1.2995031868124358,
      "MetricsIntensity" : 0.06265623300820886,
      "Density" : 3.3732394366197176,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkip.SkipSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybe.SwitchMapMaybeMainObserver.SwitchMapMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.disposables.CompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.disposables.CompositeDisposable.resources, io.reactivex.rxjava3.disposables.CompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(OpenHashSet<Disposable>), io.reactivex.rxjava3.disposables.CompositeDisposable.isDisposed(), io.reactivex.rxjava3.disposables.CompositeDisposable.clear(), io.reactivex.rxjava3.disposables.CompositeDisposable.add(Disposable), io.reactivex.rxjava3.disposables.CompositeDisposable.size(), io.reactivex.rxjava3.disposables.CompositeDisposable.dispose(), io.reactivex.rxjava3.disposables.CompositeDisposable.addAll(Disposable...)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.FlattenIterableObserver(Observer<? super R>, Function<? super T,? extends Iterable<? extends R>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlattenIterable.FlattenIterableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setCancellable(Cancellable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.onError(Throwable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.setDisposable(Disposable), io.reactivex.rxjava3.internal.operators.single.SingleCreate.Emitter.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.schedule(long)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.DelayMaybeObserver(MaybeObserver<? super T>, long, TimeUnit, Scheduler, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay.DelayMaybeObserver.run()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDelay'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.subscribeNext()', targetType='io.reactivex.rxjava3.internal.functions.Functions.Array7Func'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatUntil.RepeatSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.LambdaSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.dispose()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.TakeUntilMainObserver(SingleObserver<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil.TakeUntilMainObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleTakeUntil'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setCancellable(Cancellable)', targetType='io.reactivex.rxjava3.internal.disposables.CancellableDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilter.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableAmb",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.ObservableAmb(ObservableSource<? extends T>[], Iterable<? extends ObservableSource<? extends T>>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableAmb.subscribeActual(Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.disposables.EmptyDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferTimed.BufferExactUnboundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeArrayDelayError.TryTerminateAndReportDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.schedulers.SchedulerWhen.ScheduledAction'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletable.MergeWithSubscriber.OtherObserver'"
      } ]
    } ]
  } ]
}