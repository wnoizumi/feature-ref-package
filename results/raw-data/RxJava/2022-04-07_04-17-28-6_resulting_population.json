{
  "executionId" : "4a4ff6cf-bd48-40d6-9175-5754d247d379",
  "computingTime" : 3759354,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 29,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1001177856301525,
    "meanNumConcerns" : 2.011830985915493,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "32a030fa-1a7a-4177-9ec6-8794e645fb26",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.29957810243363,
      "MetricsIntensity" : 0.06265388068663205,
      "Density" : 0.9986702127659575
    },
    "euclideanDistance" : 10.182892093852685,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.29957810243363,
      "MetricsIntensity" : 0.06265388068663205,
      "Density" : 3.0869054609512623
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run(), io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "43f1ad60-55b1-4f4e-b848-8a30dfe00c8b",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.29957810243363,
      "MetricsIntensity" : 0.06265388068663205,
      "Density" : 0.9986702127659575
    },
    "euclideanDistance" : 10.182892093852685,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.29957810243363,
      "MetricsIntensity" : 0.06265388068663204,
      "Density" : 3.0869054609512614
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run(), io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "3dc3a081-9847-4ff7-8011-ffa0a6c59bf4",
    "objectives" : {
      "NumberOfConcerns" : 1.0002800336040325,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3010733692150411,
      "MetricsIntensity" : 0.06256419095773608,
      "Density" : 0.9977203647416414
    },
    "euclideanDistance" : 10.182961860967458,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.006741573033708,
      "LackOfCohesion" : 1.3010733692150411,
      "MetricsIntensity" : 0.06256419095773608,
      "Density" : 3.08578143360752
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "48af4302-ec60-426c-b9b1-d939af0099bb",
    "objectives" : {
      "NumberOfConcerns" : 1.0002800336040325,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3010733692150411,
      "MetricsIntensity" : 0.06256419095773608,
      "Density" : 0.9977203647416414
    },
    "euclideanDistance" : 10.182961860967458,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067415730337084,
      "LackOfCohesion" : 1.3010733692150411,
      "MetricsIntensity" : 0.06256419095773608,
      "Density" : 3.0857814336075204
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c002688e-ffc9-48b0-a789-3929317de2bd",
    "objectives" : {
      "NumberOfConcerns" : 1.0008401008120975,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.29957810243363,
      "MetricsIntensity" : 0.06264608553085367,
      "Density" : 0.9992401215805471
    },
    "euclideanDistance" : 10.182975474011867,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0078651685393263,
      "LackOfCohesion" : 1.29957810243363,
      "MetricsIntensity" : 0.06264608553085366,
      "Density" : 3.088667058132707
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run(), io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "2902a5b0-3e68-4844-b55d-09dd574ef12c",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.301073369215041,
      "MetricsIntensity" : 0.06257198611351447,
      "Density" : 0.9979103343465046
    },
    "euclideanDistance" : 10.183008035399645,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.301073369215041,
      "MetricsIntensity" : 0.06257198611351447,
      "Density" : 3.084556664709337
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5eef13ba-e250-4219-9606-a985e9c93e3b",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3007829217107385,
      "MetricsIntensity" : 0.06267243315738459,
      "Density" : 0.9984802431610942
    },
    "euclideanDistance" : 10.183027412678738,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.3007829217107385,
      "MetricsIntensity" : 0.06267243315738459,
      "Density" : 3.0863182618907805
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "31511548-5b9a-428e-bddc-0f4734b49ea9",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3007829217107383,
      "MetricsIntensity" : 0.0626724331573846,
      "Density" : 0.9984802431610942
    },
    "euclideanDistance" : 10.183027412678738,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.3007829217107383,
      "MetricsIntensity" : 0.0626724331573846,
      "Density" : 3.0863182618907805
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "2f2c0102-56b6-46dd-aeca-6893f747cebe",
    "objectives" : {
      "NumberOfConcerns" : 1.0008401008120975,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3007829217107383,
      "MetricsIntensity" : 0.06265091852743628,
      "Density" : 0.9986702127659575
    },
    "euclideanDistance" : 10.183073428403933,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.007865168539326,
      "LackOfCohesion" : 1.3007829217107383,
      "MetricsIntensity" : 0.06265091852743626,
      "Density" : 3.0869054609512623
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "69d455df-9244-4eb8-952b-0ee70f8e443c",
    "objectives" : {
      "NumberOfConcerns" : 1.0008401008120975,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3007829217107383,
      "MetricsIntensity" : 0.06265091852743628,
      "Density" : 0.9986702127659575
    },
    "euclideanDistance" : 10.183073428403933,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0078651685393263,
      "LackOfCohesion" : 1.3007829217107383,
      "MetricsIntensity" : 0.06265091852743626,
      "Density" : 3.0869054609512614
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "53835e13-ac74-41b0-9ecc-ce580ce5343d",
    "objectives" : {
      "NumberOfConcerns" : 1.0008401008120975,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3007829217107385,
      "MetricsIntensity" : 0.06265091852743625,
      "Density" : 0.9986702127659575
    },
    "euclideanDistance" : 10.183073428403933,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0078651685393263,
      "LackOfCohesion" : 1.3007829217107385,
      "MetricsIntensity" : 0.06265091852743625,
      "Density" : 3.086905460951262
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "05e52783-795e-4991-af52-8d22ef98fd2f",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.303269294312197,
      "MetricsIntensity" : 0.06254515833314293,
      "Density" : 0.9984802431610942
    },
    "euclideanDistance" : 10.183344538726084,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.303269294312197,
      "MetricsIntensity" : 0.06254515833314293,
      "Density" : 3.0863182618907805
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(AtomicReference<Subscription>), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(long)]"
      } ]
    } ]
  }, {
    "solutionId" : "f746b83d-23bd-480d-a840-ae099e5cfa06",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3028978453874025,
      "MetricsIntensity" : 0.06318147046210383,
      "Density" : 0.9998100303951368
    },
    "euclideanDistance" : 10.183376394428501,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0061797752808994,
      "LackOfCohesion" : 1.3028978453874025,
      "MetricsIntensity" : 0.06318147046210382,
      "Density" : 3.0922444183313744
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "67346af4-cbe6-4a5c-9b8b-7ed6f6f41e21",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2994860676277395,
      "MetricsIntensity" : 0.06263532821587948,
      "Density" : 0.9984802431610942
    },
    "euclideanDistance" : 11.166497681384874,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.2994860676277395,
      "MetricsIntensity" : 0.06263532821587948,
      "Density" : 3.0863182618907805
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run(), io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "fa8568b2-7e8c-4415-bd58-f5f23cb1f642",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3006908869048481,
      "MetricsIntensity" : 0.06265388068663205,
      "Density" : 0.998290273556231
    },
    "euclideanDistance" : 11.16662107400492,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.007303370786517,
      "LackOfCohesion" : 1.3006908869048481,
      "MetricsIntensity" : 0.06265388068663205,
      "Density" : 3.0857310628302996
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "b16b7608-6bcd-418e-b7e6-656bff14dcfe",
    "objectives" : {
      "NumberOfConcerns" : 0.999439932791935,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3029016507709548,
      "MetricsIntensity" : 0.06318147046210383,
      "Density" : 0.9992401215805471
    },
    "euclideanDistance" : 11.166866418544949,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005056179775281,
      "LackOfCohesion" : 1.3029016507709548,
      "MetricsIntensity" : 0.06318147046210383,
      "Density" : 3.0904817861339575
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "8930a305-f465-4d28-b544-b28e86fd37eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9997199663959675,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3028476143245136,
      "MetricsIntensity" : 0.06318147046210379,
      "Density" : 0.9994300911854104
    },
    "euclideanDistance" : 11.166902181121605,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.00561797752809,
      "LackOfCohesion" : 1.3028476143245136,
      "MetricsIntensity" : 0.06318147046210379,
      "Density" : 3.0910693301997645
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "89073f21-5577-4726-b6d7-607e0d3e79b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9997199663959675,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3028476143245133,
      "MetricsIntensity" : 0.06318147046210384,
      "Density" : 0.9994300911854104
    },
    "euclideanDistance" : 11.166902181121605,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0056179775280905,
      "LackOfCohesion" : 1.3028476143245133,
      "MetricsIntensity" : 0.06318147046210383,
      "Density" : 3.0910693301997667
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "9129bd4d-fe7d-4497-b1c2-a3259d3df4dd",
    "objectives" : {
      "NumberOfConcerns" : 0.9997199663959675,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.302857399596505,
      "MetricsIntensity" : 0.06315954253872365,
      "Density" : 0.9994300911854104
    },
    "euclideanDistance" : 11.166903198733062,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0056179775280905,
      "LackOfCohesion" : 1.302857399596505,
      "MetricsIntensity" : 0.06315954253872365,
      "Density" : 3.0910693301997645
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBufferBoundary.BufferBoundarySubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ed625c7-6bae-45b1-a91e-749fe3cf3bf9",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.299737071643804,
      "MetricsIntensity" : 0.06255935796115347,
      "Density" : 0.9981003039513677
    },
    "euclideanDistance" : 12.152800286086862,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.299737071643804,
      "MetricsIntensity" : 0.06255935796115347,
      "Density" : 3.0851438637698183
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run(), io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.onSubscribe(Subscription)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "bf1ea33e-7c75-41dc-b47a-fa14a405acea",
    "objectives" : {
      "NumberOfConcerns" : 1.0002800336040325,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3009418909209123,
      "MetricsIntensity" : 0.06258172031429275,
      "Density" : 0.9973404255319149
    },
    "euclideanDistance" : 12.152843878915643,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067415730337084,
      "LackOfCohesion" : 1.3009418909209123,
      "MetricsIntensity" : 0.06258172031429275,
      "Density" : 3.082795067527892
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c1c0d37a-0d8c-413e-b380-682f7e3c1ba2",
    "objectives" : {
      "NumberOfConcerns" : 1.0002800336040325,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3009418909209123,
      "MetricsIntensity" : 0.06257494827271028,
      "Density" : 0.9975303951367781
    },
    "euclideanDistance" : 12.152859435645292,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067415730337084,
      "LackOfCohesion" : 1.3009418909209123,
      "MetricsIntensity" : 0.06257494827271028,
      "Density" : 3.083382266588374
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "2b9c4daf-3bf2-44a7-b736-180f7b09a74c",
    "objectives" : {
      "NumberOfConcerns" : 0.999439932791935,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.302838285698548,
      "MetricsIntensity" : 0.06318341009345055,
      "Density" : 0.9994300911854104
    },
    "euclideanDistance" : 12.153152695017823,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005056179775281,
      "LackOfCohesion" : 1.302838285698548,
      "MetricsIntensity" : 0.06318341009345056,
      "Density" : 3.0910693301997645
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "6ebef18a-3b6a-43bf-a94d-eac7c0b86830",
    "objectives" : {
      "NumberOfConcerns" : 0.999439932791935,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.302838285698548,
      "MetricsIntensity" : 0.06318341009345055,
      "Density" : 0.9994300911854104
    },
    "euclideanDistance" : 12.153152695017823,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.005056179775281,
      "LackOfCohesion" : 1.302838285698548,
      "MetricsIntensity" : 0.06318341009345055,
      "Density" : 3.0910693301997645
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.BaseRunOnSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "181fb42d-798f-4401-9cf7-8fd2dbe09c93",
    "objectives" : {
      "NumberOfConcerns" : 0.999439932791935,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3028024063679131,
      "MetricsIntensity" : 0.06320999726497274,
      "Density" : 1.0
    },
    "euclideanDistance" : 12.153195867468417,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0050561797752815,
      "LackOfCohesion" : 1.3028024063679131,
      "MetricsIntensity" : 0.06320999726497274,
      "Density" : 3.09283196239718
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.resource, io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.eager], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOn.UnsubscribeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.parent, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.downstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.delayErrors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.INNER_DISPOSED, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.done, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.upstream, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.mapper, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.errors, io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.inner], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerComplete(SwitchMapInnerObserver), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner(), io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.innerError(SwitchMapInnerObserver, Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.fuseable.CancellableQueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.observers.BiConsumerSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredRequest(AtomicReference<Subscription>, AtomicLong, long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportMoreProduced(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.validate(Subscription, Subscription), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.cancel(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.reportSubscriptionSet(), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.request(long), io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription, long)]"
      } ]
    } ]
  }, {
    "solutionId" : "7fbd1dc1-4d19-433d-9c04-b3eace3a4680",
    "objectives" : {
      "NumberOfConcerns" : 1.0002800336040325,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3022047996988815,
      "MetricsIntensity" : 0.06253744382947145,
      "Density" : 0.9969604863221885
    },
    "euclideanDistance" : 13.1413141895761,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067415730337084,
      "LackOfCohesion" : 1.3022047996988815,
      "MetricsIntensity" : 0.06253744382947145,
      "Density" : 3.0816206694069277
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.deferredSetOnce(AtomicReference<Subscription>, AtomicLong, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutFallbackSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b042b592-52fd-4e64-8a7e-63c6eeb7a787",
    "objectives" : {
      "NumberOfConcerns" : 1.0002800336040325,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3006435547189616,
      "MetricsIntensity" : 0.06263789087334164,
      "Density" : 0.9977203647416414
    },
    "euclideanDistance" : 15.122552801483357,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067415730337084,
      "LackOfCohesion" : 1.3006435547189616,
      "MetricsIntensity" : 0.06263789087334164,
      "Density" : 3.085781433607519
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "ff81c41d-9d0f-4eb9-ab72-32823bf56af4",
    "objectives" : {
      "NumberOfConcerns" : 1.000560067208065,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2994545128371486,
      "MetricsIntensity" : 0.06263789087334161,
      "Density" : 0.998290273556231
    },
    "euclideanDistance" : 16.11490643642321,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0073033707865173,
      "LackOfCohesion" : 1.2994545128371486,
      "MetricsIntensity" : 0.06263789087334161,
      "Density" : 3.0875440658049356
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run(), io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.RunOnConditionalSubscriber(ConditionalSubscriber<? super T>, int, SpscArrayQueue<T>, Worker)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  }, {
    "solutionId" : "55de810b-b3d4-498f-9688-d2199572d411",
    "objectives" : {
      "NumberOfConcerns" : 1.0002800336040325,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.300659332114257,
      "MetricsIntensity" : 0.06263789087334162,
      "Density" : 0.9977203647416414
    },
    "euclideanDistance" : 16.11495095479462,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0067415730337084,
      "LackOfCohesion" : 1.300659332114257,
      "MetricsIntensity" : 0.06263789087334162,
      "Density" : 3.0857814336075196
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onNext(T), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete(), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapCompletable.SwitchMapCompletableObserver.disposeInner()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.remaining, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.serialVersionUID, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.predicate], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryPredicate.RepeatObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeyValueSelector'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.ArraySubscription'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(List<Disposable>), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.add(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelRunOn.RunOnConditionalSubscriber.run()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.poll()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.clear()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable.FlatMapIterableObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletable.SwitchMapCompletableObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.observers.BasicFuseableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(CompletableObserver), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(SingleObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.blockingConsume(MaybeObserver<? super T>), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.dispose(), io.reactivex.rxjava3.internal.observers.BlockingDisposableMultiObserver.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper.setOnce(AtomicReference<Subscription>, Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingle'"
      } ]
    } ]
  } ]
}