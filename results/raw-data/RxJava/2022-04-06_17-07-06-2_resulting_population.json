{
  "executionId" : "2af3890b-0e56-4f30-af17-212c13de1cd5",
  "computingTime" : 4229138,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 54,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.5097460129946842,
    "meanNumConcerns" : 1.9098591549295774,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "bccf43a7-8bd0-4b3d-8b74-949b7d21f35a",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3022171755639342,
      "MetricsIntensity" : 0.06294652735339308,
      "Density" : 0.9981487714574218
    },
    "euclideanDistance" : 10.182980169405301,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.3022171755639342,
      "MetricsIntensity" : 0.0629465273533931,
      "Density" : 3.4991150442477874
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e4a9b82c-1d85-4c34-9855-17c65238f0f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.302217175563934,
      "MetricsIntensity" : 0.06294652735339311,
      "Density" : 0.9981487714574218
    },
    "euclideanDistance" : 10.182980169405301,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.302217175563934,
      "MetricsIntensity" : 0.06294652735339312,
      "Density" : 3.4991150442477874
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "096d3bba-803a-46e7-b69c-434cef2e16ae",
    "objectives" : {
      "NumberOfConcerns" : 0.9991150442477876,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.302217175563934,
      "MetricsIntensity" : 0.06294019590501682,
      "Density" : 0.9984853584651633
    },
    "euclideanDistance" : 10.183070996674129,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.904949381327334,
      "LackOfCohesion" : 1.302217175563934,
      "MetricsIntensity" : 0.06294019590501682,
      "Density" : 3.5002949852507377
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "256e3eae-04ee-4fd4-8072-9196f8e20ad1",
    "objectives" : {
      "NumberOfConcerns" : 0.9991150442477876,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3022171755639342,
      "MetricsIntensity" : 0.0629401959050168,
      "Density" : 0.9984853584651633
    },
    "euclideanDistance" : 10.183070996674129,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.904949381327334,
      "LackOfCohesion" : 1.3022171755639342,
      "MetricsIntensity" : 0.0629401959050168,
      "Density" : 3.5002949852507372
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "aec7ab24-305c-4f7f-b9b0-a4d4a2250c77",
    "objectives" : {
      "NumberOfConcerns" : 0.9991150442477876,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.302217175563934,
      "MetricsIntensity" : 0.06294019590501682,
      "Density" : 0.9984853584651633
    },
    "euclideanDistance" : 10.183070996674129,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.904949381327334,
      "LackOfCohesion" : 1.302217175563934,
      "MetricsIntensity" : 0.06294019590501682,
      "Density" : 3.5002949852507372
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "ab7c4da7-4817-4730-8a81-b9a6960cb4f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.301929967797836,
      "MetricsIntensity" : 0.06294276165374248,
      "Density" : 0.9978121844496802
    },
    "euclideanDistance" : 11.166542209235185,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.301929967797836,
      "MetricsIntensity" : 0.06294276165374248,
      "Density" : 3.4979351032448385
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "246ae549-5fdb-4c19-b97b-a245c654dbfb",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3018761163416925,
      "MetricsIntensity" : 0.06294612736975146,
      "Density" : 0.997980477953551
    },
    "euclideanDistance" : 11.166550989205586,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.3018761163416925,
      "MetricsIntensity" : 0.06294612736975146,
      "Density" : 3.4985250737463125
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "9f1845fc-4c75-409a-bd6b-b85211ebc235",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3018761163416928,
      "MetricsIntensity" : 0.06294612736975144,
      "Density" : 0.997980477953551
    },
    "euclideanDistance" : 11.166550989205586,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.3018761163416928,
      "MetricsIntensity" : 0.06294612736975144,
      "Density" : 3.4985250737463125
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "8da0994d-ef22-492d-9226-d96011dcb045",
    "objectives" : {
      "NumberOfConcerns" : 0.9988200589970502,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.301829445079702,
      "MetricsIntensity" : 0.06295122673342825,
      "Density" : 0.997980477953551
    },
    "euclideanDistance" : 11.166571958558052,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9043869516310459,
      "LackOfCohesion" : 1.301829445079702,
      "MetricsIntensity" : 0.06295122673342823,
      "Density" : 3.498525073746312
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "8ed446d3-3aba-4c90-a2ee-45dd9ee2e2d3",
    "objectives" : {
      "NumberOfConcerns" : 0.9991150442477876,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.302231535952239,
      "MetricsIntensity" : 0.06293931736956837,
      "Density" : 0.9984853584651633
    },
    "euclideanDistance" : 11.166690298096883,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.904949381327334,
      "LackOfCohesion" : 1.302231535952239,
      "MetricsIntensity" : 0.06293931736956837,
      "Density" : 3.5002949852507377
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "26866441-b07a-4636-8a25-1cb769b2dcc0",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.301871329545591,
      "MetricsIntensity" : 0.06294824435634261,
      "Density" : 0.9974755974419387
    },
    "euclideanDistance" : 12.1527636148302,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9026996625421815,
      "LackOfCohesion" : 1.301871329545591,
      "MetricsIntensity" : 0.06294824435634261,
      "Density" : 3.4967551622418873
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "b2432dc8-4377-4633-be71-7370de0eb587",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3018174780894476,
      "MetricsIntensity" : 0.06294550300504255,
      "Density" : 0.9976438909458095
    },
    "euclideanDistance" : 12.152795872774588,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9032620922384698,
      "LackOfCohesion" : 1.3018174780894476,
      "MetricsIntensity" : 0.06294550300504255,
      "Density" : 3.497345132743363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e2932fcf-019c-428e-8117-dbb736329f05",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3018904767299977,
      "MetricsIntensity" : 0.06294547321537028,
      "Density" : 0.9976438909458095
    },
    "euclideanDistance" : 12.152803692511368,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9032620922384695,
      "LackOfCohesion" : 1.3018904767299977,
      "MetricsIntensity" : 0.06294547321537028,
      "Density" : 3.497345132743363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "9c4c0239-f504-4bdf-a977-85326cc9748e",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3018904767299975,
      "MetricsIntensity" : 0.06294547321537029,
      "Density" : 0.9976438909458095
    },
    "euclideanDistance" : 12.152803692511368,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90326209223847,
      "LackOfCohesion" : 1.3018904767299975,
      "MetricsIntensity" : 0.06294547321537029,
      "Density" : 3.497345132743363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "69947bfe-6dee-4d91-93e5-011f63b7e1e6",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3018495496233287,
      "MetricsIntensity" : 0.06294213728903354,
      "Density" : 0.9978121844496802
    },
    "euclideanDistance" : 12.152837341165943,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.3018495496233287,
      "MetricsIntensity" : 0.06294213728903354,
      "Density" : 3.497935103244838
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "be422df8-ca13-4a5e-9971-a6c88b1a66c4",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.302172897699994,
      "MetricsIntensity" : 0.06294502445323576,
      "Density" : 0.9978121844496802
    },
    "euclideanDistance" : 12.152847764891236,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9032620922384698,
      "LackOfCohesion" : 1.302172897699994,
      "MetricsIntensity" : 0.06294502445323576,
      "Density" : 3.497935103244837
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "121e95fc-caf1-47b9-befd-052e13284a38",
    "objectives" : {
      "NumberOfConcerns" : 0.9988200589970502,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3018495496233287,
      "MetricsIntensity" : 0.06294191290796632,
      "Density" : 0.9981487714574218
    },
    "euclideanDistance" : 12.15288922085904,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9043869516310457,
      "LackOfCohesion" : 1.3018495496233287,
      "MetricsIntensity" : 0.06294191290796632,
      "Density" : 3.4991150442477874
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "33c2cc45-fe61-4ebd-8bcf-4ac825a79063",
    "objectives" : {
      "NumberOfConcerns" : 0.9988200589970502,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3021728976999938,
      "MetricsIntensity" : 0.06293869300485949,
      "Density" : 0.9981487714574218
    },
    "euclideanDistance" : 12.152923846334199,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9043869516310457,
      "LackOfCohesion" : 1.3021728976999938,
      "MetricsIntensity" : 0.06293869300485949,
      "Density" : 3.4991150442477874
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ffaaa2a-53b4-462c-9fe0-e75bdddfe9fd",
    "objectives" : {
      "NumberOfConcerns" : 0.9988200589970502,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 1.3021728976999942,
      "MetricsIntensity" : 0.06293869300485948,
      "Density" : 0.9981487714574218
    },
    "euclideanDistance" : 12.152923846334199,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9043869516310457,
      "LackOfCohesion" : 1.3021728976999942,
      "MetricsIntensity" : 0.06293869300485949,
      "Density" : 3.4991150442477874
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "53169a38-e4bf-4bd9-8b21-136fc46414f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3016090131192217,
      "MetricsIntensity" : 0.06294781458302869,
      "Density" : 0.997307303938068
    },
    "euclideanDistance" : 13.141105158211408,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902699662542182,
      "LackOfCohesion" : 1.3016090131192217,
      "MetricsIntensity" : 0.0629478145830287,
      "Density" : 3.4961651917404137
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "9943d277-6d81-4b72-a68b-d6c593fbd58d",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3016090131192215,
      "MetricsIntensity" : 0.0629478145830287,
      "Density" : 0.997307303938068
    },
    "euclideanDistance" : 13.141105158211408,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902699662542182,
      "LackOfCohesion" : 1.3016090131192215,
      "MetricsIntensity" : 0.0629478145830287,
      "Density" : 3.4961651917404137
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c96ee3a2-a852-4064-9334-f4e16573b6eb",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3018914340892178,
      "MetricsIntensity" : 0.06294736582089418,
      "Density" : 0.9974755974419387
    },
    "euclideanDistance" : 13.141145905696318,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9026996625421821,
      "LackOfCohesion" : 1.3018914340892178,
      "MetricsIntensity" : 0.06294736582089418,
      "Density" : 3.496755162241887
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "df19c90b-537d-4800-8a83-0ebcb2c42ecc",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3016090131192217,
      "MetricsIntensity" : 0.06294759020196143,
      "Density" : 0.9976438909458095
    },
    "euclideanDistance" : 13.141153110167494,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90326209223847,
      "LackOfCohesion" : 1.3016090131192217,
      "MetricsIntensity" : 0.06294759020196143,
      "Density" : 3.497345132743363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "b85b9d00-824c-4584-9570-d1fcaab96880",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3018318384777525,
      "MetricsIntensity" : 0.0629446244695941,
      "Density" : 0.9976438909458095
    },
    "euclideanDistance" : 13.141175168307564,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90326209223847,
      "LackOfCohesion" : 1.3018318384777525,
      "MetricsIntensity" : 0.0629446244695941,
      "Density" : 3.497345132743363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c6a98b79-b18c-4e84-8b1d-67f0385295f7",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3018318384777525,
      "MetricsIntensity" : 0.0629446244695941,
      "Density" : 0.9976438909458095
    },
    "euclideanDistance" : 13.141175168307564,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9032620922384698,
      "LackOfCohesion" : 1.3018318384777525,
      "MetricsIntensity" : 0.0629446244695941,
      "Density" : 3.497345132743363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e3f61536-37e6-4642-9a9b-667515dfcf76",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3017909113710835,
      "MetricsIntensity" : 0.0629412885432574,
      "Density" : 0.9978121844496802
    },
    "euclideanDistance" : 13.141206286375242,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.903824521934758,
      "LackOfCohesion" : 1.3017909113710835,
      "MetricsIntensity" : 0.0629412885432574,
      "Density" : 3.4979351032448376
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e9f3a531-b0cb-4227-8bdb-5c2b61e561a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.3018797064387688,
      "MetricsIntensity" : 0.06294125875358514,
      "Density" : 0.9978121844496802
    },
    "euclideanDistance" : 13.141215082724539,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.3018797064387688,
      "MetricsIntensity" : 0.06294125875358514,
      "Density" : 3.497935103244838
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "922912e2-f254-4b03-8883-f134b29a58ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.301891434089218,
      "MetricsIntensity" : 0.06294103437251788,
      "Density" : 0.9978121844496802
    },
    "euclideanDistance" : 13.141216243495085,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.301891434089218,
      "MetricsIntensity" : 0.06294103437251788,
      "Density" : 3.497935103244837
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "55aad816-517e-41fe-bb0f-a69df55fc7ad",
    "objectives" : {
      "NumberOfConcerns" : 0.9988200589970502,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.301879706438769,
      "MetricsIntensity" : 0.06294103437251788,
      "Density" : 0.9981487714574218
    },
    "euclideanDistance" : 13.141263060454342,
    "generation" : 1,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9043869516310459,
      "LackOfCohesion" : 1.301879706438769,
      "MetricsIntensity" : 0.06294103437251788,
      "Density" : 3.4991150442477874
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "a6e7b240-525b-43d8-bbcf-388c450172e5",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3014498521488422,
      "MetricsIntensity" : 0.06294722000799206,
      "Density" : 0.997307303938068
    },
    "euclideanDistance" : 14.131108604739454,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9026996625421815,
      "LackOfCohesion" : 1.3014498521488422,
      "MetricsIntensity" : 0.06294722000799206,
      "Density" : 3.496165191740413
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "417100f5-e32b-47d8-9f70-4dc24974edb3",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3015503748669766,
      "MetricsIntensity" : 0.06294696583725252,
      "Density" : 0.997307303938068
    },
    "euclideanDistance" : 14.131117861924476,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9026996625421817,
      "LackOfCohesion" : 1.3015503748669766,
      "MetricsIntensity" : 0.06294696583725254,
      "Density" : 3.496165191740413
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "523e15dd-374e-419d-a0a8-74c580bc1195",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3015503748669766,
      "MetricsIntensity" : 0.06294696583725252,
      "Density" : 0.997307303938068
    },
    "euclideanDistance" : 14.131117861924476,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902699662542182,
      "LackOfCohesion" : 1.3015503748669766,
      "MetricsIntensity" : 0.06294696583725254,
      "Density" : 3.496165191740413
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "054724c9-1bb5-408e-aa0f-619c8de76aac",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3015503748669766,
      "MetricsIntensity" : 0.06294696583725252,
      "Density" : 0.997307303938068
    },
    "euclideanDistance" : 14.131117861924476,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9026996625421817,
      "LackOfCohesion" : 1.3015503748669766,
      "MetricsIntensity" : 0.06294696583725252,
      "Density" : 3.496165191740413
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c484884c-6f2a-46bc-b945-ef75e293f2c4",
    "objectives" : {
      "NumberOfConcerns" : 0.9982300884955753,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3018519430213793,
      "MetricsIntensity" : 0.06294374593414567,
      "Density" : 0.9974755974419387
    },
    "euclideanDistance" : 14.131178339889805,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9032620922384698,
      "LackOfCohesion" : 1.3018519430213793,
      "MetricsIntensity" : 0.06294374593414567,
      "Density" : 3.496755162241887
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "7adf353e-7da8-427b-8686-dd2113444364",
    "objectives" : {
      "NumberOfConcerns" : 0.9985250737463127,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.3018210681865239,
      "MetricsIntensity" : 0.06294041000780895,
      "Density" : 0.9978121844496802
    },
    "euclideanDistance" : 14.131220084165506,
    "generation" : 1,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9038245219347578,
      "LackOfCohesion" : 1.3018210681865239,
      "MetricsIntensity" : 0.06294041000780895,
      "Density" : 3.4979351032448376
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "0bc6f74a-b5b8-43d3-b710-40c5eab46d79",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.301167909858456,
      "MetricsIntensity" : 0.06299013193677555,
      "Density" : 0.9968024234264558
    },
    "euclideanDistance" : 15.122383913523818,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902699662542182,
      "LackOfCohesion" : 1.301167909858456,
      "MetricsIntensity" : 0.06299013193677555,
      "Density" : 3.494395280235988
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "28cf9779-261e-49f0-b270-15ebd4b2f13c",
    "objectives" : {
      "NumberOfConcerns" : 0.9976401179941002,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3016996032354449,
      "MetricsIntensity" : 0.06295589282402674,
      "Density" : 0.9968024234264558
    },
    "euclideanDistance" : 15.122410065128001,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458936,
      "LackOfCohesion" : 1.3016996032354449,
      "MetricsIntensity" : 0.06295589282402675,
      "Density" : 3.494395280235988
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "f0019156-dedf-4861-9eff-eee3203b09a5",
    "objectives" : {
      "NumberOfConcerns" : 0.9976401179941002,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.301749864594512,
      "MetricsIntensity" : 0.06295563865328721,
      "Density" : 0.9968024234264558
    },
    "euclideanDistance" : 15.122414390526076,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458939,
      "LackOfCohesion" : 1.301749864594512,
      "MetricsIntensity" : 0.06295563865328721,
      "Density" : 3.494395280235988
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c04ff95c-f5de-4683-9e23-c4de6e5ef553",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.30181101591471,
      "MetricsIntensity" : 0.06294549272676744,
      "Density" : 0.9974755974419387
    },
    "euclideanDistance" : 15.122483463174689,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9026996625421815,
      "LackOfCohesion" : 1.30181101591471,
      "MetricsIntensity" : 0.06294549272676744,
      "Density" : 3.4967551622418873
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "1583d1af-a940-4ea4-b807-d17ab36a9cc6",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3013435852753859,
      "MetricsIntensity" : 0.06294808826516538,
      "Density" : 0.9964658364187142
    },
    "euclideanDistance" : 16.114747874717438,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496065,
      "LackOfCohesion" : 1.3013435852753859,
      "MetricsIntensity" : 0.06294808826516538,
      "Density" : 3.493215339233038
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e1d6d7a2-ff3f-4057-b98d-6d38c6e18bbe",
    "objectives" : {
      "NumberOfConcerns" : 0.9976401179941002,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3013134284599457,
      "MetricsIntensity" : 0.06295655334485112,
      "Density" : 0.996634129922585
    },
    "euclideanDistance" : 16.114774139300156,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458939,
      "LackOfCohesion" : 1.3013134284599457,
      "MetricsIntensity" : 0.06295655334485112,
      "Density" : 3.4938053097345136
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "72a451e6-8ffc-409f-a653-97be3e6ea937",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3017197077790719,
      "MetricsIntensity" : 0.06294746390045647,
      "Density" : 0.996634129922585
    },
    "euclideanDistance" : 16.114788657738124,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496058,
      "LackOfCohesion" : 1.3017197077790719,
      "MetricsIntensity" : 0.06294746390045647,
      "Density" : 3.4938053097345136
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "bde11326-2d65-4309-9189-3fed61387586",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3017197077790719,
      "MetricsIntensity" : 0.06294746390045647,
      "Density" : 0.996634129922585
    },
    "euclideanDistance" : 16.114788657738124,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496065,
      "LackOfCohesion" : 1.3017197077790719,
      "MetricsIntensity" : 0.06294746390045647,
      "Density" : 3.4938053097345136
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "c8fe3d74-a4a7-4777-adab-1cd5f8951d4e",
    "objectives" : {
      "NumberOfConcerns" : 0.9976401179941002,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3015086100709898,
      "MetricsIntensity" : 0.06293794233864561,
      "Density" : 0.9969707169303265
    },
    "euclideanDistance" : 16.11481064927921,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458939,
      "LackOfCohesion" : 1.3015086100709898,
      "MetricsIntensity" : 0.06293794233864561,
      "Density" : 3.494985250737462
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "328c689d-a267-45dd-8836-48978397bcaf",
    "objectives" : {
      "NumberOfConcerns" : 0.9976401179941002,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3015086100709898,
      "MetricsIntensity" : 0.06293794233864561,
      "Density" : 0.9969707169303265
    },
    "euclideanDistance" : 16.11481064927921,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458936,
      "LackOfCohesion" : 1.3015086100709898,
      "MetricsIntensity" : 0.06293794233864562,
      "Density" : 3.4949852507374626
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "65cbffc0-0fab-4b57-9203-68298cebf123",
    "objectives" : {
      "NumberOfConcerns" : 0.9979351032448378,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.3011670721691382,
      "MetricsIntensity" : 0.06296326760957417,
      "Density" : 0.997307303938068
    },
    "euclideanDistance" : 16.114822259384116,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9026996625421817,
      "LackOfCohesion" : 1.3011670721691382,
      "MetricsIntensity" : 0.06296326760957417,
      "Density" : 3.496165191740413
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "a1485253-738a-419d-aa4c-57ecd1f6e526",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3013636898190128,
      "MetricsIntensity" : 0.06294746390045645,
      "Density" : 0.9964658364187142
    },
    "euclideanDistance" : 17.10804346830307,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496063,
      "LackOfCohesion" : 1.3013636898190128,
      "MetricsIntensity" : 0.06294746390045647,
      "Density" : 3.493215339233038
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "4319bfea-3756-496a-adfb-53b12332d01d",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3013636898190128,
      "MetricsIntensity" : 0.06294746390045645,
      "Density" : 0.9964658364187142
    },
    "euclideanDistance" : 17.10804346830307,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496063,
      "LackOfCohesion" : 1.3013636898190128,
      "MetricsIntensity" : 0.06294746390045647,
      "Density" : 3.493215339233038
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e50b15cb-3512-4315-bc56-0a6839669659",
    "objectives" : {
      "NumberOfConcerns" : 0.9976401179941002,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.301393846634453,
      "MetricsIntensity" : 0.06294720972971694,
      "Density" : 0.996634129922585
    },
    "euclideanDistance" : 17.108072763734334,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458936,
      "LackOfCohesion" : 1.301393846634453,
      "MetricsIntensity" : 0.06294720972971696,
      "Density" : 3.493805309734514
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "e8ddcf43-b44d-4d2d-b315-54d2aa3755d7",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3018202304972062,
      "MetricsIntensity" : 0.06294658536500804,
      "Density" : 0.996634129922585
    },
    "euclideanDistance" : 17.108088002108076,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496063,
      "LackOfCohesion" : 1.3018202304972062,
      "MetricsIntensity" : 0.06294658536500802,
      "Density" : 3.493805309734513
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "710796a8-3924-4d03-8260-422a03cd9075",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3018202304972062,
      "MetricsIntensity" : 0.06294658536500804,
      "Density" : 0.996634129922585
    },
    "euclideanDistance" : 17.108088002108076,
    "generation" : 1,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496063,
      "LackOfCohesion" : 1.3018202304972062,
      "MetricsIntensity" : 0.06294658536500802,
      "Density" : 3.493805309734513
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "db081e9f-5609-41d7-a867-9d3e5b2d1978",
    "objectives" : {
      "NumberOfConcerns" : 0.9976401179941002,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.30110592084894,
      "MetricsIntensity" : 0.06297154044196722,
      "Density" : 0.996634129922585
    },
    "euclideanDistance" : 18.10208295821593,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9021372328458939,
      "LackOfCohesion" : 1.30110592084894,
      "MetricsIntensity" : 0.06297154044196723,
      "Density" : 3.493805309734513
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounceTimed.DebounceEmitter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "6f24282d-5c4f-4e6f-9a41-cb30a18efb52",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.301464212537147,
      "MetricsIntensity" : 0.06294658536500804,
      "Density" : 0.9964658364187142
    },
    "euclideanDistance" : 18.10208310792105,
    "generation" : 1,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496065,
      "LackOfCohesion" : 1.301464212537147,
      "MetricsIntensity" : 0.06294658536500802,
      "Density" : 3.493215339233038
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  }, {
    "solutionId" : "2318c3e6-6817-4f0f-8888-00c56d72393c",
    "objectives" : {
      "NumberOfConcerns" : 0.9973451327433628,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.30176578069155,
      "MetricsIntensity" : 0.06293852663540712,
      "Density" : 0.9962975429148435
    },
    "euclideanDistance" : 19.0967500249058,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9015748031496065,
      "LackOfCohesion" : 1.30176578069155,
      "MetricsIntensity" : 0.06293852663540712,
      "Density" : 3.4926253687315634
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.run()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.release(ThreadWorker)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.evictExpiredWorkers(ConcurrentLinkedQueue<ThreadWorker>, CompositeDisposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.schedulers.IoScheduler.CachedWorkerPool.get()', targetType='io.reactivex.rxjava3.internal.schedulers.RxThreadFactory'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateAndReport(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcat.CompletableConcatSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybe.MergeWithObserver.OtherObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.CANCELLED, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.first, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.rest, io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.runner], extractedMethods=[io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setRest(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.dispose(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.isDisposed(), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.setFirst(Future<?>), io.reactivex.rxjava3.internal.schedulers.InstantPeriodicTask.InstantPeriodicTask(Runnable, ExecutorService)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.otherError(Throwable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher.TimeoutMainMaybeObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableMerge.CompletableMergeSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableLastMaybe'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate.Emitter.setDisposable(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    } ]
  } ]
}