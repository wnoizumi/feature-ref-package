{
  "executionId" : "0c0fc4ad-2444-4802-8b46-10f6c37630c9",
  "computingTime" : 12018,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1210005817335658,
    "meanNumConcerns" : 2.032676056338029,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.3045137304594558
  },
  "population" : [ {
    "solutionId" : "5faddb2e-8a97-4332-9f92-f0f2e6ddfef5",
    "objectives" : {
      "NumberOfConcerns" : 1.0002771618625277,
      "NumberOfRefactorings" : 2.0,
      "LackOfCohesion" : 1.304775546803414,
      "MetricsIntensity" : 0.06312755817285194,
      "Density" : 0.9994408201304753
    },
    "euclideanDistance" : 2.775943203601948,
    "generation" : 0,
    "numberOfRefactorings" : 2,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0309510410804728,
      "LackOfCohesion" : 1.304775546803414,
      "MetricsIntensity" : 0.06312755817285193,
      "Density" : 3.117441860465116,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    } ]
  }, {
    "solutionId" : "d2156094-cc82-43ca-b3e5-394c86dbf95e",
    "objectives" : {
      "NumberOfConcerns" : 1.0036031042128604,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 1.3008197398003258,
      "MetricsIntensity" : 0.06275094024734933,
      "Density" : 1.001304753028891
    },
    "euclideanDistance" : 10.183609383474018,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0285714285714285,
      "LackOfCohesion" : 1.3008197398003258,
      "MetricsIntensity" : 0.06275094024734933,
      "Density" : 3.106998264893002,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "234e6169-1dce-451a-aab1-359458115fe9",
    "objectives" : {
      "NumberOfConcerns" : 1.0005543237250554,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3023795103958713,
      "MetricsIntensity" : 0.06290942323519366,
      "Density" : 0.9975768872320596
    },
    "euclideanDistance" : 17.108372762635707,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.026951151038742,
      "LackOfCohesion" : 1.3023795103958713,
      "MetricsIntensity" : 0.06290942323519365,
      "Density" : 3.1026086956521746,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "09f674b1-7cfb-494c-94e0-809df2505557",
    "objectives" : {
      "NumberOfConcerns" : 1.0002771618625277,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.30265052985581,
      "MetricsIntensity" : 0.06297274137461524,
      "Density" : 0.998695246971109
    },
    "euclideanDistance" : 18.102453164307768,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.025252525252525,
      "LackOfCohesion" : 1.30265052985581,
      "MetricsIntensity" : 0.06297274137461524,
      "Density" : 3.10608695652174,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "7f826bba-8f31-4302-8daa-f83a900091d1",
    "objectives" : {
      "NumberOfConcerns" : 1.0013858093126387,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.3002145207185372,
      "MetricsIntensity" : 0.06281641172976431,
      "Density" : 0.9975768872320596
    },
    "euclideanDistance" : 21.08773190474742,
    "generation" : 0,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.027497194163861,
      "LackOfCohesion" : 1.3002145207185372,
      "MetricsIntensity" : 0.06281641172976431,
      "Density" : 3.1026086956521746,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "9050df78-a9db-4041-94e2-d52610ab4718",
    "objectives" : {
      "NumberOfConcerns" : 1.000831485587583,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.303219199914335,
      "MetricsIntensity" : 0.0628380819525116,
      "Density" : 0.9990680335507922
    },
    "euclideanDistance" : 22.083979023395564,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0275126333520492,
      "LackOfCohesion" : 1.303219199914335,
      "MetricsIntensity" : 0.0628380819525116,
      "Density" : 3.1072463768115934,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "08d5e71a-a308-41d0-bead-6ae5c0e507ac",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3015066287347508,
      "MetricsIntensity" : 0.06279375887362879,
      "Density" : 0.9970177073625349
    },
    "euclideanDistance" : 23.080119299292807,
    "generation" : 0,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0258281864121286,
      "LackOfCohesion" : 1.3015066287347508,
      "MetricsIntensity" : 0.06279375887362879,
      "Density" : 3.100869565217392,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "5aaad000-3ba3-46c8-96b3-a885fe6c4f3f",
    "objectives" : {
      "NumberOfConcerns" : 0.9972283813747228,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3032945294414102,
      "MetricsIntensity" : 0.06302021080043421,
      "Density" : 0.9942218080149114
    },
    "euclideanDistance" : 25.073601449045825,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0224845418774584,
      "LackOfCohesion" : 1.3032945294414102,
      "MetricsIntensity" : 0.0630202108004342,
      "Density" : 3.0993608367228354,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "8a5e99c7-1970-45a8-9c57-b41b72279bfb",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3015617145377238,
      "MetricsIntensity" : 0.06301355098735122,
      "Density" : 0.9973904939422181
    },
    "euclideanDistance" : 25.073747653706747,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269662921348313,
      "LackOfCohesion" : 1.3015617145377238,
      "MetricsIntensity" : 0.06301355098735122,
      "Density" : 3.103828306264501,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "b7228853-a172-461d-8fe0-c2c842eeb9ed",
    "objectives" : {
      "NumberOfConcerns" : 0.9994456762749445,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3020989813775345,
      "MetricsIntensity" : 0.06305169472956641,
      "Density" : 0.9988816402609506
    },
    "euclideanDistance" : 26.07098182778293,
    "generation" : 0,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269814502529515,
      "LackOfCohesion" : 1.3020989813775345,
      "MetricsIntensity" : 0.06305169472956641,
      "Density" : 3.1102727800348227,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "6efcb450-0bc7-43c2-b42c-48dd1774c86f",
    "objectives" : {
      "NumberOfConcerns" : 0.9975055432372506,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3036211696123705,
      "MetricsIntensity" : 0.06305473130607163,
      "Density" : 0.9949673811742777
    },
    "euclideanDistance" : 27.068217182729107,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0241844769403823,
      "LackOfCohesion" : 1.3036211696123705,
      "MetricsIntensity" : 0.06305473130607164,
      "Density" : 3.103488372093023,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "2b9f9b80-143c-4b81-8fd4-43fcca1b2c46",
    "objectives" : {
      "NumberOfConcerns" : 0.9988913525498891,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3024313810259627,
      "MetricsIntensity" : 0.06292993029574626,
      "Density" : 0.9975768872320596
    },
    "euclideanDistance" : 27.068306767482646,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0258572231590777,
      "LackOfCohesion" : 1.3024313810259627,
      "MetricsIntensity" : 0.06292993029574626,
      "Density" : 3.106210098665119,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "bae9e8fa-993e-488a-ad0e-a91291d7149e",
    "objectives" : {
      "NumberOfConcerns" : 0.9988913525498891,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3042721015402796,
      "MetricsIntensity" : 0.06306298630276345,
      "Density" : 0.9955265610438024
    },
    "euclideanDistance" : 27.06832022352034,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.024719101123596,
      "LackOfCohesion" : 1.3042721015402796,
      "MetricsIntensity" : 0.06306298630276347,
      "Density" : 3.099825885084154,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "e86dac52-94e4-4b39-9efe-ec82ba26ac69",
    "objectives" : {
      "NumberOfConcerns" : 0.9988913525498891,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3012611386034596,
      "MetricsIntensity" : 0.06294689784088804,
      "Density" : 0.9970177073625349
    },
    "euclideanDistance" : 28.06579895719665,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0258572231590777,
      "LackOfCohesion" : 1.3012611386034596,
      "MetricsIntensity" : 0.06294689784088803,
      "Density" : 3.106271777003484,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "f875eb77-3d7a-4cf6-8276-a1a68c9517c6",
    "objectives" : {
      "NumberOfConcerns" : 0.9983370288248337,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.302928103622905,
      "MetricsIntensity" : 0.06312265955928005,
      "Density" : 0.9951537744641193
    },
    "euclideanDistance" : 29.06352721146064,
    "generation" : 0,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.024732996065205,
      "LackOfCohesion" : 1.302928103622905,
      "MetricsIntensity" : 0.06312265955928005,
      "Density" : 3.100464576074332,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "20d158de-53fe-4e9e-9630-9464d556c505",
    "objectives" : {
      "NumberOfConcerns" : 0.9972283813747228,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3029025518476127,
      "MetricsIntensity" : 0.0629776233096745,
      "Density" : 0.9960857409133271
    },
    "euclideanDistance" : 30.06140669510525,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023622047244093,
      "LackOfCohesion" : 1.3029025518476127,
      "MetricsIntensity" : 0.0629776233096745,
      "Density" : 3.1033681765389085,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "30ed5f21-ab83-4abc-a23e-ad8e527f9dab",
    "objectives" : {
      "NumberOfConcerns" : 0.9972283813747228,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3042214121494868,
      "MetricsIntensity" : 0.06298523544254489,
      "Density" : 0.9953401677539608
    },
    "euclideanDistance" : 30.06143920583239,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0224845418774593,
      "LackOfCohesion" : 1.3042214121494868,
      "MetricsIntensity" : 0.06298523544254489,
      "Density" : 3.1010452961672472,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "1d36384f-a00c-47b5-9602-3c615592bd8c",
    "objectives" : {
      "NumberOfConcerns" : 0.9997228381374723,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3014547787092545,
      "MetricsIntensity" : 0.06307663476428514,
      "Density" : 0.9979496738117428
    },
    "euclideanDistance" : 30.061488860457874,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0275435637998873,
      "LackOfCohesion" : 1.3014547787092545,
      "MetricsIntensity" : 0.06307663476428516,
      "Density" : 3.1091753774680604,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "cb2e72c4-ab7f-4df0-918d-6fe9507a55be",
    "objectives" : {
      "NumberOfConcerns" : 0.9952882483370288,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3045197822355097,
      "MetricsIntensity" : 0.06303369906509336,
      "Density" : 0.9940354147250698
    },
    "euclideanDistance" : 31.059369765216857,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.019685039370079,
      "LackOfCohesion" : 1.3045197822355097,
      "MetricsIntensity" : 0.06303369906509336,
      "Density" : 3.098779779198141,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "3232f510-84d8-420a-aa8c-7ac2939374c1",
    "objectives" : {
      "NumberOfConcerns" : 1.0002771618625277,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3009244898708217,
      "MetricsIntensity" : 0.06278681382894001,
      "Density" : 0.9968313140726934
    },
    "euclideanDistance" : 31.05946834351155,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0275280898876407,
      "LackOfCohesion" : 1.3009244898708217,
      "MetricsIntensity" : 0.06278681382894001,
      "Density" : 3.1020881670533647,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError], extractedMethods=[io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError(), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable), io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()]"
      } ]
    } ]
  }, {
    "solutionId" : "ee784bc9-70bc-405a-af27-e07f1034ce13",
    "objectives" : {
      "NumberOfConcerns" : 1.0005543237250554,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.3009029104903655,
      "MetricsIntensity" : 0.06297507552471096,
      "Density" : 0.9994408201304753
    },
    "euclideanDistance" : 31.05956060781169,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02808988764045,
      "LackOfCohesion" : 1.3009029104903655,
      "MetricsIntensity" : 0.06297507552471097,
      "Density" : 3.1102088167053363,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "0e201785-9384-49d0-8d2f-bb4f7a6e6986",
    "objectives" : {
      "NumberOfConcerns" : 0.998059866962306,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.301134919467295,
      "MetricsIntensity" : 0.0631149807989015,
      "Density" : 0.9955265610438024
    },
    "euclideanDistance" : 32.0575128824936,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.024170882518269,
      "LackOfCohesion" : 1.301134919467295,
      "MetricsIntensity" : 0.0631149807989015,
      "Density" : 3.0998258850841562,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "ef283927-d8f4-49af-8eaf-05fb55268d01",
    "objectives" : {
      "NumberOfConcerns" : 0.998059866962306,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.3017000003219399,
      "MetricsIntensity" : 0.06307789133449274,
      "Density" : 0.9955265610438024
    },
    "euclideanDistance" : 32.05753574969538,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0253093363329584,
      "LackOfCohesion" : 1.3017000003219399,
      "MetricsIntensity" : 0.06307789133449274,
      "Density" : 3.1016260162601625,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "6ec66113-882b-4b85-a0c9-d07da5a85ee9",
    "objectives" : {
      "NumberOfConcerns" : 0.9977827050997783,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.303296440338163,
      "MetricsIntensity" : 0.06306993693601633,
      "Density" : 0.9962721342031687
    },
    "euclideanDistance" : 33.055872215392064,
    "generation" : 0,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0247469066366697,
      "LackOfCohesion" : 1.303296440338163,
      "MetricsIntensity" : 0.06306993693601633,
      "Density" : 3.10575246949448,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.util.AtomicThrowable.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "e5174c0a-8896-44de-9526-ecbce4d31dc4",
    "objectives" : {
      "NumberOfConcerns" : 0.9991685144124168,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.3017227480366267,
      "MetricsIntensity" : 0.06305157436824675,
      "Density" : 0.9966449207828518
    },
    "euclideanDistance" : 34.05422288692111,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.02755905511811,
      "LackOfCohesion" : 1.3017227480366267,
      "MetricsIntensity" : 0.06305157436824675,
      "Density" : 3.1069145845438704,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "fee205c5-af50-4932-92b1-93d285d29f87",
    "objectives" : {
      "NumberOfConcerns" : 0.9972283813747228,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.303833714684243,
      "MetricsIntensity" : 0.06305214604594882,
      "Density" : 0.9940354147250698
    },
    "euclideanDistance" : 35.052625133918504,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.023622047244094,
      "LackOfCohesion" : 1.303833714684243,
      "MetricsIntensity" : 0.06305214604594882,
      "Density" : 3.0987797791981406,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "9000f3c4-0458-4a81-b920-06321f5314a8",
    "objectives" : {
      "NumberOfConcerns" : 0.9977827050997783,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.3026965133585613,
      "MetricsIntensity" : 0.06310111730246702,
      "Density" : 0.9951537744641193
    },
    "euclideanDistance" : 35.05263044791857,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0247469066366706,
      "LackOfCohesion" : 1.3026965133585613,
      "MetricsIntensity" : 0.06310111730246702,
      "Density" : 3.1022661243463103,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.schedulers.ExecutorScheduler.DelayedRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.util.NotificationLite.DisposableNotification'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "3bb6499b-3a09-41da-98af-8b63677c4d36",
    "objectives" : {
      "NumberOfConcerns" : 0.9975055432372506,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3033105396284985,
      "MetricsIntensity" : 0.06310742865663817,
      "Density" : 0.994408201304753
    },
    "euclideanDistance" : 36.05116455663908,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0241844769403823,
      "LackOfCohesion" : 1.3033105396284985,
      "MetricsIntensity" : 0.06310742865663818,
      "Density" : 3.101744186046512,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.xmapz.ObservableConcatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.functions.Functions.OnErrorMissingConsumer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.util.EndConsumerHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminate.DoOnTerminate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "19f7f1a0-4280-429e-b626-702b9fd6edd4",
    "objectives" : {
      "NumberOfConcerns" : 0.9977827050997783,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3024053300401457,
      "MetricsIntensity" : 0.0629247584981951,
      "Density" : 0.9968313140726934
    },
    "euclideanDistance" : 36.05120611247647,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0281690140845066,
      "LackOfCohesion" : 1.3024053300401457,
      "MetricsIntensity" : 0.0629247584981951,
      "Density" : 3.111111111111111,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "12536426-67b3-4e3d-9726-96be9d64d594",
    "objectives" : {
      "NumberOfConcerns" : 0.9963968957871396,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.3024964731981483,
      "MetricsIntensity" : 0.06319627869351997,
      "Density" : 0.9947809878844361
    },
    "euclideanDistance" : 37.04973531376607,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0230725942599883,
      "LackOfCohesion" : 1.3024964731981483,
      "MetricsIntensity" : 0.06319627869351997,
      "Density" : 3.1011040092969204,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.SubscriptionLambdaSubscriber(Subscriber<? super T>, Consumer<? super Subscription>, LongConsumer, Action)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.disposables.DisposableHelper'"
      } ]
    } ]
  }, {
    "solutionId" : "f1d9798d-ece0-48ee-8ec6-b628998ce470",
    "objectives" : {
      "NumberOfConcerns" : 0.9994456762749445,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.301455137502561,
      "MetricsIntensity" : 0.0630116459524278,
      "Density" : 0.9970177073625349
    },
    "euclideanDistance" : 37.049840646230535,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0269814502529515,
      "LackOfCohesion" : 1.301455137502561,
      "MetricsIntensity" : 0.06301164595242781,
      "Density" : 3.106271777003484,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.disposed], extractedMethods=[io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose(), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable), io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T), io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "b58a6578-64cc-4e9c-a7b9-79d7838353d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9986141906873615,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.3029834704598944,
      "MetricsIntensity" : 0.06311781905843035,
      "Density" : 0.9962721342031687
    },
    "euclideanDistance" : 38.04854186760126,
    "generation" : 0,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.026434195725534,
      "LackOfCohesion" : 1.3029834704598944,
      "MetricsIntensity" : 0.06311781905843035,
      "Density" : 3.103948896631824,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.ElementAtSubscriber(SingleObserver<? super T>, long, T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable), io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate(), io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated(), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>), io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable), io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.ParallelFilterConditionalSubscriber(ConditionalSubscriber<? super T>, Predicate<? super T>, BiFunction<? super Long,? super Throwable,ParallelFailureHandling>)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.BaseFilterSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  }, {
    "solutionId" : "20fd27b6-c9ec-4549-9f9c-d5cb4daa3702",
    "objectives" : {
      "NumberOfConcerns" : 0.9930709534368071,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.3005365612708064,
      "MetricsIntensity" : 0.06320817446626645,
      "Density" : 0.9917986952469711
    },
    "euclideanDistance" : 39.046962048166755,
    "generation" : 0,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.018591549295775,
      "LackOfCohesion" : 1.3005365612708064,
      "MetricsIntensity" : 0.06320817446626643,
      "Density" : 3.0936046511627904,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDematerialize.DematerializeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArray.BaseArraySubscription'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableZipIterable.ZipIterableSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceMaybe.ReduceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletable.FlatMapCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableHide'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableLastMaybe'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver.RemoveFromBufferEmit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableFromFuture'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterable.MergeCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan.ScanObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.internal.functions.Functions.EmptyRunnable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableToList'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDelayWithObservable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterialize.MaterializeSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.InnerCompletableCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver.RemoveFromBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTimed.BufferSkipBoundedObserver.RemoveFromBufferEmit'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelector.FlatMapBiMainObserver.InnerObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter.FilterMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Observer<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeFilter.FilterMaybeObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElements'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnEach.DoOnEachConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.schedulers.ComputationScheduler.PoolWorker'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimed.SkipLastTimedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycle'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableCollectSingle.CollectSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableScan'"
      } ]
    } ]
  }, {
    "solutionId" : "6306a08d-adfa-4d08-9b30-0d46a960d6f0",
    "objectives" : {
      "NumberOfConcerns" : 0.9975055432372506,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.302745319101792,
      "MetricsIntensity" : 0.06314795256036403,
      "Density" : 0.9973904939422181
    },
    "euclideanDistance" : 40.04611014988284,
    "generation" : 0,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 2.0253235790658417,
      "LackOfCohesion" : 1.302745319101792,
      "MetricsIntensity" : 0.06314795256036403,
      "Density" : 3.1092388146426484,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtSingle.ElementAtSubscriber.onComplete()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.subscribeActual(CompletableObserver)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableNever'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.SimpleGenerator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.clear()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableTimeout.TimeOutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.TimeoutObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.addAll(Disposable...)', targetType='io.reactivex.rxjava3.processors.ReplayProcessor.TimedNode'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.disposables.ListCompositeDisposable.remove(Disposable)', targetType='io.reactivex.rxjava3.exceptions.CompositeException.WrappedPrintStream'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.TakeUntilPredicateObserver(Observer<? super T>, Predicate<? super T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicate.TakeUntilPredicateObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingle.ConcatWithObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDebounce.DebounceSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeJust'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle.SubscriptionLambdaSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisher'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.AtomicThrowable",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.terminate()', targetType='io.reactivex.rxjava3.internal.operators.parallel.ParallelMap.ParallelMapConditionalSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryTerminateConsumer(Emitter<?>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableCreate.SerializedEmitter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.isTerminated()', targetType='io.reactivex.rxjava3.internal.functions.Functions.CastToClass'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowableOrReport(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.AtomicThrowable.tryAddThrowable(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleZipArray.ZipSingleObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.util.HalfSerializer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Subscriber<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onError(Subscriber<?>, Throwable, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Observer<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.<T>onNext(Subscriber<? super T>, T, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.util.HalfSerializer.onComplete(Observer<?>, AtomicInteger, AtomicThrowable)', targetType='io.reactivex.rxjava3.internal.util.AtomicThrowable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapCompletablePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.jdk8.ParallelMapOptional.ParallelMapSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.parallel.ParallelFilterTry.ParallelFilterConditionalSubscriber.tryOnNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableHide.HideCompletableObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.GroupedUnicast'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableSingle.SingleElementSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableCompletable.FlatMapCompletableMainSubscriber.InnerObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.observers.AbstractDisposableAutoRelease.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableGroupBy.State'"
      } ]
    } ]
  } ]
}