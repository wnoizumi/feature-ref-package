{
  "executionId" : "10f576e6-362e-4cc0-b9f0-9bb27262501f",
  "computingTime" : 883707,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.388727484020918,
    "meanNumConcerns" : 1.9047887323943664,
    "meanMetricsIntensity" : 0.0626901885889211,
    "meanLackOfCohesion" : 1.304513730459456
  },
  "population" : [ {
    "solutionId" : "bb6feb83-da2e-4c87-b88e-1e60f8461f46",
    "objectives" : {
      "NumberOfConcerns" : 1.0035492457852706,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.300025508493162,
      "MetricsIntensity" : 0.06239708261318352,
      "Density" : 1.000514403292181
    },
    "euclideanDistance" : 11.167009442037866,
    "generation" : 14,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9019058295964129,
      "LackOfCohesion" : 1.300025508493162,
      "MetricsIntensity" : 0.062397082613183524,
      "Density" : 3.3728323699421976
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete(), io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "031e930f-02cb-45f7-bac9-8e1b82dbff93",
    "objectives" : {
      "NumberOfConcerns" : 1.0044365572315883,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.3008124819363855,
      "MetricsIntensity" : 0.06236551035844555,
      "Density" : 1.0006858710562414
    },
    "euclideanDistance" : 11.167196048251261,
    "generation" : 40,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.903587443946188,
      "LackOfCohesion" : 1.3008124819363855,
      "MetricsIntensity" : 0.06236551035844555,
      "Density" : 3.373410404624276
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "15201e59-f355-42c9-a166-a7a5d4ae0b4d",
    "objectives" : {
      "NumberOfConcerns" : 1.0044365572315883,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 1.2996606389876675,
      "MetricsIntensity" : 0.06238697327053346,
      "Density" : 1.0025720164609053
    },
    "euclideanDistance" : 11.167231230554036,
    "generation" : 41,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9035874439461882,
      "LackOfCohesion" : 1.2996606389876675,
      "MetricsIntensity" : 0.062386973270533476,
      "Density" : 3.3797687861271672
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "99c3adc1-53a9-4dbf-be7c-6a552c5fd280",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.300191603492972,
      "MetricsIntensity" : 0.062425948438278575,
      "Density" : 1.0
    },
    "euclideanDistance" : 13.141526781900359,
    "generation" : 34,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901289960740324,
      "LackOfCohesion" : 1.300191603492972,
      "MetricsIntensity" : 0.06242594843827858,
      "Density" : 3.373048004626952
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "a820c515-8ebb-4a9e-a185-45c28198d2ce",
    "objectives" : {
      "NumberOfConcerns" : 1.0035492457852706,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2990345124381055,
      "MetricsIntensity" : 0.062458384137903035,
      "Density" : 1.0008573388203017
    },
    "euclideanDistance" : 13.141545503312807,
    "generation" : 39,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9029725182277062,
      "LackOfCohesion" : 1.2990345124381055,
      "MetricsIntensity" : 0.062458384137903035,
      "Density" : 3.37593984962406
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "f38888ba-1120-406d-aee0-6b5babfd7f00",
    "objectives" : {
      "NumberOfConcerns" : 1.0041407867494825,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2989342919530384,
      "MetricsIntensity" : 0.06242305797313559,
      "Density" : 1.000514403292181
    },
    "euclideanDistance" : 13.14155450180028,
    "generation" : 36,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040942232192934,
      "LackOfCohesion" : 1.2989342919530384,
      "MetricsIntensity" : 0.06242305797313559,
      "Density" : 3.374783111625217
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "1afbccac-322a-4420-ad72-09e2a798c4c0",
    "objectives" : {
      "NumberOfConcerns" : 1.0041407867494825,
      "NumberOfRefactorings" : 13.0,
      "LackOfCohesion" : 1.2988197542558189,
      "MetricsIntensity" : 0.06244826871627359,
      "Density" : 1.0008573388203017
    },
    "euclideanDistance" : 13.141569414365817,
    "generation" : 45,
    "numberOfRefactorings" : 13,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9040942232192937,
      "LackOfCohesion" : 1.2988197542558189,
      "MetricsIntensity" : 0.0624482687162736,
      "Density" : 3.37593984962406
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "a038c82d-81df-42c6-8844-25624ec202c5",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 1.300256030947658,
      "MetricsIntensity" : 0.06244182186914331,
      "Density" : 0.9996570644718793
    },
    "euclideanDistance" : 14.13145512843461,
    "generation" : 41,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001682557487378,
      "LackOfCohesion" : 1.300256030947658,
      "MetricsIntensity" : 0.06244182186914331,
      "Density" : 3.3718912666281087
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "1f9cb5e4-b2b0-46f2-8ebd-4634f71d49fd",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.2998573084028413,
      "MetricsIntensity" : 0.06244811404910174,
      "Density" : 1.0001714677640603
    },
    "euclideanDistance" : 15.122843293831808,
    "generation" : 42,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90347923681257,
      "LackOfCohesion" : 1.2998573084028413,
      "MetricsIntensity" : 0.06244811404910175,
      "Density" : 3.3755787037037037
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "6855baf2-eaaf-4236-9ac3-d4fe01fc8358",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 1.3021683247030271,
      "MetricsIntensity" : 0.06239416951810851,
      "Density" : 0.9994855967078189
    },
    "euclideanDistance" : 15.122937702798396,
    "generation" : 33,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901795735129069,
      "LackOfCohesion" : 1.3021683247030271,
      "MetricsIntensity" : 0.062394169518108514,
      "Density" : 3.373263888888889
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "51f3752c-9a0e-466d-97a3-dedf63e43533",
    "objectives" : {
      "NumberOfConcerns" : 1.0008873114463177,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.300687392378232,
      "MetricsIntensity" : 0.06244550606923378,
      "Density" : 0.9987997256515775
    },
    "euclideanDistance" : 16.115057041043816,
    "generation" : 40,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8989898989898986,
      "LackOfCohesion" : 1.300687392378232,
      "MetricsIntensity" : 0.06244550606923379,
      "Density" : 3.3709490740740735
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "1261d71f-49c6-4142-a390-f381053762a4",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.300108987129249,
      "MetricsIntensity" : 0.062440367457518506,
      "Density" : 0.9991426611796982
    },
    "euclideanDistance" : 16.115068356265734,
    "generation" : 38,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9001122334455673,
      "LackOfCohesion" : 1.300108987129249,
      "MetricsIntensity" : 0.062440367457518506,
      "Density" : 3.372106481481482
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "0ea6ddb1-6ce9-4d63-b8f3-25b625d8283f",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.299169354545287,
      "MetricsIntensity" : 0.06239653590461761,
      "Density" : 0.9998285322359396
    },
    "euclideanDistance" : 16.115126918240993,
    "generation" : 41,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9018508132361187,
      "LackOfCohesion" : 1.299169354545287,
      "MetricsIntensity" : 0.06239653590461761,
      "Density" : 3.3724696356275303
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "19c64770-648c-4e12-a1d3-24d032819140",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2983037701841404,
      "MetricsIntensity" : 0.0624852799137296,
      "Density" : 1.0049725651577504
    },
    "euclideanDistance" : 16.11543272032386,
    "generation" : 19,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046015712682383,
      "LackOfCohesion" : 1.2983037701841404,
      "MetricsIntensity" : 0.0624852799137296,
      "Density" : 3.391782407407407
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "f3495b1b-049e-45c8-b866-f1e358a6f2d5",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.2981891635713387,
      "MetricsIntensity" : 0.06251050582578647,
      "Density" : 1.0053155006858712
    },
    "euclideanDistance" : 16.115444974941173,
    "generation" : 28,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9046015712682383,
      "LackOfCohesion" : 1.2981891635713387,
      "MetricsIntensity" : 0.06251050582578647,
      "Density" : 3.392939814814814
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "910960ff-538b-41fb-8c9c-1d915b2ac04f",
    "objectives" : {
      "NumberOfConcerns" : 1.0038450162673764,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 1.298189163571339,
      "MetricsIntensity" : 0.06251050582578646,
      "Density" : 1.0053155006858712
    },
    "euclideanDistance" : 16.115444974941177,
    "generation" : 39,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.904601571268238,
      "LackOfCohesion" : 1.298189163571339,
      "MetricsIntensity" : 0.06251050582578646,
      "Density" : 3.3929398148148144
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "0d455f48-e923-40e4-8eac-7e829b232e31",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 1.3006783887061553,
      "MetricsIntensity" : 0.06237480667984283,
      "Density" : 0.9998285322359396
    },
    "euclideanDistance" : 17.108530898850915,
    "generation" : 42,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9024116657319126,
      "LackOfCohesion" : 1.3006783887061553,
      "MetricsIntensity" : 0.062374806679842826,
      "Density" : 3.3724696356275303
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "8f951666-3256-41f1-9e9d-e48d6fa9f213",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2994294175824006,
      "MetricsIntensity" : 0.06235456753561001,
      "Density" : 0.9989711934156379
    },
    "euclideanDistance" : 18.10236667685244,
    "generation" : 46,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9012899607403255,
      "LackOfCohesion" : 1.2994294175824006,
      "MetricsIntensity" : 0.06235456753561001,
      "Density" : 3.3695777906304216
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "145acbb4-2ef3-41fc-83a0-44959e84f375",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3025509265441084,
      "MetricsIntensity" : 0.06243896089051426,
      "Density" : 0.9986282578875172
    },
    "euclideanDistance" : 18.102457826753213,
    "generation" : 20,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8994946659180236,
      "LackOfCohesion" : 1.3025509265441084,
      "MetricsIntensity" : 0.062438960890514254,
      "Density" : 3.3723219455703535
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "d9a2cd3d-f36a-4cca-8a12-32c0bcbc4b1f",
    "objectives" : {
      "NumberOfConcerns" : 1.0032534753031648,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.3003671949783862,
      "MetricsIntensity" : 0.06232297629575186,
      "Density" : 0.9991426611796982
    },
    "euclideanDistance" : 18.102476145219676,
    "generation" : 40,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9024116657319123,
      "LackOfCohesion" : 1.3003671949783862,
      "MetricsIntensity" : 0.06232297629575186,
      "Density" : 3.370156159629844
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "365cd646-4950-4bff-9348-1c4d6616d3bc",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 1.2986195403505312,
      "MetricsIntensity" : 0.06251423359490574,
      "Density" : 1.0044581618655692
    },
    "euclideanDistance" : 18.102612736660223,
    "generation" : 39,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034250421111736,
      "LackOfCohesion" : 1.2986195403505312,
      "MetricsIntensity" : 0.06251423359490574,
      "Density" : 3.39200926462073
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "fb1dbf87-f698-4dc1-aabf-d54e68809c8c",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.3006050247637697,
      "MetricsIntensity" : 0.06245994554401265,
      "Density" : 0.9979423868312757
    },
    "euclideanDistance" : 19.09687859911113,
    "generation" : 32,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8978102189781025,
      "LackOfCohesion" : 1.3006050247637697,
      "MetricsIntensity" : 0.06245994554401265,
      "Density" : 3.3700057903879563
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9c385925-76ba-4237-b5b8-b1a6bbad76bd",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2994787929782965,
      "MetricsIntensity" : 0.06250263727976514,
      "Density" : 1.001543209876543
    },
    "euclideanDistance" : 19.097068049254492,
    "generation" : 37,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900617630544638,
      "LackOfCohesion" : 1.2994787929782965,
      "MetricsIntensity" : 0.06250263727976514,
      "Density" : 3.3821656050955418
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "ffa0309a-0f86-4aaa-8a22-90ec8489c1ee",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2987538616089613,
      "MetricsIntensity" : 0.062468863395212355,
      "Density" : 1.0022290809327847
    },
    "euclideanDistance" : 19.097101145354067,
    "generation" : 42,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9012345679012348,
      "LackOfCohesion" : 1.2987538616089613,
      "MetricsIntensity" : 0.062468863395212355,
      "Density" : 3.382523148148149
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "327e8e6b-fbed-4f6e-9521-64195bd8b60c",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 1.2987538616089611,
      "MetricsIntensity" : 0.06246886339521237,
      "Density" : 1.0022290809327847
    },
    "euclideanDistance" : 19.097101145354067,
    "generation" : 38,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9012345679012348,
      "LackOfCohesion" : 1.2987538616089611,
      "MetricsIntensity" : 0.062468863395212376,
      "Density" : 3.3825231481481484
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "a75816ef-758b-42e9-a2c2-73bc9a8916ad",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 1.3022889644443982,
      "MetricsIntensity" : 0.062441337812416356,
      "Density" : 0.9981138545953361
    },
    "euclideanDistance" : 20.092160262209457,
    "generation" : 27,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8972487366647954,
      "LackOfCohesion" : 1.3022889644443982,
      "MetricsIntensity" : 0.06244133781241636,
      "Density" : 3.370584829183555
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "ad42004c-a9fa-4c52-bd93-4dcc4aab0e60",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 1.2984696997112224,
      "MetricsIntensity" : 0.062431852670687286,
      "Density" : 1.0037722908093278
    },
    "euclideanDistance" : 21.08799194486646,
    "generation" : 45,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9029180695847365,
      "LackOfCohesion" : 1.2984696997112224,
      "MetricsIntensity" : 0.062431852670687286,
      "Density" : 3.387731481481482
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "fb0bb063-bc3f-4084-8687-336e05ce93f9",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.3013809916461576,
      "MetricsIntensity" : 0.062447413756084015,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 22.08375206745129,
    "generation" : 38,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898876404494382,
      "LackOfCohesion" : 1.3013809916461576,
      "MetricsIntensity" : 0.062447413756084,
      "Density" : 3.3707995365005794
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "94f8fcc5-5f9d-44e8-9351-f37bebce70af",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.302999967549772,
      "MetricsIntensity" : 0.06245630023367133,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 22.083828533029294,
    "generation" : 28,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8977528089887639,
      "LackOfCohesion" : 1.302999967549772,
      "MetricsIntensity" : 0.06245630023367134,
      "Density" : 3.371378910776361
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "a08f0c71-30ed-4c26-9e2a-3cc11fb1ff27",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2977558896524433,
      "MetricsIntensity" : 0.06247278833318982,
      "Density" : 1.0041152263374487
    },
    "euclideanDistance" : 22.08398163248268,
    "generation" : 27,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9039865244244805,
      "LackOfCohesion" : 1.2977558896524433,
      "MetricsIntensity" : 0.06247278833318982,
      "Density" : 3.3908511870295306
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "68774b7a-10ae-427a-b754-c64cf8b48cef",
    "objectives" : {
      "NumberOfConcerns" : 1.002957704821059,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 1.2976412140410787,
      "MetricsIntensity" : 0.06249802943243034,
      "Density" : 1.0044581618655692
    },
    "euclideanDistance" : 22.08399056059976,
    "generation" : 41,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9039865244244807,
      "LackOfCohesion" : 1.2976412140410787,
      "MetricsIntensity" : 0.062498029432430345,
      "Density" : 3.392009264620729
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "faf8e0eb-4532-45d7-b2c9-ed81b447f247",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.3010528935394448,
      "MetricsIntensity" : 0.06247729810462431,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 23.080018945855176,
    "generation" : 20,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896067415730337,
      "LackOfCohesion" : 1.3010528935394448,
      "MetricsIntensity" : 0.0624772981046243,
      "Density" : 3.3690614136732324
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "774c5ea2-f397-4b6f-aecd-3e399cd1ab28",
    "objectives" : {
      "NumberOfConcerns" : 1.002661934338953,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 1.2978564366965393,
      "MetricsIntensity" : 0.06244276731867643,
      "Density" : 1.003429355281207
    },
    "euclideanDistance" : 23.080306147342963,
    "generation" : 30,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9034250421111736,
      "LackOfCohesion" : 1.2978564366965393,
      "MetricsIntensity" : 0.06244276731867643,
      "Density" : 3.388535031847134
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9847c02a-1dc3-40af-b3c0-73a86726feaf",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.3014613557590142,
      "MetricsIntensity" : 0.062353977840720484,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 24.076805275231873,
    "generation" : 35,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898371701291409,
      "LackOfCohesion" : 1.3014613557590142,
      "MetricsIntensity" : 0.062353977840720484,
      "Density" : 3.3682686740011585
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "2570425b-3370-41ee-b2eb-187de0cf0cb1",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2978273289433984,
      "MetricsIntensity" : 0.06254478119119079,
      "Density" : 1.0017146776406036
    },
    "euclideanDistance" : 24.07681215096086,
    "generation" : 43,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005617977528095,
      "LackOfCohesion" : 1.2978273289433984,
      "MetricsIntensity" : 0.06254478119119079,
      "Density" : 3.38470451911935
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "8e2c7251-c816-4b35-a14b-245237727a78",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2976121826439149,
      "MetricsIntensity" : 0.06253464748867889,
      "Density" : 1.0017146776406036
    },
    "euclideanDistance" : 24.076825119139418,
    "generation" : 40,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016853932584272,
      "LackOfCohesion" : 1.2976121826439149,
      "MetricsIntensity" : 0.06253464748867889,
      "Density" : 3.3847045191193508
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "f8341f90-d8a6-4a5d-b229-445b8192f174",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.299921166415397,
      "MetricsIntensity" : 0.062345741995579615,
      "Density" : 0.9986282578875172
    },
    "euclideanDistance" : 24.076845574596412,
    "generation" : 42,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9006734006734005,
      "LackOfCohesion" : 1.299921166415397,
      "MetricsIntensity" : 0.062345741995579615,
      "Density" : 3.3703703703703702
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "b3b94a2a-e4ad-487a-ad3c-725edc56c908",
    "objectives" : {
      "NumberOfConcerns" : 1.002366163856847,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2998208856291955,
      "MetricsIntensity" : 0.06231039457559868,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 24.076850467436003,
    "generation" : 41,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9017957351290684,
      "LackOfCohesion" : 1.2998208856291955,
      "MetricsIntensity" : 0.06231039457559869,
      "Density" : 3.3692129629629637
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ed92e50-dff0-4f75-b154-0d6f2e7cdeb0",
    "objectives" : {
      "NumberOfConcerns" : 1.0008873114463177,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2985121316462735,
      "MetricsIntensity" : 0.06256841199443651,
      "Density" : 1.001543209876543
    },
    "euclideanDistance" : 24.076854295644107,
    "generation" : 43,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901123595505618,
      "LackOfCohesion" : 1.2985121316462735,
      "MetricsIntensity" : 0.06256841199443651,
      "Density" : 3.384125144843569
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "badbfff5-7168-4029-891d-024c33c242fe",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 1.2980715199933126,
      "MetricsIntensity" : 0.06250175193129406,
      "Density" : 1.0036008230452675
    },
    "euclideanDistance" : 24.076952945651183,
    "generation" : 39,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902808988764045,
      "LackOfCohesion" : 1.2980715199933126,
      "MetricsIntensity" : 0.06250175193129408,
      "Density" : 3.391077636152955
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "618db3f9-7053-477a-8fb0-01107a96accb",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.301763580148255,
      "MetricsIntensity" : 0.062492291220703544,
      "Density" : 0.9967421124828533
    },
    "euclideanDistance" : 25.073648558668886,
    "generation" : 17,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896571107363688,
      "LackOfCohesion" : 1.301763580148255,
      "MetricsIntensity" : 0.06249229122070354,
      "Density" : 3.3698550724637677
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7e075efe-3ba2-4a9b-97d3-6b563f16e41c",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.3020762727706556,
      "MetricsIntensity" : 0.06246222455206294,
      "Density" : 0.9979423868312757
    },
    "euclideanDistance" : 25.073747793117583,
    "generation" : 31,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8971910112359551,
      "LackOfCohesion" : 1.3020762727706556,
      "MetricsIntensity" : 0.06246222455206294,
      "Density" : 3.371958285052143
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3d805a8e-1be9-4171-8a62-40dc149e01dc",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2978868527529226,
      "MetricsIntensity" : 0.06249738664405819,
      "Density" : 1.0012002743484225
    },
    "euclideanDistance" : 25.073754919412874,
    "generation" : 35,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016853932584268,
      "LackOfCohesion" : 1.2978868527529226,
      "MetricsIntensity" : 0.062497386644058184,
      "Density" : 3.3829663962920042
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "8a11b243-0b51-485f-8ae0-c620e6c006bd",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 1.2975569617603808,
      "MetricsIntensity" : 0.06251250924626824,
      "Density" : 1.001543209876543
    },
    "euclideanDistance" : 25.073775205962633,
    "generation" : 39,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028089887640447,
      "LackOfCohesion" : 1.2975569617603808,
      "MetricsIntensity" : 0.06251250924626825,
      "Density" : 3.3841251448435687
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "322a87dc-83ea-4b70-9756-b6bcb59465e1",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.3004225086218306,
      "MetricsIntensity" : 0.06253966525676338,
      "Density" : 0.9994855967078189
    },
    "euclideanDistance" : 26.070861989364033,
    "generation" : 38,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896571107363689,
      "LackOfCohesion" : 1.3004225086218306,
      "MetricsIntensity" : 0.06253966525676338,
      "Density" : 3.3791304347826085
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "64f4b917-f62f-4c09-a37b-f4ed2a4f6061",
    "objectives" : {
      "NumberOfConcerns" : 1.0020703933747412,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 1.2978251615298038,
      "MetricsIntensity" : 0.0623932199757228,
      "Density" : 1.000514403292181
    },
    "euclideanDistance" : 26.070930501389324,
    "generation" : 42,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.902302077484559,
      "LackOfCohesion" : 1.2978251615298038,
      "MetricsIntensity" : 0.0623932199757228,
      "Density" : 3.3786913723219456
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "10b55bd3-83ad-4e51-9c56-87801aabaee7",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.3009106576447804,
      "MetricsIntensity" : 0.06251840291462919,
      "Density" : 0.9965706447187929
    },
    "euclideanDistance" : 27.068160145077673,
    "generation" : 26,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897637795275591,
      "LackOfCohesion" : 1.3009106576447804,
      "MetricsIntensity" : 0.06251840291462918,
      "Density" : 3.3712296983758696
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "f64a07eb-2b0a-4533-aa0a-99b2e03c5dee",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2993110234617316,
      "MetricsIntensity" : 0.06249881273457266,
      "Density" : 1.0003429355281208
    },
    "euclideanDistance" : 27.06829882401078,
    "generation" : 41,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.899438202247191,
      "LackOfCohesion" : 1.2993110234617316,
      "MetricsIntensity" : 0.062498812734572654,
      "Density" : 3.3800695249130936
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "a3d92e49-065c-436b-b021-02fb4e5f989e",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 1.2983024436880917,
      "MetricsIntensity" : 0.06248616161973729,
      "Density" : 1.001886145404664
    },
    "euclideanDistance" : 27.068362150227333,
    "generation" : 45,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9022471910112366,
      "LackOfCohesion" : 1.2983024436880917,
      "MetricsIntensity" : 0.06248616161973728,
      "Density" : 3.3852838933951332
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "5af507ec-779c-45b3-af3e-f30eaf830d75",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.30215358847226,
      "MetricsIntensity" : 0.0625240655477916,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 28.065772710146387,
    "generation" : 21,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8960089938167515,
      "LackOfCohesion" : 1.30215358847226,
      "MetricsIntensity" : 0.0625240655477916,
      "Density" : 3.3686956521739138
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9f5a0a05-5a53-4756-9bc3-f0fe42494120",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2986379685687555,
      "MetricsIntensity" : 0.06255720344119893,
      "Density" : 1.000514403292181
    },
    "euclideanDistance" : 28.06580890002522,
    "generation" : 20,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898819561551433,
      "LackOfCohesion" : 1.2986379685687555,
      "MetricsIntensity" : 0.06255720344119893,
      "Density" : 3.3826086956521744
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "60ab5da3-3a87-4ce0-ac73-cd41bcacaa43",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2974635791282845,
      "MetricsIntensity" : 0.06248777085273568,
      "Density" : 1.0010288065843622
    },
    "euclideanDistance" : 28.065825456667604,
    "generation" : 39,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9005617977528089,
      "LackOfCohesion" : 1.2974635791282845,
      "MetricsIntensity" : 0.06248777085273568,
      "Density" : 3.3823870220162227
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "c060b53b-9eb2-4169-9988-5d64f830c7e2",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3028668695652876,
      "MetricsIntensity" : 0.06246567369500883,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 28.065834465172436,
    "generation" : 34,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965711073636875,
      "LackOfCohesion" : 1.3028668695652876,
      "MetricsIntensity" : 0.062465673695008835,
      "Density" : 3.370434782608695
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b292da89-0608-4edc-95bf-47543bac5696",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.3024107899512942,
      "MetricsIntensity" : 0.06243298160013028,
      "Density" : 0.9974279835390947
    },
    "euclideanDistance" : 28.065863064604763,
    "generation" : 41,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897191011235955,
      "LackOfCohesion" : 1.3024107899512942,
      "MetricsIntensity" : 0.062432981600130284,
      "Density" : 3.3702201622247974
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "afd6e5d9-9a5c-4ef2-9321-5b1d002948df",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2973631775218586,
      "MetricsIntensity" : 0.06245238084550173,
      "Density" : 1.0027434842249656
    },
    "euclideanDistance" : 28.06590304217839,
    "generation" : 16,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016853932584268,
      "LackOfCohesion" : 1.2973631775218586,
      "MetricsIntensity" : 0.06245238084550173,
      "Density" : 3.3881807647740443
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "48dece67-e518-48ca-87dd-1f2a5201186a",
    "objectives" : {
      "NumberOfConcerns" : 1.0011830819284235,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 1.2972484328288008,
      "MetricsIntensity" : 0.062477637150223746,
      "Density" : 1.0030864197530864
    },
    "euclideanDistance" : 28.06591004903731,
    "generation" : 31,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9016853932584268,
      "LackOfCohesion" : 1.2972484328288008,
      "MetricsIntensity" : 0.062477637150223746,
      "Density" : 3.389339513325608
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "d8ba5db8-3aa4-4c9f-a633-2fc2dd5f34ef",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.3005060096094907,
      "MetricsIntensity" : 0.062464786653698604,
      "Density" : 0.9962277091906722
    },
    "euclideanDistance" : 29.06341980215642,
    "generation" : 40,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8954468802698143,
      "LackOfCohesion" : 1.3005060096094907,
      "MetricsIntensity" : 0.062464786653698604,
      "Density" : 3.368115942028985
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3b977c69-c451-410f-82e9-0d92d9e95e61",
    "objectives" : {
      "NumberOfConcerns" : 1.0017746228926354,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 1.2971932119452665,
      "MetricsIntensity" : 0.0624554989078131,
      "Density" : 1.0029149519890261
    },
    "euclideanDistance" : 29.063654307647816,
    "generation" : 44,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9028089887640451,
      "LackOfCohesion" : 1.2971932119452665,
      "MetricsIntensity" : 0.0624554989078131,
      "Density" : 3.3887601390498268
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "0210176b-cff2-4776-b1c7-6bc4bfe5c8f4",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3004051552423161,
      "MetricsIntensity" : 0.06259102220031328,
      "Density" : 0.9991426611796982
    },
    "euclideanDistance" : 30.061402836169286,
    "generation" : 34,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897580191333708,
      "LackOfCohesion" : 1.3004051552423161,
      "MetricsIntensity" : 0.06259102220031328,
      "Density" : 3.381892048752176
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5d05252b-4498-47e6-b953-c2d4ac3edb79",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.3013274110794657,
      "MetricsIntensity" : 0.06236328401539876,
      "Density" : 0.9965706447187929
    },
    "euclideanDistance" : 30.061405996655598,
    "generation" : 33,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897191011235955,
      "LackOfCohesion" : 1.3013274110794657,
      "MetricsIntensity" : 0.06236328401539876,
      "Density" : 3.3673232908458868
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "5d1798b7-63a2-42b5-8fa3-0ceebb0cde07",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.2970632247471763,
      "MetricsIntensity" : 0.0625221706063994,
      "Density" : 1.0008573388203017
    },
    "euclideanDistance" : 30.06141362397856,
    "generation" : 42,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.90106801573918,
      "LackOfCohesion" : 1.2970632247471763,
      "MetricsIntensity" : 0.0625221706063994,
      "Density" : 3.3837681159420288
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "39e319ef-20ec-44ec-8ef4-71f14684047f",
    "objectives" : {
      "NumberOfConcerns" : 1.0014788524105294,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 1.300523121997047,
      "MetricsIntensity" : 0.062310237465194866,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 30.061493767170116,
    "generation" : 17,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.901179112857945,
      "LackOfCohesion" : 1.300523121997047,
      "MetricsIntensity" : 0.062310237465194866,
      "Density" : 3.3688477127967564
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "37fff7d4-ce8c-400c-8272-891c16e92d41",
    "objectives" : {
      "NumberOfConcerns" : 0.9994084590357882,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.297493982847154,
      "MetricsIntensity" : 0.06247698168248411,
      "Density" : 0.9998285322359396
    },
    "euclideanDistance" : 31.059392595004656,
    "generation" : 25,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8993816750983699,
      "LackOfCohesion" : 1.297493982847154,
      "MetricsIntensity" : 0.06247698168248411,
      "Density" : 3.3802898550724643
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "4d126737-7ce2-42e9-ba03-436335dff6d9",
    "objectives" : {
      "NumberOfConcerns" : 1.0005915409642119,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 1.2985818395717126,
      "MetricsIntensity" : 0.06241525148699388,
      "Density" : 0.9979423868312757
    },
    "euclideanDistance" : 31.059415366309896,
    "generation" : 32,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.900561797752809,
      "LackOfCohesion" : 1.2985818395717126,
      "MetricsIntensity" : 0.062415251486993874,
      "Density" : 3.371958285052143
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "5696e07f-9912-4728-9258-2c138c45d8f2",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 1.298284878775033,
      "MetricsIntensity" : 0.06264837717965153,
      "Density" : 1.0003429355281208
    },
    "euclideanDistance" : 32.057533088266446,
    "generation" : 38,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970753655793025,
      "LackOfCohesion" : 1.298284878775033,
      "MetricsIntensity" : 0.06264837717965153,
      "Density" : 3.383990719257541
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "e03424e9-cd52-4ef4-b9d5-0839d063c946",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 1.297754107994259,
      "MetricsIntensity" : 0.06244758714278572,
      "Density" : 1.0017146776406036
    },
    "euclideanDistance" : 33.05589341327505,
    "generation" : 29,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9010680157391795,
      "LackOfCohesion" : 1.297754107994259,
      "MetricsIntensity" : 0.06244758714278573,
      "Density" : 3.3866666666666667
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c1341065-6966-4955-b2b5-d3a4e8b746bd",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.3005844991385858,
      "MetricsIntensity" : 0.06252337113686597,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 34.05407655185097,
    "generation" : 21,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.894825646794151,
      "LackOfCohesion" : 1.3005844991385858,
      "MetricsIntensity" : 0.06252337113686596,
      "Density" : 3.3689095127610207
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b12f3f68-2cc5-4c2d-890a-a0d71af54f3a",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2996219383950773,
      "MetricsIntensity" : 0.062388482378399335,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 34.054152672807575,
    "generation" : 18,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897752808988764,
      "LackOfCohesion" : 1.2996219383950773,
      "MetricsIntensity" : 0.062388482378399335,
      "Density" : 3.369061413673233
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "ed3ef73e-1d52-4900-bdf5-056beda88144",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.2968140695316166,
      "MetricsIntensity" : 0.062439854375131144,
      "Density" : 0.9998285322359396
    },
    "euclideanDistance" : 34.05416089391526,
    "generation" : 26,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9010680157391797,
      "LackOfCohesion" : 1.2968140695316166,
      "MetricsIntensity" : 0.06243985437513114,
      "Density" : 3.3802898550724647
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "e9c3eec3-ae68-4747-a447-b1f23b7b6fbb",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 1.296699255673584,
      "MetricsIntensity" : 0.06246512590366552,
      "Density" : 1.0001714677640603
    },
    "euclideanDistance" : 34.05416663853327,
    "generation" : 45,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9010680157391802,
      "LackOfCohesion" : 1.296699255673584,
      "MetricsIntensity" : 0.062465125903665514,
      "Density" : 3.381449275362319
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "20fe1480-a18e-4dab-9162-d2781e389eb4",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.2971396378077173,
      "MetricsIntensity" : 0.06258078969991218,
      "Density" : 1.0003429355281208
    },
    "euclideanDistance" : 35.05260902911938,
    "generation" : 43,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8998875140607423,
      "LackOfCohesion" : 1.2971396378077173,
      "MetricsIntensity" : 0.0625807896999122,
      "Density" : 3.3839907192575414
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "ed2def5b-c458-4849-9191-a1b9f4b1f766",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 1.3029453283618495,
      "MetricsIntensity" : 0.06259776002134805,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 35.052616793919654,
    "generation" : 19,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895891952729319,
      "LackOfCohesion" : 1.3029453283618495,
      "MetricsIntensity" : 0.06259776002134805,
      "Density" : 3.370284387695879
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "2e23a06e-85a1-41a4-8149-852e8051fed5",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3005654166373943,
      "MetricsIntensity" : 0.06234056402905476,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 36.05112822393501,
    "generation" : 45,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976953344575604,
      "LackOfCohesion" : 1.3005654166373943,
      "MetricsIntensity" : 0.06234056402905477,
      "Density" : 3.3663768115942028
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "02039274-97e8-44d1-8a82-9ee0fa999f75",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3036171261230027,
      "MetricsIntensity" : 0.06255337240296281,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 36.05119314843507,
    "generation" : 37,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.3036171261230027,
      "MetricsIntensity" : 0.06255337240296281,
      "Density" : 3.3697040046430655
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "ba4c3428-06cf-4bb0-92a1-3c6ff195cfeb",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.3030445134351503,
      "MetricsIntensity" : 0.06251839379895027,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 36.051196071861035,
    "generation" : 32,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8959505061867268,
      "LackOfCohesion" : 1.3030445134351503,
      "MetricsIntensity" : 0.06251839379895027,
      "Density" : 3.3706496519721574
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "de6ea70b-175c-4f19-9f89-80134d316e5b",
    "objectives" : {
      "NumberOfConcerns" : 1.0002957704821058,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 1.300388612116437,
      "MetricsIntensity" : 0.06231951729024936,
      "Density" : 0.9967421124828533
    },
    "euclideanDistance" : 36.051199435414055,
    "generation" : 43,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.9,
      "LackOfCohesion" : 1.300388612116437,
      "MetricsIntensity" : 0.06231951729024936,
      "Density" : 3.367902665121669
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.predicate, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.retries, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.source, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.downstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "a93d9765-b0be-405d-a976-a60e27ebc50e",
    "objectives" : {
      "NumberOfConcerns" : 0.9985211475894705,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2969446225633867,
      "MetricsIntensity" : 0.0624644624946024,
      "Density" : 0.9989711934156379
    },
    "euclideanDistance" : 37.04970924434534,
    "generation" : 24,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.898762654668166,
      "LackOfCohesion" : 1.2969446225633867,
      "MetricsIntensity" : 0.0624644624946024,
      "Density" : 3.3793503480278426
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "01d55555-d5e9-47a9-a6bf-5155832d30a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9991126885536823,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.2966143336323737,
      "MetricsIntensity" : 0.062479603338793446,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 37.049722904817386,
    "generation" : 13,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8998875140607419,
      "LackOfCohesion" : 1.2966143336323737,
      "MetricsIntensity" : 0.06247960333879345,
      "Density" : 3.380510440835267
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "eacbf2fc-45c5-49a1-9717-c63642dfb754",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.302217894527783,
      "MetricsIntensity" : 0.06263412512007946,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 37.049743105959806,
    "generation" : 15,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963966,
      "LackOfCohesion" : 1.302217894527783,
      "MetricsIntensity" : 0.06263412512007947,
      "Density" : 3.372241579558653
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "8cf76a0f-8f26-4b51-8d84-05d870449a52",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.299303594462238,
      "MetricsIntensity" : 0.06235590350914211,
      "Density" : 0.9969135802469136
    },
    "euclideanDistance" : 37.049768195257066,
    "generation" : 27,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8999437886453066,
      "LackOfCohesion" : 1.299303594462238,
      "MetricsIntensity" : 0.06235590350914211,
      "Density" : 3.3704347826086947
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "8dd5355d-10de-42ba-bd87-eabd264e0d0a",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.299966027772854,
      "MetricsIntensity" : 0.06253526402026026,
      "Density" : 0.9981138545953361
    },
    "euclideanDistance" : 37.04976824313969,
    "generation" : 30,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8981429375351715,
      "LackOfCohesion" : 1.299966027772854,
      "MetricsIntensity" : 0.06253526402026026,
      "Density" : 3.3784097504352872
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "e865c8f6-e8fd-4971-b3a9-b942170574ca",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.3006103831252942,
      "MetricsIntensity" : 0.06244150304353508,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 37.04977893060178,
    "generation" : 30,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8971332209106238,
      "LackOfCohesion" : 1.3006103831252942,
      "MetricsIntensity" : 0.06244150304353508,
      "Density" : 3.371014492753623
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "39ed01d0-9b12-4851-b5b8-bed8fb3e8533",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 1.3040084191424586,
      "MetricsIntensity" : 0.06251169078112846,
      "Density" : 0.9960562414266118
    },
    "euclideanDistance" : 37.04984692170779,
    "generation" : 29,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830144,
      "LackOfCohesion" : 1.3040084191424586,
      "MetricsIntensity" : 0.06251169078112845,
      "Density" : 3.369489559164733
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7e4c1b69-08b1-48fb-a0d7-27398706e977",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.2995577527372064,
      "MetricsIntensity" : 0.06265569171773301,
      "Density" : 0.9989711934156379
    },
    "euclideanDistance" : 38.048430247321555,
    "generation" : 17,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963963,
      "LackOfCohesion" : 1.2995577527372064,
      "MetricsIntensity" : 0.06265569171773301,
      "Density" : 3.3832752613240418
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "db33d872-b4d6-48c9-967c-2fead0ba9bdb",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 1.3028900979639126,
      "MetricsIntensity" : 0.0625897106975768,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 38.04846970990067,
    "generation" : 38,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8975225225225232,
      "LackOfCohesion" : 1.3028900979639126,
      "MetricsIntensity" : 0.0625897106975768,
      "Density" : 3.37166085946574
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3269a6d4-8bd9-49e1-b190-c7c93fffe9c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.3016862399346862,
      "MetricsIntensity" : 0.06257022283345418,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 39.04715685588882,
    "generation" : 20,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947664603263927,
      "LackOfCohesion" : 1.3016862399346862,
      "MetricsIntensity" : 0.06257022283345418,
      "Density" : 3.368543238537434
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "27ab1602-26ee-42b3-b558-6789843a894c",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.297916714348625,
      "MetricsIntensity" : 0.06258309662513994,
      "Density" : 0.9993141289437586
    },
    "euclideanDistance" : 39.047174243303346,
    "generation" : 43,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897580191333708,
      "LackOfCohesion" : 1.297916714348625,
      "MetricsIntensity" : 0.06258309662513994,
      "Density" : 3.3824724318049912
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposer, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.eager, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.downstream, io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.upstream], extractedMethods=[io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "2ada6da0-1fe8-4c3d-ae30-babf73240d6d",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 1.2994050690279872,
      "MetricsIntensity" : 0.06260174927582278,
      "Density" : 0.9989711934156379
    },
    "euclideanDistance" : 39.04720744555337,
    "generation" : 27,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.2994050690279872,
      "MetricsIntensity" : 0.06260174927582278,
      "Density" : 3.3813116656993616
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll(), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long), io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "d2b83936-5403-46c7-9575-19049f469465",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.2980175041134066,
      "MetricsIntensity" : 0.06255300198558127,
      "Density" : 0.9986282578875172
    },
    "euclideanDistance" : 40.04597500442297,
    "generation" : 37,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.2980175041134066,
      "MetricsIntensity" : 0.06255300198558127,
      "Density" : 3.3801508995937315
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete(), io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "e9a13fea-f4f5-4d22-a22c-fef4e681f211",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3012919686018571,
      "MetricsIntensity" : 0.06264006374841882,
      "Density" : 0.9958847736625515
    },
    "euclideanDistance" : 40.04598365154941,
    "generation" : 10,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958333333333333,
      "LackOfCohesion" : 1.3012919686018571,
      "MetricsIntensity" : 0.06264006374841884,
      "Density" : 3.3728222996515687
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "578508f0-c0fe-4104-bc39-8c1d6232c58d",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3023580376958392,
      "MetricsIntensity" : 0.06252583463792889,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 40.04601153223642,
    "generation" : 34,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293194,
      "LackOfCohesion" : 1.3023580376958392,
      "MetricsIntensity" : 0.0625258346379289,
      "Density" : 3.3679628554846195
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b5267eb1-afe0-429a-bcda-cd85804d6ebe",
    "objectives" : {
      "NumberOfConcerns" : 0.9997042295178941,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 1.3017788116300408,
      "MetricsIntensity" : 0.06234013402671412,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 40.04610760402403,
    "generation" : 33,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8999437886453068,
      "LackOfCohesion" : 1.3017788116300408,
      "MetricsIntensity" : 0.06234013402671413,
      "Density" : 3.3686956521739138
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancelled, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.once, io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long), io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.fastPath()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "46b0986a-4f6b-4b28-bdc1-d2da107cb8a2",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.300958045781521,
      "MetricsIntensity" : 0.06260657072596039,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 41.044828892856984,
    "generation" : 13,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8952702702702702,
      "LackOfCohesion" : 1.300958045781521,
      "MetricsIntensity" : 0.06260657072596038,
      "Density" : 3.3704994192799065
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "973e27cc-fc84-4985-a550-791360aee1c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9988169180715765,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 1.299896581944918,
      "MetricsIntensity" : 0.062329062320087565,
      "Density" : 0.9960562414266118
    },
    "euclideanDistance" : 41.04489468018736,
    "generation" : 35,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982574480044971,
      "LackOfCohesion" : 1.299896581944918,
      "MetricsIntensity" : 0.062329062320087565,
      "Density" : 3.3675362318840576
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "d9c9f661-8c02-4c7f-85ea-41ae5dd52c93",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2995019679010567,
      "MetricsIntensity" : 0.062397719408388085,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 42.043759381303325,
    "generation" : 34,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8965129358830148,
      "LackOfCohesion" : 1.2995019679010567,
      "MetricsIntensity" : 0.062397719408388085,
      "Density" : 3.3665893271461713
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "0778b89f-9fe9-4f90-a3e9-67643545c81c",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.3007608728053361,
      "MetricsIntensity" : 0.06257615787782961,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 42.043760575934975,
    "generation" : 33,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8942037141249295,
      "LackOfCohesion" : 1.3007608728053361,
      "MetricsIntensity" : 0.06257615787782961,
      "Density" : 3.3691236215902496
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c62c8668-3072-4c59-aac3-28bf07aa6f9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.2980822380144093,
      "MetricsIntensity" : 0.06261797914355974,
      "Density" : 0.9984567901234568
    },
    "euclideanDistance" : 42.04376504573918,
    "generation" : 39,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963963,
      "LackOfCohesion" : 1.2980822380144093,
      "MetricsIntensity" : 0.06261797914355975,
      "Density" : 3.3815331010452954
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "096d9cce-4222-4ccc-8b1f-d863cbafc7e2",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 1.3015307317588314,
      "MetricsIntensity" : 0.062365154363962505,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 42.0438291046969,
    "generation" : 44,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970753655793033,
      "LackOfCohesion" : 1.3015307317588314,
      "MetricsIntensity" : 0.062365154363962505,
      "Density" : 3.3665893271461713
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7fb5ca9b-1ec3-4002-bc3b-775d489fd9d6",
    "objectives" : {
      "NumberOfConcerns" : 0.9979296066252588,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.2992687095028406,
      "MetricsIntensity" : 0.06240065476827515,
      "Density" : 0.9963991769547325
    },
    "euclideanDistance" : 43.04277718550261,
    "generation" : 35,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8976377952755905,
      "LackOfCohesion" : 1.2992687095028406,
      "MetricsIntensity" : 0.06240065476827516,
      "Density" : 3.3706496519721574
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.composite, io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.serialVersionUID], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()]"
      } ]
    } ]
  }, {
    "solutionId" : "32cf00b4-1aa9-4893-b55f-ff4d38f9d7ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.300660204551549,
      "MetricsIntensity" : 0.06270267998469838,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 43.042808560167124,
    "generation" : 18,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896338028169014,
      "LackOfCohesion" : 1.300660204551549,
      "MetricsIntensity" : 0.06270267998469838,
      "Density" : 3.3829169087739683
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "3854abb3-5bea-4ef8-a86a-723718638a56",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.3006602045515492,
      "MetricsIntensity" : 0.06270267998469835,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 43.042808560167124,
    "generation" : 16,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.896338028169014,
      "LackOfCohesion" : 1.3006602045515492,
      "MetricsIntensity" : 0.06270267998469836,
      "Density" : 3.3829169087739674
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "cf189931-7ced-4a17-89ed-233b073bcbae",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 1.303462658783864,
      "MetricsIntensity" : 0.062499184984864585,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 43.042842099613864,
    "generation" : 33,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958919527293192,
      "LackOfCohesion" : 1.303462658783864,
      "MetricsIntensity" : 0.06249918498486459,
      "Density" : 3.368543238537435
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "d6d4b173-5fd0-4185-b5f0-2cb7fb773a9d",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.3000321198555953,
      "MetricsIntensity" : 0.06261250935429971,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 44.04174523963252,
    "generation" : 5,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947072072072075,
      "LackOfCohesion" : 1.3000321198555953,
      "MetricsIntensity" : 0.06261250935429971,
      "Density" : 3.3710801393728227
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "8a9619d6-3e8e-4481-b278-4c1ed6905cc4",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 1.3015284225185788,
      "MetricsIntensity" : 0.06243856022974487,
      "Density" : 0.9943415637860082
    },
    "euclideanDistance" : 44.04180608572128,
    "generation" : 11,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.3015284225185788,
      "MetricsIntensity" : 0.06243856022974488,
      "Density" : 3.3656413232733606
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9ebe66e8-ab71-4b48-9de3-8a7f804398a7",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.3018654938933607,
      "MetricsIntensity" : 0.06254950822476531,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 45.04088161132309,
    "generation" : 38,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8942037141249297,
      "LackOfCohesion" : 1.3018654938933607,
      "MetricsIntensity" : 0.06254950822476531,
      "Density" : 3.369704004643064
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "beebadbb-e55e-4c5c-876c-056f2bbd8612",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 1.2997071282100936,
      "MetricsIntensity" : 0.06253124674304901,
      "Density" : 0.9982853223593965
    },
    "euclideanDistance" : 45.04091268723529,
    "generation" : 44,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8980855855855852,
      "LackOfCohesion" : 1.2997071282100936,
      "MetricsIntensity" : 0.06253124674304901,
      "Density" : 3.380952380952381
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.xmapz.FlowableFlatMapSinglePerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOne.TakeLastOneObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "4ca8d4bd-0156-48c4-9159-2a23aec61575",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2974677964870662,
      "MetricsIntensity" : 0.06254051358388757,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 46.039930555522254,
    "generation" : 43,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963963963963963,
      "LackOfCohesion" : 1.2974677964870662,
      "MetricsIntensity" : 0.06254051358388757,
      "Density" : 3.3792102206736363
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next(), io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "8feac1de-1810-4707-9674-cb2278de3d1d",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2999312662715865,
      "MetricsIntensity" : 0.062488586441916606,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 46.039933189843545,
    "generation" : 33,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.895329206527856,
      "LackOfCohesion" : 1.2999312662715865,
      "MetricsIntensity" : 0.062488586441916606,
      "Density" : 3.3668020893789903
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "1b0a7090-6e6a-43ce-9249-5b90ce672bb7",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 1.2972521305105307,
      "MetricsIntensity" : 0.06253035540383338,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 46.039937267299706,
    "generation" : 28,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897522522522523,
      "LackOfCohesion" : 1.2972521305105307,
      "MetricsIntensity" : 0.06253035540383338,
      "Density" : 3.379210220673636
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.upstream, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.boundary, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.other, io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.buffer], extractedMethods=[io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "6d7c4327-651d-490d-92dd-0ec74def32cd",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2995389636559176,
      "MetricsIntensity" : 0.06258192770257014,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 47.03908904917159,
    "generation" : 35,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958333333333335,
      "LackOfCohesion" : 1.2995389636559176,
      "MetricsIntensity" : 0.06258192770257014,
      "Density" : 3.372241579558653
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "4cf6f00d-d30b-469d-bb94-4602a86d1469",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.2993995945673742,
      "MetricsIntensity" : 0.06267510894139854,
      "Density" : 0.9977709190672154
    },
    "euclideanDistance" : 47.03911014642984,
    "generation" : 9,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8952112676056334,
      "LackOfCohesion" : 1.2993995945673742,
      "MetricsIntensity" : 0.06267510894139855,
      "Density" : 3.3811737361998837
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "b583de22-009f-4a47-abe8-1a22b0b9c9b2",
    "objectives" : {
      "NumberOfConcerns" : 0.9952676722863059,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.30113740798534,
      "MetricsIntensity" : 0.06258584360844979,
      "Density" : 0.9955418381344308
    },
    "euclideanDistance" : 47.03911709240782,
    "generation" : 32,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8947072072072066,
      "LackOfCohesion" : 1.30113740798534,
      "MetricsIntensity" : 0.06258584360844979,
      "Density" : 3.371660859465739
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "f4a86920-e9ff-497d-8c3a-6e424dd49141",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 1.3026330436066036,
      "MetricsIntensity" : 0.06241191057668057,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 47.03917407439438,
    "generation" : 23,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8970174451322452,
      "LackOfCohesion" : 1.3026330436066036,
      "MetricsIntensity" : 0.06241191057668057,
      "Density" : 3.366221706326175
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7fcf9b5c-306e-4494-bc00-44a4705d3b32",
    "objectives" : {
      "NumberOfConcerns" : 0.9958592132505176,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 1.3018096114214697,
      "MetricsIntensity" : 0.06254142860845861,
      "Density" : 0.9953703703703703
    },
    "euclideanDistance" : 48.038329669561875,
    "generation" : 33,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8958333333333333,
      "LackOfCohesion" : 1.3018096114214697,
      "MetricsIntensity" : 0.0625414286084586,
      "Density" : 3.3710801393728227
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "1c805f42-998f-44c5-880d-5f4993b7533d",
    "objectives" : {
      "NumberOfConcerns" : 0.9967465246968352,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.3019054211947867,
      "MetricsIntensity" : 0.06244816402797489,
      "Density" : 0.9945130315500685
    },
    "euclideanDistance" : 49.03755109406816,
    "generation" : 30,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897522522522523,
      "LackOfCohesion" : 1.3019054211947867,
      "MetricsIntensity" : 0.06244816402797489,
      "Density" : 3.368176538908247
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "ee43c22a-a0c2-4eb6-b7bb-a3f6de0b0be3",
    "objectives" : {
      "NumberOfConcerns" : 0.9982253771073647,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 1.3007200878390197,
      "MetricsIntensity" : 0.06235537454220388,
      "Density" : 0.995713305898491
    },
    "euclideanDistance" : 49.037573959472006,
    "generation" : 32,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8982002249718783,
      "LackOfCohesion" : 1.3007200878390197,
      "MetricsIntensity" : 0.06235537454220388,
      "Density" : 3.368329466357308
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete(), io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)]"
      } ]
    } ]
  }, {
    "solutionId" : "9b50065f-556a-4225-adf6-47721183ffe6",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 1.2989061403881195,
      "MetricsIntensity" : 0.0626445088113295,
      "Density" : 0.9981138545953361
    },
    "euclideanDistance" : 50.03677107219584,
    "generation" : 34,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963380281690143,
      "LackOfCohesion" : 1.2989061403881195,
      "MetricsIntensity" : 0.06264450881132949,
      "Density" : 3.382335851249274
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c030cda9-37cb-4a16-81c6-93cf67c2a30f",
    "objectives" : {
      "NumberOfConcerns" : 0.9949719018041999,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 1.3005055505449314,
      "MetricsIntensity" : 0.06264842708331542,
      "Density" : 0.9979423868312757
    },
    "euclideanDistance" : 50.03679743553967,
    "generation" : 33,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8952112676056334,
      "LackOfCohesion" : 1.3005055505449314,
      "MetricsIntensity" : 0.06264842708331543,
      "Density" : 3.381754793724579
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.disposables.ReferenceDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeInterval'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "62b70d1e-8792-4ed1-a3eb-323a321e24fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9976338361431529,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 1.302140185026841,
      "MetricsIntensity" : 0.06238135219748271,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 50.036831156267404,
    "generation" : 34,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8981429375351717,
      "LackOfCohesion" : 1.302140185026841,
      "MetricsIntensity" : 0.06238135219748271,
      "Density" : 3.367382472431805
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "afd28306-a98f-4b93-bf35-a921d6fdcbb4",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.298708856152039,
      "MetricsIntensity" : 0.06249430665379031,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 51.036002429001776,
    "generation" : 27,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.298708856152039,
      "MetricsIntensity" : 0.062494306653790306,
      "Density" : 3.3699186991869916
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "40b65bdb-d557-4c9e-83d7-7edda2b51a8b",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 1.2985689854879647,
      "MetricsIntensity" : 0.06258743225681433,
      "Density" : 0.997085048010974
    },
    "euclideanDistance" : 51.03602182535676,
    "generation" : 41,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963380281690143,
      "LackOfCohesion" : 1.2985689854879647,
      "MetricsIntensity" : 0.06258743225681435,
      "Density" : 3.3788495061011035
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.slowPath(long)', targetType='io.reactivex.rxjava3.core.TakeUntilPerf'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.functions.Functions.ToMapKeySelector'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableReplay.ReplayPublisher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.FlatMapWithCombinerOuter'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "46b2dfbd-5974-4e18-b299-bc1a40aa20bb",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 1.3009794952688607,
      "MetricsIntensity" : 0.06245410265631428,
      "Density" : 0.994684499314129
    },
    "euclideanDistance" : 52.0353606648479,
    "generation" : 30,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.3009794952688607,
      "MetricsIntensity" : 0.06245410265631428,
      "Density" : 3.3687572590011614
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "65c3b886-c221-4e70-9ce9-af149f27955f",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 1.3014122649951085,
      "MetricsIntensity" : 0.062417587779161336,
      "Density" : 0.9948559670781894
    },
    "euclideanDistance" : 52.035391719974506,
    "generation" : 31,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8986486486486487,
      "LackOfCohesion" : 1.3014122649951085,
      "MetricsIntensity" : 0.062417587779161336,
      "Density" : 3.3693379790940807
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger.IncrementingIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeAmb'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.single.SingleDoOnError.DoOnError'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "7c655c21-b96a-4a28-9b8d-124504dad0d9",
    "objectives" : {
      "NumberOfConcerns" : 0.997338065661047,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 1.3012148178974907,
      "MetricsIntensity" : 0.06238728724185808,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 53.03472272944614,
    "generation" : 33,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.897580191333708,
      "LackOfCohesion" : 1.3012148178974907,
      "MetricsIntensity" : 0.06238728724185809,
      "Density" : 3.3679628554846195
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.sd], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "0e6c836d-de4a-4a8c-81e2-aa228dc0c2d9",
    "objectives" : {
      "NumberOfConcerns" : 0.9964507542147294,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.2998141442817837,
      "MetricsIntensity" : 0.062467640907940325,
      "Density" : 0.99519890260631
    },
    "euclideanDistance" : 54.03403329363041,
    "generation" : 32,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8969594594594592,
      "LackOfCohesion" : 1.2998141442817837,
      "MetricsIntensity" : 0.06246764090794033,
      "Density" : 3.3704994192799056
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "c15f53be-9e7e-4dd8-9217-84a36dd0fc71",
    "objectives" : {
      "NumberOfConcerns" : 0.9955634427684117,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 1.299674941465522,
      "MetricsIntensity" : 0.06256075039873123,
      "Density" : 0.9972565157750343
    },
    "euclideanDistance" : 54.03405163346347,
    "generation" : 15,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8963380281690136,
      "LackOfCohesion" : 1.299674941465522,
      "MetricsIntensity" : 0.06256075039873124,
      "Density" : 3.3794305636257995
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutTimed.FallbackObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutMaybe.TimeoutFallbackMaybeObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletable.ConcatWithSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.core.InputWithIncrementingInteger'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTimed.TimeoutTask'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "8d4b9613-528a-4ee3-9efb-41c4cf56a906",
    "objectives" : {
      "NumberOfConcerns" : 0.9970422951789412,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 1.3004863390691825,
      "MetricsIntensity" : 0.062423526407500665,
      "Density" : 0.9950274348422496
    },
    "euclideanDistance" : 55.033438329339546,
    "generation" : 16,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8980855855855856,
      "LackOfCohesion" : 1.3004863390691825,
      "MetricsIntensity" : 0.062423526407500665,
      "Density" : 3.3699186991869916
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.observers, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.downstream, io.reactivex.rxjava3.internal.operators.completable.CompletableCache.TERMINATED], extractedMethods=[io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete(), io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)]"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.BoundedSubscriber(Consumer<? super T>, Consumer<? super Throwable>, Action, Consumer<? super Subscription>, int)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.subscriptions.SubscriptionHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onComplete()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.functions.Functions'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  }, {
    "solutionId" : "9bc0f642-2868-4d42-b648-a8d4b8589448",
    "objectives" : {
      "NumberOfConcerns" : 0.9961549837326235,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 1.2991814872862673,
      "MetricsIntensity" : 0.06253015296123461,
      "Density" : 0.997599451303155
    },
    "euclideanDistance" : 57.032265534290254,
    "generation" : 26,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.8974647887323943,
      "LackOfCohesion" : 1.2991814872862673,
      "MetricsIntensity" : 0.06253015296123461,
      "Density" : 3.3805926786751908
    },
    "sequences" : [ {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.add(InnerCompletableCache)', targetType='io.reactivex.rxjava3.core.Notification'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableElementAt.ElementAtObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.remove(InnerCompletableCache)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArray.ZipCoordinator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableCache.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycle'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>, Observer<? super T>)', targetType='io.reactivex.rxjava3.internal.observers.BlockingObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingSubscribe.<T>subscribe(ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.util.ExceptionHelper'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.BufferExactBoundaryObserver(Observer<? super U>, Supplier<U>, ObservableSource<B>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.accept(Observer<? super U>, U)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.QueueDrainObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableBufferExactBoundary.BufferExactBoundaryObserver'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.next()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsCompletable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStage.CompletionStageHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.completable.CompletableConcatIterable.ConcatInnerObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowBoundary.WindowBoundaryMainSubscriber'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.PublisherBufferExactSubscriber(Subscriber<? super C>, int, Supplier<C>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer.PublisherBufferExactSubscriber.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableBuffer'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.disposables.SequentialDisposable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.subscribeNext()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate.RetryBiObserver.RetryBiObserver(Observer<? super T>, BiPredicate<? super Integer,? super Throwable>, SequentialDisposable, ObservableSource<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableRetryBiPredicate'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.poll()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.BaseRangeSubscription(Iterator<? extends T>)', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.clear()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.request(long)', targetType='io.reactivex.rxjava3.internal.util.BackpressureHelper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.requestFusion(int)', targetType='io.reactivex.rxjava3.internal.fuseable.QueueFuseable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.cancel()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable.BaseRangeSubscription.isEmpty()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterable'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.request(long)', targetType='io.reactivex.rxjava3.internal.schedulers.DisposeOnCancel'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.observers.CallbackCompletableObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.dispose()', targetType='io.reactivex.rxjava3.internal.operators.completable.CompletableCreate'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber.onSubscribe(Subscription)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDetach'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSubscribe(Disposable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.UsingObserver(MaybeObserver<? super T>, D, Consumer<? super D>, boolean)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onSuccess(T)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.onComplete()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.isDisposed()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.dispose()', targetType='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.operators.maybe.MaybeUsing.UsingObserver.disposeResource()', targetType='io.reactivex.rxjava3.plugins.RxJavaPlugins'"
      } ]
    }, {
      "refactoredTypeName" : "io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.hasCustomOnError()', targetType='io.reactivex.rxjava3.internal.operators.flowable.FlowableInternalHelper.BufferedReplaySupplier'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onNext(T)', targetType='io.reactivex.rxjava3.internal.operators.observable.ObservableDistinct.DistinctObserver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.removeSelf()', targetType='io.reactivex.rxjava3.internal.schedulers.IoScheduler.EventLoopWorker'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onError(Throwable)', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='io.reactivex.rxjava3.internal.subscribers.DisposableAutoReleaseSubscriber.onComplete()', targetType='io.reactivex.rxjava3.internal.subscribers.BoundedSubscriber'"
      } ]
    } ]
  } ]
}