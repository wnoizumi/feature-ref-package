{
  "executionId" : "42a0609c-5788-402c-a39e-7d2271bf16f1",
  "computingTime" : 10767,
  "maxEvaluations" : 1000,
  "initialPopulationSize" : 50,
  "finalPopulationSize" : 34,
  "algorithm" : "Baseline",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2816492450638797,
    "meanNumConcerns" : 1.7074792243767314,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "78a51ba5-dc8e-468a-9945-3cce19eb5902",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 6.0,
      "LackOfCohesion" : 0.5560791173418378,
      "MetricsIntensity" : 0.0533434964753169,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 6.190610158093485,
    "generation" : 0,
    "numberOfRefactorings" : 6,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.709552733296521,
      "LackOfCohesion" : 0.5560791173418378,
      "MetricsIntensity" : 0.05334349647531691,
      "Density" : 3.274305555555555,
      "baselineType" : "EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    } ]
  }, {
    "solutionId" : "5909495d-6ed7-466b-bc51-f5e8786e9f90",
    "objectives" : {
      "NumberOfConcerns" : 1.0064892926670992,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5526496444859702,
      "MetricsIntensity" : 0.05322996680488591,
      "Density" : 1.0023004777915414
    },
    "euclideanDistance" : 9.12830115645574,
    "generation" : 0,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7100330760749725,
      "LackOfCohesion" : 0.5526496444859702,
      "MetricsIntensity" : 0.05322996680488592,
      "Density" : 3.2720970537261693,
      "baselineType" : "CONCERN_EXTRACT_CLASS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    } ]
  }, {
    "solutionId" : "dbed9a16-14e3-4209-8c73-bae8d350808d",
    "objectives" : {
      "NumberOfConcerns" : 1.0058403634003894,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5531986768843176,
      "MetricsIntensity" : 0.053230000617643554,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 10.115573567078098,
    "generation" : 0,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7089305402425574,
      "LackOfCohesion" : 0.5531986768843176,
      "MetricsIntensity" : 0.05323000061764356,
      "Density" : 3.2696304849884523,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "b050dfed-ac5b-4b70-9ad3-a82ddbcca244",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5542257642356123,
      "MetricsIntensity" : 0.05330709259256972,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 14.082646792710518,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7071152785438501,
      "LackOfCohesion" : 0.5542257642356123,
      "MetricsIntensity" : 0.05330709259256972,
      "Density" : 3.2686308492201044,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "c1d97498-83fe-41ec-8bc4-e471c4d925eb",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5557433882565002,
      "MetricsIntensity" : 0.053275941671420725,
      "Density" : 1.0010617589807114
    },
    "euclideanDistance" : 14.082763347585624,
    "generation" : 0,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.70876999448428,
      "LackOfCohesion" : 0.5557433882565002,
      "MetricsIntensity" : 0.05327594167142072,
      "Density" : 3.268053148469093,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "a1407b09-f4a1-47fa-8175-5b2b3e8d050f",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5542833015825095,
      "MetricsIntensity" : 0.05329017204285068,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 17.06810585582793,
    "generation" : 0,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7086092715231787,
      "LackOfCohesion" : 0.5542833015825095,
      "MetricsIntensity" : 0.05329017204285067,
      "Density" : 3.268208092485549,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "5da5ff81-5c89-406d-95ec-7811ca7896f7",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5534580158830076,
      "MetricsIntensity" : 0.05330082509335749,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 18.06435001237053,
    "generation" : 0,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7076668505239936,
      "LackOfCohesion" : 0.5534580158830076,
      "MetricsIntensity" : 0.053300825093357485,
      "Density" : 3.2686308492201044,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "4b44d5a7-6c30-41e2-823d-97a866a090f9",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5539365618138232,
      "MetricsIntensity" : 0.053290172042850685,
      "Density" : 1.0024774376216599
    },
    "euclideanDistance" : 19.060984927077822,
    "generation" : 0,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706401766004415,
      "LackOfCohesion" : 0.5539365618138232,
      "MetricsIntensity" : 0.053290172042850685,
      "Density" : 3.272674754477182,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "54ad597a-2f88-4bf8-8495-c7740f014edb",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5559536854026804,
      "MetricsIntensity" : 0.05336116230636464,
      "Density" : 0.9996460803397629
    },
    "euclideanDistance" : 20.057859407730707,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7073440088348977,
      "LackOfCohesion" : 0.5559536854026804,
      "MetricsIntensity" : 0.053361162306364646,
      "Density" : 3.2653179190751445,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "d303279c-3675-4387-83a0-a7d35179f493",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5546950005682614,
      "MetricsIntensity" : 0.05328837762564149,
      "Density" : 1.0019465581313043
    },
    "euclideanDistance" : 20.05803661676417,
    "generation" : 0,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7097130242825593,
      "LackOfCohesion" : 0.5546950005682614,
      "MetricsIntensity" : 0.05328837762564149,
      "Density" : 3.2690531177829105,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "4fa5a3fb-7d37-4321-aea0-22e0a7e3ea21",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5519239294061178,
      "MetricsIntensity" : 0.053540909442026545,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 22.05228828085424,
    "generation" : 0,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7058171745152353,
      "LackOfCohesion" : 0.5519239294061178,
      "MetricsIntensity" : 0.053540909442026545,
      "Density" : 3.2762623331398726,
      "baselineType" : "MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "c96e1325-2e5f-4f5c-8515-14ccc009dad1",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5549185277498757,
      "MetricsIntensity" : 0.05331476735748042,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 24.048298216066485,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7090005521811154,
      "LackOfCohesion" : 0.5549185277498757,
      "MetricsIntensity" : 0.053314767357480426,
      "Density" : 3.2687861271676306,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "04da2b35-54b9-4473-97e3-da96d65b9ed5",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5557252740174063,
      "MetricsIntensity" : 0.05332678893760094,
      "Density" : 1.0017695983011856
    },
    "euclideanDistance" : 24.048374629042293,
    "generation" : 0,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7095527332965217,
      "LackOfCohesion" : 0.5557252740174063,
      "MetricsIntensity" : 0.05332678893760094,
      "Density" : 3.272254335260116,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "4932a096-f7b3-4c7c-9736-a74dd0b4473d",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5549465389543573,
      "MetricsIntensity" : 0.053302748573726515,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 25.046254947986395,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706791827719492,
      "LackOfCohesion" : 0.5549465389543573,
      "MetricsIntensity" : 0.053302748573726515,
      "Density" : 3.265471370734528,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "bc94b3eb-9d3c-4a2c-8b42-66e7054606a4",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5552604006101309,
      "MetricsIntensity" : 0.05330808092222255,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 25.04639871734765,
    "generation" : 0,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.709000552181115,
      "LackOfCohesion" : 0.5552604006101309,
      "MetricsIntensity" : 0.05330808092222255,
      "Density" : 3.2705202312138733,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "c6f32247-04d6-4b1e-8211-b6deda1a8ee6",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5554255840106083,
      "MetricsIntensity" : 0.05337367981135087,
      "Density" : 1.0
    },
    "euclideanDistance" : 27.04285291888644,
    "generation" : 0,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.5554255840106083,
      "MetricsIntensity" : 0.05337367981135086,
      "Density" : 3.2683632157316365,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "5976187a-6973-45b1-96a5-f12ec44230ee",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5558046745960167,
      "MetricsIntensity" : 0.05334567464033936,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 28.04137333242931,
    "generation" : 0,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7082872928176793,
      "LackOfCohesion" : 0.5558046745960167,
      "MetricsIntensity" : 0.053345674640339374,
      "Density" : 3.2689415847310577,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "3232bf23-b47f-4488-b175-7025b05d9eff",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5553746765393578,
      "MetricsIntensity" : 0.05330101948703012,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 30.03854880842065,
    "generation" : 0,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.5553746765393578,
      "MetricsIntensity" : 0.053301019487030116,
      "Density" : 3.26604973973395,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "4f6bc90f-f8dd-4589-a591-0f0b012e454e",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5556487279247824,
      "MetricsIntensity" : 0.053324270920007986,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 31.03729467506746,
    "generation" : 0,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7066298342541435,
      "LackOfCohesion" : 0.5556487279247824,
      "MetricsIntensity" : 0.05332427092000799,
      "Density" : 3.2662037037037037,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "85122cda-d6ab-48a5-bf9d-bea1a26a6c12",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5567910993790459,
      "MetricsIntensity" : 0.05328213988962866,
      "Density" : 1.0010617589807114
    },
    "euclideanDistance" : 32.03630343198893,
    "generation" : 0,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7091611479028699,
      "LackOfCohesion" : 0.5567910993790459,
      "MetricsIntensity" : 0.05328213988962866,
      "Density" : 3.268053148469093,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "ee659cca-05a9-4851-a069-3347bb41acd9",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.554491047811494,
      "MetricsIntensity" : 0.05335050368005371,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 34.034000646240024,
    "generation" : 0,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.705524861878453,
      "LackOfCohesion" : 0.554491047811494,
      "MetricsIntensity" : 0.053350503680053694,
      "Density" : 3.267784846732215,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "78968c92-83ce-404b-9fb8-9b3a816fa24c",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5554635165897183,
      "MetricsIntensity" : 0.053400912956936275,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 35.03310800437646,
    "generation" : 0,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7077348066298348,
      "LackOfCohesion" : 0.5554635165897183,
      "MetricsIntensity" : 0.05340091295693627,
      "Density" : 3.270676691729323,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "0d0e2411-30fc-4422-8c6f-3624cae20dbf",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5555374007350201,
      "MetricsIntensity" : 0.05338720518670565,
      "Density" : 1.0
    },
    "euclideanDistance" : 36.032134536765355,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7064676616915424,
      "LackOfCohesion" : 0.5555374007350201,
      "MetricsIntensity" : 0.05338720518670566,
      "Density" : 3.2683632157316365,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "765f9190-a846-4bd6-a973-8f5097bc7b26",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5548336633294695,
      "MetricsIntensity" : 0.05339961244176112,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 36.032184379865235,
    "generation" : 0,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7077348066298346,
      "LackOfCohesion" : 0.5548336633294695,
      "MetricsIntensity" : 0.05339961244176113,
      "Density" : 3.2712550607287447,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "04b145a6-1cec-4807-b6e0-1846c8704e6f",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5548300298725984,
      "MetricsIntensity" : 0.05333677792120977,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 37.03121312773521,
    "generation" : 0,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7055248618784533,
      "LackOfCohesion" : 0.5548300298725984,
      "MetricsIntensity" : 0.05333677792120977,
      "Density" : 3.2669368847712787,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "e7aeedc6-cb51-4514-9281-dd98366f6609",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5580993040752008,
      "MetricsIntensity" : 0.053407689002611634,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 44.02630474430432,
    "generation" : 0,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7049723756906074,
      "LackOfCohesion" : 0.5580993040752008,
      "MetricsIntensity" : 0.053407689002611634,
      "Density" : 3.26604973973395,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "62a11402-6bd9-4d9b-9514-2fc22f6ab313",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5554717733872693,
      "MetricsIntensity" : 0.0534043249289927,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 45.025632359229746,
    "generation" : 0,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704092920353982,
      "LackOfCohesion" : 0.5554717733872693,
      "MetricsIntensity" : 0.05340432492899269,
      "Density" : 3.2669368847712796,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "cd602931-6477-4050-9b0b-fe1836725002",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 47.0,
      "LackOfCohesion" : 0.5567234055140771,
      "MetricsIntensity" : 0.05337071862896227,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 47.024519427538614,
    "generation" : 0,
    "numberOfRefactorings" : 47,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7031509121061363,
      "LackOfCohesion" : 0.5567234055140771,
      "MetricsIntensity" : 0.05337071862896227,
      "Density" : 3.2611464968152872,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "b91b22ad-665a-412d-a36f-36f87f38283e",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 48.0,
      "LackOfCohesion" : 0.5582203564482682,
      "MetricsIntensity" : 0.05342752185510692,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 48.0241048160849,
    "generation" : 0,
    "numberOfRefactorings" : 48,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706305309734513,
      "LackOfCohesion" : 0.5582203564482682,
      "MetricsIntensity" : 0.053427521855106914,
      "Density" : 3.2654713707345286,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "4dfdb8a2-6a97-4f58-b6f2-d1968cc23e1c",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5581891717412486,
      "MetricsIntensity" : 0.05339548164669073,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 57.0202575714489,
    "generation" : 0,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051991150442474,
      "LackOfCohesion" : 0.5581891717412486,
      "MetricsIntensity" : 0.05339548164669074,
      "Density" : 3.263462651997683,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "6463dd26-bc6e-4942-8ce1-8598106a1379",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5583454827227068,
      "MetricsIntensity" : 0.05346775387734478,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 57.0202783703874,
    "generation" : 0,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7079646017699115,
      "LackOfCohesion" : 0.5583454827227068,
      "MetricsIntensity" : 0.05346775387734477,
      "Density" : 3.2579525737420476,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureCredentialsExpiredEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.AccessDeniedHandlerImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H)', targetType='org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H)', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.web.access.ExceptionTranslationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "cc116989-9dcd-4aea-bedd-7cd82f973038",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5579482314892571,
      "MetricsIntensity" : 0.05338878207501783,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 60.01921822260591,
    "generation" : 0,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7029867256637168,
      "LackOfCohesion" : 0.5579482314892571,
      "MetricsIntensity" : 0.05338878207501783,
      "Density" : 3.264774044032445,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.oauth2.client.RefreshTokenOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.switchuser.AuthenticationSwitchUserEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.web.jackson2.DefaultCsrfTokenMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.securityMetadataSource], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setSecurityMetadataSource(FilterInvocationSecurityMetadataSource), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecurityMetadataSource()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "8787e3b7-4ab5-4a93-a60f-baba624860ce",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5590120066474304,
      "MetricsIntensity" : 0.053545493196839086,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 63.018319427479916,
    "generation" : 0,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.703765227021041,
      "LackOfCohesion" : 0.5590120066474304,
      "MetricsIntensity" : 0.053545493196839086,
      "Density" : 3.26635784597568,
      "baselineType" : "RANDOM_SELECTION"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.AuthenticationManagerDelegator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils.VerifierPartial'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.IntItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.web.session.SimpleRedirectSessionInformationExpiredStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.saml2.provider.service.authentication.logout.OpenSamlVerificationUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.ldap.authentication.LdapAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.oidc.authentication.DefaultOidcIdTokenValidatorFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.HttpSecurityBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.context.support.SecurityWebApplicationContextUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.csrf.DefaultCsrfToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.method.InterceptMethodsBeanDefinitionDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.messaging.util.matcher.SimpDestinationMessageMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.core.context.ReactiveSecurityContextHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.config.core.GrantedAuthorityDefaults'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.rsocket.util.matcher.RoutePayloadExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.authentication.AuthenticationTrustResolverImpl'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.core.http.converter.OAuth2ErrorHttpMessageConverter.OAuth2ErrorConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.web.access.DelegatingAccessDeniedHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.access.intercept.AuthorizationFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    } ]
  }, {
    "solutionId" : "697e3d00-1992-45bb-bb27-d3732d52bc3d",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 68.0,
      "LackOfCohesion" : 0.559443714811593,
      "MetricsIntensity" : 0.05353983065383271,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 68.01692656354946,
    "generation" : 0,
    "numberOfRefactorings" : 68,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7019390581717448,
      "LackOfCohesion" : 0.559443714811593,
      "MetricsIntensity" : 0.0535398306538327,
      "Density" : 3.2700348432055746,
      "baselineType" : "CONCERN_MOVE_METHODS"
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.web.method.annotation.OAuth2AuthorizedClientArgumentResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.authentication.AnonymousAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.web.server.authentication.RedirectServerAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.web.header.writers.HpkpHeaderWriter.SecureRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.web.server.authentication.ServerAuthenticationEntryPointFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer.InitializeUserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.security.web.authentication.preauth.RequestAttributeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.messaging.util.matcher.AbstractMessageMatcherComposite'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.messaging.util.matcher.AbstractMessageMatcherComposite'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.client.jackson2.ClientRegistrationDeserializer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.client.jackson2.ClientRegistrationDeserializer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.core.context.GlobalSecurityContextHolderStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.oauth2.core.converter.ObjectToInstantConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='trang.TrangPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.acls.AclPermissionEvaluator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration.ProviderDetails'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration.ProviderDetails'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.config.annotation.web.configuration.SecurityReactorContextConfiguration.SecurityReactorContextSubscriberRegistrar'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.oauth2.core.endpoint.DefaultOAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.oauth2.core.endpoint.DefaultOAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.oauth2.core.endpoint.DefaultOAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.oauth2.core.endpoint.DefaultOAuth2AccessTokenResponseMapConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.task.DelegatingSecurityContextTaskExecutor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.convention.versions.UpdateDependenciesExtension.GitHub'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.core.userdetails.memory.UserAttribute'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.config.http.HttpConfigurationBuilder.RoleVoterBeanFactory'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.access.vote.AbstractAccessDecisionManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.config.annotation.rsocket.RSocketSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.oauth2.server.resource.introspection.OAuth2IntrospectionAuthenticatedPrincipal'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.endpoint.AbstractWebClientReactiveOAuth2AccessTokenResponseClient'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.web.server.WebFilterExchange'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.core.authority.mapping.SimpleAttributes2GrantedAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.web.authentication.ForwardAuthenticationSuccessHandler'"
      } ]
    } ]
  } ]
}