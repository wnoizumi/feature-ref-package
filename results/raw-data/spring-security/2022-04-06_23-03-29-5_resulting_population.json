{
  "executionId" : "1550b0f1-52fb-422d-b4e2-6c00c2eb9899",
  "computingTime" : 3688407,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 41,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.058064516129032,
    "meanNumConcerns" : 1.5551246537396124,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "74acbc62-cdcb-48a1-929d-b4ae0125a718",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5515763242762467,
      "MetricsIntensity" : 0.05346047658359595,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 20.057257709652053,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619465,
      "LackOfCohesion" : 0.5515763242762467,
      "MetricsIntensity" : 0.05346047658359595,
      "Density" : 3.041031652989449
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "6de86868-1d65-4310-8a3a-75761181b898",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5515763242762467,
      "MetricsIntensity" : 0.05346047658359595,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 20.057257709652053,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549778761061947,
      "LackOfCohesion" : 0.5515763242762467,
      "MetricsIntensity" : 0.053460476583595956,
      "Density" : 3.041031652989449
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "24d1e7cf-1875-4df3-bb1d-e5dae7b2b424",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5515763242762468,
      "MetricsIntensity" : 0.05346047658359594,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 20.057257709652053,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619467,
      "LackOfCohesion" : 0.5515763242762468,
      "MetricsIntensity" : 0.05346047658359594,
      "Density" : 3.0410316529894486
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "aee9197a-0169-47f5-ad47-badee78870fe",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5519240573842942,
      "MetricsIntensity" : 0.05345602162545028,
      "Density" : 0.995205216724204
    },
    "euclideanDistance" : 20.057294512161914,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5503318584070795,
      "LackOfCohesion" : 0.5519240573842942,
      "MetricsIntensity" : 0.05345602162545028,
      "Density" : 3.0416178194607277
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "6ed8a067-7576-4d1b-9558-ad6056bbf281",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.551915857769022,
      "MetricsIntensity" : 0.05343097137639969,
      "Density" : 0.9953970080552359
    },
    "euclideanDistance" : 20.057356974658124,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5519911504424777,
      "LackOfCohesion" : 0.551915857769022,
      "MetricsIntensity" : 0.05343097137639969,
      "Density" : 3.0422039859320043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "8ee600d0-c367-4cab-b44a-4086dbe3ec71",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5524306699040815,
      "MetricsIntensity" : 0.05342876070848969,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 20.057398418912282,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5525442477876104,
      "LackOfCohesion" : 0.5524306699040815,
      "MetricsIntensity" : 0.053428760708489696,
      "Density" : 3.041007615700058
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "265a0eca-febf-453e-907e-35b30538efca",
    "objectives" : {
      "NumberOfConcerns" : 1.0003562522265763,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5529874137799304,
      "MetricsIntensity" : 0.05339353227023009,
      "Density" : 0.995205216724204
    },
    "euclideanDistance" : 20.057412395517304,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.553097345132743,
      "LackOfCohesion" : 0.5529874137799304,
      "MetricsIntensity" : 0.05339353227023009,
      "Density" : 3.0398359695371995
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "5b8e4f88-4a11-4d29-a871-d0cd8b7e7260",
    "objectives" : {
      "NumberOfConcerns" : 1.0003562522265763,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5529874137799304,
      "MetricsIntensity" : 0.05339353227023009,
      "Density" : 0.995205216724204
    },
    "euclideanDistance" : 20.057412395517304,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5530973451327434,
      "LackOfCohesion" : 0.5529874137799304,
      "MetricsIntensity" : 0.05339353227023009,
      "Density" : 3.039835969537199
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "aad5da55-71ea-4c91-99ac-c5e75ed87907",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5515602358023981,
      "MetricsIntensity" : 0.053457323843985174,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 21.054521073587686,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5492256637168138,
      "LackOfCohesion" : 0.5515602358023981,
      "MetricsIntensity" : 0.053457323843985174,
      "Density" : 3.041031652989449
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ede1b718-6346-4882-ae8c-83e6d93f8312",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5515602358023979,
      "MetricsIntensity" : 0.053465377037556175,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 21.054521094036243,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5492256637168138,
      "LackOfCohesion" : 0.5515602358023979,
      "MetricsIntensity" : 0.05346537703755617,
      "Density" : 3.041031652989451
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "549dc55d-c761-416c-905d-8c155bba51f4",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5518443237583918,
      "MetricsIntensity" : 0.053452868885839507,
      "Density" : 0.9948216340621404
    },
    "euclideanDistance" : 21.054553224024783,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5503318584070793,
      "LackOfCohesion" : 0.5518443237583918,
      "MetricsIntensity" : 0.053452868885839507,
      "Density" : 3.040445486518171
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "f564e0c4-2f08-4b7b-ad24-30441ee3b991",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5515069619279062,
      "MetricsIntensity" : 0.05345201216311919,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 21.05458064452865,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550331858407079,
      "LackOfCohesion" : 0.5515069619279062,
      "MetricsIntensity" : 0.05345201216311919,
      "Density" : 3.0427901524032817
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "f7eab277-cdd9-4106-8c96-51bc2e40d46d",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.551505731622157,
      "MetricsIntensity" : 0.053472453890517635,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 21.054597563517618,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.551505731622157,
      "MetricsIntensity" : 0.053472453890517635,
      "Density" : 3.042790152403283
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ff2a1346-f477-47ea-9717-b4471ec41e04",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5515057316221571,
      "MetricsIntensity" : 0.05347245389051762,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 21.054597563517618,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550884955752212,
      "LackOfCohesion" : 0.5515057316221571,
      "MetricsIntensity" : 0.053472453890517614,
      "Density" : 3.0427901524032817
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "83c59e31-f41b-4bc5-af5c-c6151e68f062",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5515538080454789,
      "MetricsIntensity" : 0.05344879120898237,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 21.054598762807043,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.5515538080454789,
      "MetricsIntensity" : 0.05344879120898237,
      "Density" : 3.0427901524032825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "2cac4444-bc33-47f1-aa49-628ff03ff933",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5524070215012581,
      "MetricsIntensity" : 0.053413151220525444,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 21.054610746760343,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5524070215012581,
      "MetricsIntensity" : 0.053413151220525444,
      "Density" : 3.0392501464557697
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.userDetailsService', targetTypeName='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "ca6bf0c9-ac6e-44b3-9749-7a2214f7d122",
    "objectives" : {
      "NumberOfConcerns" : 0.9996437477734236,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5518378960014726,
      "MetricsIntensity" : 0.05344433625083667,
      "Density" : 0.9953970080552359
    },
    "euclideanDistance" : 21.0546309439669,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551991150442478,
      "LackOfCohesion" : 0.5518378960014726,
      "MetricsIntensity" : 0.05344433625083668,
      "Density" : 3.0422039859320043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "7498b173-81e7-43b5-8c27-020cb9a87091",
    "objectives" : {
      "NumberOfConcerns" : 1.0003562522265763,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5521993787303424,
      "MetricsIntensity" : 0.05343002898140734,
      "Density" : 0.995205216724204
    },
    "euclideanDistance" : 21.05466515945174,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5530973451327428,
      "LackOfCohesion" : 0.5521993787303424,
      "MetricsIntensity" : 0.053430028981407335,
      "Density" : 3.041617819460727
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "a1d5cdbb-45d0-464b-9c67-03bf4c1eb368",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5514887708488112,
      "MetricsIntensity" : 0.053465377037556196,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 22.052047063025036,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549225663716814,
      "LackOfCohesion" : 0.5514887708488112,
      "MetricsIntensity" : 0.053465377037556196,
      "Density" : 3.0410316529894508
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "4ddd47f7-288d-4d34-bd93-2c7998f17364",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5515439565130341,
      "MetricsIntensity" : 0.05345189254522994,
      "Density" : 0.9953970080552359
    },
    "euclideanDistance" : 22.05208184492007,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549778761061948,
      "LackOfCohesion" : 0.5515439565130341,
      "MetricsIntensity" : 0.05345189254522994,
      "Density" : 3.0422039859320043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "972628bb-ed30-403d-bb00-82f10bc0637b",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5515338214832528,
      "MetricsIntensity" : 0.05345994573880094,
      "Density" : 0.9953970080552359
    },
    "euclideanDistance" : 22.052097740090883,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5503318584070793,
      "LackOfCohesion" : 0.5515338214832528,
      "MetricsIntensity" : 0.053459945738800946,
      "Density" : 3.0422039859320043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "22b6249e-6a79-4a6b-9b97-49c5ee3e43f1",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5514896431483083,
      "MetricsIntensity" : 0.05346174485651361,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 22.052105297566584,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550331858407079,
      "LackOfCohesion" : 0.5514896431483083,
      "MetricsIntensity" : 0.05346174485651361,
      "Density" : 3.0427901524032825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "4328ab6f-83bb-46a8-bca6-a4cc92211b9b",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5514823430918923,
      "MetricsIntensity" : 0.05345684440255336,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 22.05212123799659,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550884955752213,
      "LackOfCohesion" : 0.5514823430918923,
      "MetricsIntensity" : 0.05345684440255336,
      "Density" : 3.0427901524032825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "18896563-e46a-4ffd-aefb-97bcac13b1ca",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5514662546180434,
      "MetricsIntensity" : 0.05346174485651362,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 23.0498443000912,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5503318584070795,
      "LackOfCohesion" : 0.5514662546180434,
      "MetricsIntensity" : 0.05346174485651362,
      "Density" : 3.042790152403282
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "be2e3d84-391c-4dd7-a745-5a5a6868ff5f",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5514662546180434,
      "MetricsIntensity" : 0.05346174485651362,
      "Density" : 0.9955887993862678
    },
    "euclideanDistance" : 23.0498443000912,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5503318584070789,
      "LackOfCohesion" : 0.5514662546180434,
      "MetricsIntensity" : 0.05346174485651363,
      "Density" : 3.0427901524032825
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "8b61503c-db98-4682-ac49-501fdac4892e",
    "objectives" : {
      "NumberOfConcerns" : 0.9992874955468471,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5518085686189154,
      "MetricsIntensity" : 0.05344253713312401,
      "Density" : 0.9950134253931723
    },
    "euclideanDistance" : 23.049858481488457,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.551438053097345,
      "LackOfCohesion" : 0.5518085686189154,
      "MetricsIntensity" : 0.05344253713312401,
      "Density" : 3.0410316529894508
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "2b8cf296-c6f1-428f-aab0-863ef0b83002",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5514537807352357,
      "MetricsIntensity" : 0.05345994573880091,
      "Density" : 0.9953970080552359
    },
    "euclideanDistance" : 24.047748649142946,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619465,
      "LackOfCohesion" : 0.5514537807352357,
      "MetricsIntensity" : 0.053459945738800904,
      "Density" : 3.0422039859320043
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.access.expression.SecurityExpressionRoot'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getUserDetailsService()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.getAuthenticationManager()', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(ObjectIdentity)', targetType='org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsAwareConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.clearCache()', targetType='org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.evictFromCache(Serializable)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.LobCreatorArgumentPreparedStatementSetter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(ObjectIdentity)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "e449061a-1195-430d-b67d-2f321bf75a8b",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5530107999537592,
      "MetricsIntensity" : 0.05344490071795734,
      "Density" : 0.9936708860759493
    },
    "euclideanDistance" : 31.03695377743664,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619467,
      "LackOfCohesion" : 0.5530107999537592,
      "MetricsIntensity" : 0.05344490071795734,
      "Density" : 3.0369284876905045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "bca51bf8-2161-450e-8430-1c78344e2144",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5533299423554167,
      "MetricsIntensity" : 0.053441354209186796,
      "Density" : 0.9936708860759493
    },
    "euclideanDistance" : 31.03695945939143,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619467,
      "LackOfCohesion" : 0.5533299423554167,
      "MetricsIntensity" : 0.0534413542091868,
      "Density" : 3.0369284876905045
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "c976603c-da7e-4a62-8818-0b04d7a48c5c",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5531783657794785,
      "MetricsIntensity" : 0.05341810307784888,
      "Density" : 0.9938626774069812
    },
    "euclideanDistance" : 31.03696285834474,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549778761061947,
      "LackOfCohesion" : 0.5531783657794785,
      "MetricsIntensity" : 0.05341810307784889,
      "Density" : 3.0375146541617815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "11766429-3c4a-475e-969f-04b588b90d70",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5529810091086446,
      "MetricsIntensity" : 0.05344575776396924,
      "Density" : 0.9940544687380131
    },
    "euclideanDistance" : 31.03696553116785,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619467,
      "LackOfCohesion" : 0.5529810091086446,
      "MetricsIntensity" : 0.05344575776396924,
      "Density" : 3.0381008206330598
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "1f4f1dc0-c8e9-4515-8c21-d9040e9ff5b6",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5529810091086445,
      "MetricsIntensity" : 0.05344575776396925,
      "Density" : 0.9940544687380131
    },
    "euclideanDistance" : 31.03696553116785,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619467,
      "LackOfCohesion" : 0.5529810091086445,
      "MetricsIntensity" : 0.05344575776396925,
      "Density" : 3.038100820633059
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "118fb0eb-e33e-4792-a143-38811779dea8",
    "objectives" : {
      "NumberOfConcerns" : 0.9978624866405416,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5530733772658457,
      "MetricsIntensity" : 0.053444900717957315,
      "Density" : 0.9934790947449176
    },
    "euclideanDistance" : 32.03578431647948,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549225663716814,
      "LackOfCohesion" : 0.5530733772658457,
      "MetricsIntensity" : 0.05344490071795731,
      "Density" : 3.0363423212192266
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "8858af88-bd58-42b0-adec-a772a969bf02",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5529393350001729,
      "MetricsIntensity" : 0.053444900717957364,
      "Density" : 0.9936708860759493
    },
    "euclideanDistance" : 32.0357990495955,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619465,
      "LackOfCohesion" : 0.5529393350001729,
      "MetricsIntensity" : 0.05344490071795736,
      "Density" : 3.036928487690504
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "065fc724-aaf5-4366-b248-7b7bacb6ed18",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5533073570676055,
      "MetricsIntensity" : 0.05342704693975744,
      "Density" : 0.9936708860759493
    },
    "euclideanDistance" : 32.03580537400598,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.549778761061947,
      "LackOfCohesion" : 0.5533073570676055,
      "MetricsIntensity" : 0.053427046939757444,
      "Density" : 3.036928487690504
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9a8095c0-2032-4317-9ecd-86443454de83",
    "objectives" : {
      "NumberOfConcerns" : 0.9982187388671179,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5529393350001727,
      "MetricsIntensity" : 0.05346361154216913,
      "Density" : 0.9940544687380131
    },
    "euclideanDistance" : 32.03581098089126,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5497787610619467,
      "LackOfCohesion" : 0.5529393350001727,
      "MetricsIntensity" : 0.05346361154216914,
      "Density" : 3.0381008206330598
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "29492cf1-8040-42ce-be1b-b71f2375e92a",
    "objectives" : {
      "NumberOfConcerns" : 0.9985749910936943,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5529393350001727,
      "MetricsIntensity" : 0.05344490071795733,
      "Density" : 0.9938626774069812
    },
    "euclideanDistance" : 32.03581610166945,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5503318584070795,
      "LackOfCohesion" : 0.5529393350001727,
      "MetricsIntensity" : 0.053444900717957336,
      "Density" : 3.0375146541617815
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "9289c728-66a6-4c56-800f-f96d1d95e49c",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5519549177583881,
      "MetricsIntensity" : 0.053440445759811675,
      "Density" : 0.9942462600690449
    },
    "euclideanDistance" : 34.033717095948006,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550884955752212,
      "LackOfCohesion" : 0.5519549177583881,
      "MetricsIntensity" : 0.05344044575981167,
      "Density" : 3.038686987104337
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "989eb5c4-35c0-4f45-82f5-93ad712c43d2",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5519541145159346,
      "MetricsIntensity" : 0.053459207987386674,
      "Density" : 0.9942462600690449
    },
    "euclideanDistance" : 34.03371711238713,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.550884955752212,
      "LackOfCohesion" : 0.5519541145159346,
      "MetricsIntensity" : 0.05345920798738668,
      "Density" : 3.0386869871043385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "816ced86-d757-4556-b0aa-b36897189ff8",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5518094836247418,
      "MetricsIntensity" : 0.05343595685604875,
      "Density" : 0.9944380514000767
    },
    "euclideanDistance" : 34.03372033402544,
    "generation" : 1,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522117,
      "LackOfCohesion" : 0.5518094836247418,
      "MetricsIntensity" : 0.05343595685604876,
      "Density" : 3.039273153575616
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  }, {
    "solutionId" : "639dba72-8745-4b38-be3a-71e20b10d518",
    "objectives" : {
      "NumberOfConcerns" : 0.9989312433202707,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5519315292281234,
      "MetricsIntensity" : 0.05344490071795732,
      "Density" : 0.9942462600690449
    },
    "euclideanDistance" : 35.03275430257963,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.5508849557522122,
      "LackOfCohesion" : 0.5519315292281234,
      "MetricsIntensity" : 0.05344490071795733,
      "Density" : 3.0386869871043385
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getServletPath()', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setServletPath(String)', targetType='org.springframework.security.cas.jackson2.AssertionImplMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.LogoutRequestConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.notMatchMethodOrServletPath(HttpServletRequest)', targetType='org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsService(UserDetailsService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.doAfterPropertiesSet()', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setUserDetailsPasswordService(UserDetailsPasswordService)', targetType='org.springframework.security.config.annotation.web.builders.FilterOrderRegistration'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.jwkSetUri(String)', targetType='org.springframework.security.oauth2.client.DelegatingOAuth2AuthorizedClientProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.authenticationManager(ReactiveAuthenticationManager)', targetType='org.springframework.security.config.annotation.rsocket.SecuritySocketAcceptorInterceptorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.OAuth2ResourceServerSpec.JwtSpec.configure(ServerHttpSecurity)', targetType='org.springframework.security.web.server.authentication.AuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createTarget()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.createUserDetails()', targetType='org.springframework.security.acls.afterinvocation.ArrayFilterer.ArrayFiltererIterator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setPassword(String)', targetType='org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setCredentialsNonExpired(boolean)', targetType='org.springframework.security.web.header.HeaderWriterFilter.HeaderWriterRequest'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setUsername(String)', targetType='org.springframework.security.ldap.userdetails.LdapUserDetailsService.NullLdapAuthoritiesPopulator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setAccountNonLocked(boolean)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerReactiveAuthenticationManagerResolver.JwtClaimIssuerConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setDn(Name)', targetType='org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.LdapUserDetailsImpl.Essence.setEnabled(boolean)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.web.server.ServerHttpSecurity.LogoutSpec.disable()', targetType='org.springframework.security.config.web.server.ServerHttpSecurity'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.clientRegistration], extractedMethods=[org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getClientRegistration(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAdditionalParameters(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getAuthorizationExchange(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getPrincipal(), org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken.getRefreshToken()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.EhCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.EhCacheBasedAclCache.getFromCache(Serializable)', targetType='org.springframework.security.crypto.encrypt.AesBytesEncryptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.prepost.PostInvocationAdviceProvider",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.access.prepost.PostInvocationAdviceProvider.supports(ConfigAttribute), org.springframework.security.access.prepost.PostInvocationAdviceProvider.decide(Authentication, Object, Collection<ConfigAttribute>, Object), org.springframework.security.access.prepost.PostInvocationAdviceProvider.findPostInvocationAttribute(Collection<ConfigAttribute>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.AbstractAuthenticationToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.authentication.AbstractAuthenticationToken.details, org.springframework.security.authentication.AbstractAuthenticationToken.authorities], extractedMethods=[org.springframework.security.authentication.AbstractAuthenticationToken.hashCode(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseSecret(Object), org.springframework.security.authentication.AbstractAuthenticationToken.setDetails(Object), org.springframework.security.authentication.AbstractAuthenticationToken.getAuthorities(), org.springframework.security.authentication.AbstractAuthenticationToken.getDetails(), org.springframework.security.authentication.AbstractAuthenticationToken.eraseCredentials(), org.springframework.security.authentication.AbstractAuthenticationToken.toString()]"
      } ]
    } ]
  } ]
}