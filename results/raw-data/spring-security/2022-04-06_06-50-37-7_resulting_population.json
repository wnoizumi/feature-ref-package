{
  "executionId" : "68f9475c-a220-4c3e-b4e4-9d8f4c5b59f3",
  "computingTime" : 3798490,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 39,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1957274826789845,
    "meanNumConcerns" : 1.6542936288088643,
    "meanMetricsIntensity" : 0.053565974990151706,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "7ad591bf-6b4e-462d-aac6-e01a1f786087",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5535941081876671,
      "MetricsIntensity" : 0.053387323110910864,
      "Density" : 0.9974706413730804
    },
    "euclideanDistance" : 10.114490851604115,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649530127142067,
      "LackOfCohesion" : 0.5535941081876671,
      "MetricsIntensity" : 0.05338732311091087,
      "Density" : 3.1821325648414986
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.authentication], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication(), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "946afbd7-307b-4162-aa67-64f8e1861e88",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5535811230634256,
      "MetricsIntensity" : 0.05339042241748811,
      "Density" : 0.9980126467931346
    },
    "euclideanDistance" : 10.114543623123597,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.649530127142067,
      "LackOfCohesion" : 0.5535811230634256,
      "MetricsIntensity" : 0.05339042241748811,
      "Density" : 3.1838616714697396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.authentication], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication(), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "e327d16f-6085-44f4-839a-8355baffc0d9",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5536122873616053,
      "MetricsIntensity" : 0.053381073128034105,
      "Density" : 0.9980126467931346
    },
    "euclideanDistance" : 10.1145783731521,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6500829187396353,
      "LackOfCohesion" : 0.5536122873616053,
      "MetricsIntensity" : 0.053381073128034105,
      "Density" : 3.1838616714697396
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.authentication], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication(), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "874cee17-2dc9-411e-90a6-a15bb83c9849",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.553430495622222,
      "MetricsIntensity" : 0.053390422417488106,
      "Density" : 0.9967479674796748
    },
    "euclideanDistance" : 11.104081861805208,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6489773355444994,
      "LackOfCohesion" : 0.553430495622222,
      "MetricsIntensity" : 0.05339042241748811,
      "Density" : 3.179827089337176
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.SecurityExpressionRoot.roleHierarchy, org.springframework.security.access.expression.SecurityExpressionRoot.roles, org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix, org.springframework.security.access.expression.SecurityExpressionRoot.trustResolver, org.springframework.security.access.expression.SecurityExpressionRoot.authentication], extractedMethods=[org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String), org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String), org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String), org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy), org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String), org.springframework.security.access.expression.SecurityExpressionRoot.permitAll(), org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal(), org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet(), org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated(), org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication(), org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...), org.springframework.security.access.expression.SecurityExpressionRoot.denyAll(), org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item)', targetType='s101.S101Install'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()', targetType='org.springframework.security.config.http.OAuth2ClientBeanDefinitionParser'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)', targetType='org.springframework.security.config.annotation.web.configurers.saml2.Saml2LogoutConfigurer.NoopLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "d75088c2-baf5-445e-a33c-eb1376db1743",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5537914187499942,
      "MetricsIntensity" : 0.05343646681188705,
      "Density" : 0.9967479674796748
    },
    "euclideanDistance" : 19.06038729541475,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542286,
      "LackOfCohesion" : 0.5537914187499942,
      "MetricsIntensity" : 0.05343646681188704,
      "Density" : 3.1798270893371767
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "e4a123c4-4c17-4730-ac31-7b354ff40cf1",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5537586962369052,
      "MetricsIntensity" : 0.05343646681188703,
      "Density" : 0.9969286359530262
    },
    "euclideanDistance" : 19.060413325482653,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5537586962369052,
      "MetricsIntensity" : 0.05343646681188703,
      "Density" : 3.1804034582132568
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "3638264d-05ee-4939-8fba-d29a5c9c27c3",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5537405170629667,
      "MetricsIntensity" : 0.05344141542846616,
      "Density" : 0.9971093044263776
    },
    "euclideanDistance" : 19.060457343283336,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.648424543946933,
      "LackOfCohesion" : 0.5537405170629667,
      "MetricsIntensity" : 0.05344141542846616,
      "Density" : 3.180979827089337
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "b1da429a-527a-4f3b-b1bb-8b9e073f2822",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5537556451867337,
      "MetricsIntensity" : 0.053436466811887025,
      "Density" : 0.9971093044263776
    },
    "euclideanDistance" : 20.057410426546728,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5537556451867337,
      "MetricsIntensity" : 0.053436466811887025,
      "Density" : 3.180979827089337
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "18fdf29a-aa97-430c-b3af-7a6a73f8ae95",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5537971322046603,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 0.9971093044263776
    },
    "euclideanDistance" : 20.057411548265165,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5537971322046603,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 3.1809798270893364
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "6c3ac706-c918-49d3-a269-9ab10e5b3052",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5538071316583771,
      "MetricsIntensity" : 0.05343646681188703,
      "Density" : 0.9967479674796748
    },
    "euclideanDistance" : 21.054652247301608,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542284,
      "LackOfCohesion" : 0.5538071316583771,
      "MetricsIntensity" : 0.05343646681188704,
      "Density" : 3.179827089337176
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "112b1cb6-0971-47f4-80a2-6cd204b4c907",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5537301943432201,
      "MetricsIntensity" : 0.053436466811887025,
      "Density" : 0.9971093044263776
    },
    "euclideanDistance" : 21.054683204277772,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5537301943432201,
      "MetricsIntensity" : 0.053436466811887025,
      "Density" : 3.180979827089337
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "44b79cad-0fb8-4252-97f2-1c0f50948a3f",
    "objectives" : {
      "NumberOfConcerns" : 0.9983255190890824,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5537616128955809,
      "MetricsIntensity" : 0.05342756272669275,
      "Density" : 0.997289972899729
    },
    "euclideanDistance" : 21.054708441592975,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6478717523493644,
      "LackOfCohesion" : 0.5537616128955809,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 3.181556195965418
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "e80ac636-346c-441f-9985-bd74f4c94e5b",
    "objectives" : {
      "NumberOfConcerns" : 0.9986604152712659,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5540534585571911,
      "MetricsIntensity" : 0.05342045658177808,
      "Density" : 0.9976513098464318
    },
    "euclideanDistance" : 21.054749101834215,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6484245439469332,
      "LackOfCohesion" : 0.5540534585571911,
      "MetricsIntensity" : 0.05342045658177808,
      "Density" : 3.1808755760368657
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "f4e2e5e1-99a9-4a79-ba21-31bbcced033c",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5540576737282911,
      "MetricsIntensity" : 0.05342131274381599,
      "Density" : 0.9958446251129178
    },
    "euclideanDistance" : 22.052109223680876,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6456605859590936,
      "LackOfCohesion" : 0.5540576737282911,
      "MetricsIntensity" : 0.05342131274381598,
      "Density" : 3.178777393310265
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "0cd23e8c-1bdc-4d9c-a4c9-0fe819cf9dab",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.553755380035945,
      "MetricsIntensity" : 0.05342756272669275,
      "Density" : 0.9962059620596206
    },
    "euclideanDistance" : 22.052117966252883,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6456605859590943,
      "LackOfCohesion" : 0.553755380035945,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 3.1762672811059898
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "07ac4709-f7cb-4783-bd5b-1277daa60cb4",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5537738897403186,
      "MetricsIntensity" : 0.05342756272669274,
      "Density" : 0.996386630532972
    },
    "euclideanDistance" : 22.05214173684624,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.646213377556661,
      "LackOfCohesion" : 0.5537738897403186,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 3.176843317972351
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "bee716cc-b37f-47f1-944a-7a4682bef1c7",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5534544556839736,
      "MetricsIntensity" : 0.05342131274381597,
      "Density" : 0.9967479674796748
    },
    "euclideanDistance" : 22.0521651801113,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542292,
      "LackOfCohesion" : 0.5534544556839736,
      "MetricsIntensity" : 0.05342131274381597,
      "Density" : 3.177995391705069
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "f7f4c51e-0fcb-4fc5-a080-a3e384265641",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5537390187794005,
      "MetricsIntensity" : 0.05343251134327188,
      "Density" : 0.996386630532972
    },
    "euclideanDistance" : 22.052171175081654,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473189607517966,
      "LackOfCohesion" : 0.5537390187794005,
      "MetricsIntensity" : 0.053432511343271885,
      "Density" : 3.1768433179723505
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ea006fb-73e1-4eed-b0d2-c235f0f0beb7",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5537234366303104,
      "MetricsIntensity" : 0.053418658641498466,
      "Density" : 0.9967479674796748
    },
    "euclideanDistance" : 22.052171926073544,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542284,
      "LackOfCohesion" : 0.5537234366303104,
      "MetricsIntensity" : 0.053418658641498466,
      "Density" : 3.177995391705069
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "81da4c04-64ca-4b9f-ae61-0c49ac571495",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5573709424160797,
      "MetricsIntensity" : 0.053312497785157544,
      "Density" : 0.997289972899729
    },
    "euclideanDistance" : 22.05236388108561,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467991169977931,
      "LackOfCohesion" : 0.5573709424160797,
      "MetricsIntensity" : 0.053312497785157544,
      "Density" : 3.176064441887226
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.ComparableVersion.BigIntegerItem.getType(), org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item), org.springframework.security.core.ComparableVersion.BigIntegerItem.equals(Object), org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode], extractedMethods=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getPostalCode(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getStreetAddress(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getFormatted()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.util.matcher.AndRequestMatcher.requestMatchers], extractedMethods=[org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.util.matcher.AndRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "e1a77b02-a7e1-469e-a75e-a147291e409e",
    "objectives" : {
      "NumberOfConcerns" : 0.9996651038178165,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.557331285795757,
      "MetricsIntensity" : 0.05330805446635385,
      "Density" : 0.9976513098464318
    },
    "euclideanDistance" : 22.052394390782766,
    "generation" : 1,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6473509933774837,
      "LackOfCohesion" : 0.557331285795757,
      "MetricsIntensity" : 0.05330805446635386,
      "Density" : 3.1772151898734178
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.ComparableVersion.BigIntegerItem.getType(), org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item), org.springframework.security.core.ComparableVersion.BigIntegerItem.equals(Object), org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode], extractedMethods=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getPostalCode(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getStreetAddress(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getFormatted()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.util.matcher.AndRequestMatcher.requestMatchers], extractedMethods=[org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.util.matcher.AndRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "731bae4b-d91d-4c83-b665-1ae24cdfc553",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5547049231484463,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 0.995483288166215
    },
    "euclideanDistance" : 23.049834106239114,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6451077943615255,
      "LackOfCohesion" : 0.5547049231484463,
      "MetricsIntensity" : 0.05342756272669274,
      "Density" : 3.17762399077278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHENTICATION_FAILURE_HANDLER_REF], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "e7da08ef-e4ff-4f1f-8df0-a054c0f242de",
    "objectives" : {
      "NumberOfConcerns" : 0.9969859343603483,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5540380071673942,
      "MetricsIntensity" : 0.05343115860725199,
      "Density" : 0.9960252935862692
    },
    "euclideanDistance" : 23.049855972237054,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6456605859590934,
      "LackOfCohesion" : 0.5540380071673942,
      "MetricsIntensity" : 0.053431158607251984,
      "Density" : 3.179354094579007
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setRequestCache(RequestCache)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "c16b1cc5-941f-4623-844d-41086b11145a",
    "objectives" : {
      "NumberOfConcerns" : 0.9973208305425318,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5537357134750481,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 0.996386630532972
    },
    "euclideanDistance" : 23.049878804483452,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462133775566608,
      "LackOfCohesion" : 0.5537357134750481,
      "MetricsIntensity" : 0.053427562726692746,
      "Density" : 3.1768433179723505
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.throwableAnalyzer], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "f6dba0b9-a101-42cd-be80-3f5220655640",
    "objectives" : {
      "NumberOfConcerns" : 0.9976557267247154,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5544087914877857,
      "MetricsIntensity" : 0.05341240865862172,
      "Density" : 0.9967479674796748
    },
    "euclideanDistance" : 23.049925063939344,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467661691542286,
      "LackOfCohesion" : 0.5544087914877857,
      "MetricsIntensity" : 0.05341240865862172,
      "Density" : 3.179827089337176
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "e73577cf-98ce-4499-abe6-3f212f9fc7b4",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5566958627240176,
      "MetricsIntensity" : 0.053300022313131815,
      "Density" : 0.997289972899729
    },
    "euclideanDistance" : 23.05007590724794,
    "generation" : 1,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467991169977927,
      "LackOfCohesion" : 0.5566958627240176,
      "MetricsIntensity" : 0.05330002231313182,
      "Density" : 3.176064441887226
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.ComparableVersion.BigIntegerItem.getType(), org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item), org.springframework.security.core.ComparableVersion.BigIntegerItem.equals(Object), org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode], extractedMethods=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getPostalCode(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getStreetAddress(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getFormatted()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.util.matcher.AndRequestMatcher.requestMatchers], extractedMethods=[org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.util.matcher.AndRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "38f04642-5d3d-4208-a8f2-8b98fd230f3a",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5573379650153688,
      "MetricsIntensity" : 0.05330626004914469,
      "Density" : 0.9969286359530262
    },
    "euclideanDistance" : 24.047979655307785,
    "generation" : 1,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462472406181012,
      "LackOfCohesion" : 0.5573379650153688,
      "MetricsIntensity" : 0.053306260049144696,
      "Density" : 3.174913693901036
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.ComparableVersion.BigIntegerItem.getType(), org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item), org.springframework.security.core.ComparableVersion.BigIntegerItem.equals(Object), org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode], extractedMethods=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getPostalCode(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getStreetAddress(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getFormatted()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.util.matcher.AndRequestMatcher.requestMatchers], extractedMethods=[org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.util.matcher.AndRequestMatcher.toString()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHENTICATION_FAILURE_HANDLER_REF], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "a6a1c83f-39f5-4c5c-80a9-958f55108002",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5540506082930416,
      "MetricsIntensity" : 0.05342576478641313,
      "Density" : 0.9958446251129178
    },
    "euclideanDistance" : 25.045854870580097,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645107794361526,
      "LackOfCohesion" : 0.5540506082930416,
      "MetricsIntensity" : 0.05342576478641313,
      "Density" : 3.178777393310266
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "2aee6b73-4e5a-419f-b57b-7b3f5c841264",
    "objectives" : {
      "NumberOfConcerns" : 0.9966510381781648,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5546738942566419,
      "MetricsIntensity" : 0.05344136405874389,
      "Density" : 0.9956639566395664
    },
    "euclideanDistance" : 25.04586151672198,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.645107794361526,
      "LackOfCohesion" : 0.5546738942566419,
      "MetricsIntensity" : 0.05344136405874388,
      "Density" : 3.1782006920415227
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ea076df-4de7-4b41-b65b-f3bb6d7af471",
    "objectives" : {
      "NumberOfConcerns" : 0.999330207635633,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5557663546096631,
      "MetricsIntensity" : 0.053315146686752045,
      "Density" : 0.9976513098464318
    },
    "euclideanDistance" : 25.04607130361394,
    "generation" : 1,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6467991169977931,
      "LackOfCohesion" : 0.5557663546096631,
      "MetricsIntensity" : 0.05331514668675206,
      "Density" : 3.177215189873418
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.ComparableVersion.BigIntegerItem.getType(), org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item), org.springframework.security.core.ComparableVersion.BigIntegerItem.equals(Object), org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode], extractedMethods=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getPostalCode(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getStreetAddress(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getFormatted()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.util.matcher.AndRequestMatcher.requestMatchers], extractedMethods=[org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.util.matcher.AndRequestMatcher.toString(), org.springframework.security.web.util.matcher.AndRequestMatcher.AndRequestMatcher(List<RequestMatcher>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "a95abbd2-c9fe-4e17-a499-a3d571c13e48",
    "objectives" : {
      "NumberOfConcerns" : 0.9989953114534494,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5560216603025913,
      "MetricsIntensity" : 0.05331519795581517,
      "Density" : 0.9969286359530262
    },
    "euclideanDistance" : 27.042630436674386,
    "generation" : 1,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6462472406181012,
      "LackOfCohesion" : 0.5560216603025913,
      "MetricsIntensity" : 0.05331519795581517,
      "Density" : 3.1767415083477264
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.ComparableVersion.BigIntegerItem.getType(), org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item), org.springframework.security.core.ComparableVersion.BigIntegerItem.equals(Object), org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode], extractedMethods=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getPostalCode(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getStreetAddress(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getFormatted()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.util.matcher.AndRequestMatcher.requestMatchers], extractedMethods=[org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.util.matcher.AndRequestMatcher.toString(), org.springframework.security.web.util.matcher.AndRequestMatcher.AndRequestMatcher(List<RequestMatcher>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "72f7fd03-ed29-4d58-a0ac-ca75dd128065",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5547157063567003,
      "MetricsIntensity" : 0.05343732297392495,
      "Density" : 0.9949412827461608
    },
    "euclideanDistance" : 28.040894865749433,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688232,
      "LackOfCohesion" : 0.5547157063567003,
      "MetricsIntensity" : 0.05343732297392495,
      "Density" : 3.175893886966552
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.vote.RoleHierarchyVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "05b295ac-632a-4420-b96e-6a34f7552a77",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5548145556149899,
      "MetricsIntensity" : 0.05343732297392494,
      "Density" : 0.995483288166215
    },
    "euclideanDistance" : 28.040939848201038,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445550027639577,
      "LackOfCohesion" : 0.5548145556149899,
      "MetricsIntensity" : 0.05343732297392494,
      "Density" : 3.17762399077278
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.vote.RoleHierarchyVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "be649d57-6935-4399-91b4-4b62889d7447",
    "objectives" : {
      "NumberOfConcerns" : 0.9979906229068989,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5560074046547627,
      "MetricsIntensity" : 0.053321384422764906,
      "Density" : 0.996386630532972
    },
    "euclideanDistance" : 28.041054883955105,
    "generation" : 1,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445916114790284,
      "LackOfCohesion" : 0.5560074046547627,
      "MetricsIntensity" : 0.05332138442276491,
      "Density" : 3.1750143926309726
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.core.ComparableVersion.BigIntegerItem.getType(), org.springframework.security.core.ComparableVersion.BigIntegerItem.compareTo(Item), org.springframework.security.core.ComparableVersion.BigIntegerItem.equals(Object), org.springframework.security.core.ComparableVersion.BigIntegerItem.hashCode()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.streetAddress, org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode], extractedMethods=[org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getPostalCode(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getStreetAddress(), org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.getFormatted()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.setUseEquals(boolean)', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.NoOpJwkSetCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRedirectStrategy, org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.authorizationRequestRepository], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(HttpServletRequest, HttpServletResponse, OAuth2AuthorizationRequest), org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.setAuthorizationRequestRepository(AuthorizationRequestRepository<OAuth2AuthorizationRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.util.matcher.AndRequestMatcher.requestMatchers], extractedMethods=[org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest), org.springframework.security.web.util.matcher.AndRequestMatcher.toString(), org.springframework.security.web.util.matcher.AndRequestMatcher.AndRequestMatcher(List<RequestMatcher>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getMappedPort(Integer)', targetType='org.springframework.security.web.access.intercept.RequestMatcherDelegatingAuthorizationManager.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setReturnObject(Object, EvaluationContext)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_LOGIN_PROCESSING_URL], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "44b1f8de-35e6-4792-8cc5-893cf5b6355d",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5547129794806095,
      "MetricsIntensity" : 0.05343732297392494,
      "Density" : 0.9949412827461608
    },
    "euclideanDistance" : 29.039486597506134,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688227,
      "LackOfCohesion" : 0.5547129794806095,
      "MetricsIntensity" : 0.05343732297392494,
      "Density" : 3.175893886966551
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.vote.RoleHierarchyVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "ebb54238-ebeb-41f2-9aaa-5b6a2c3a036f",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5548220545242395,
      "MetricsIntensity" : 0.05343732297392493,
      "Density" : 0.9949412827461608
    },
    "euclideanDistance" : 29.039488681265045,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.643449419568823,
      "LackOfCohesion" : 0.5548220545242395,
      "MetricsIntensity" : 0.053437322973924936,
      "Density" : 3.175893886966552
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.vote.RoleHierarchyVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "8c300946-8d1e-4e7c-adad-e23bf8fa4056",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5548220545242395,
      "MetricsIntensity" : 0.05343732297392493,
      "Density" : 0.9949412827461608
    },
    "euclideanDistance" : 29.039488681265045,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688218,
      "LackOfCohesion" : 0.5548220545242395,
      "MetricsIntensity" : 0.05343732297392493,
      "Density" : 3.175893886966553
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.vote.RoleHierarchyVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "90bc98c4-162d-4fca-a6a2-70ad99884da0",
    "objectives" : {
      "NumberOfConcerns" : 0.9963161419959813,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5545021010629247,
      "MetricsIntensity" : 0.05342396684613352,
      "Density" : 0.9956639566395664
    },
    "euclideanDistance" : 29.03953028665701,
    "generation" : 1,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6445550027639575,
      "LackOfCohesion" : 0.5545021010629247,
      "MetricsIntensity" : 0.05342396684613351,
      "Density" : 3.1782006920415222
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  }, {
    "solutionId" : "a297e0b4-3658-4fc1-9f2b-e7764d9176da",
    "objectives" : {
      "NumberOfConcerns" : 0.9956463496316142,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5548189380944215,
      "MetricsIntensity" : 0.05343732297392493,
      "Density" : 0.9949412827461608
    },
    "euclideanDistance" : 30.038174035903086,
    "generation" : 1,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6434494195688227,
      "LackOfCohesion" : 0.5548189380944215,
      "MetricsIntensity" : 0.053437322973924936,
      "Density" : 3.1758938869665525
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getPrincipal()', targetType='org.springframework.security.core.AuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters.AuthorizationGrantTypeConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.vote.RoleHierarchyVoter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.AuthorizationEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthentication()', targetType='org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.config.http.CsrfBeanDefinitionParser.DefaultRequiresCsrfMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='trang.RncToXsd'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.core.ComparableVersion.BigIntegerItem",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.core.ComparableVersion.BigIntegerItem.getType()', targetType='org.springframework.security.core.ComparableVersion'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient], extractedMethods=[org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.build(), org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder.accessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.formatted', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.ReferrerPolicyConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.oauth2.core.oidc.DefaultAddressStandardClaim.postalCode', targetTypeName='org.springframework.security.authentication.rcp.RemoteAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher.resolveMediaTypes(ServerWebExchange)', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.unsuccessfulRedirectForAuthorization(HttpServletRequest, HttpServletResponse, Exception)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.util.matcher.AndRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.util.matcher.AndRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.channel.AbstractRetryEntryPoint",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getPortMapper()', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2AuthorizedClientMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.getRedirectStrategy()', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.channel.AbstractRetryEntryPoint.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.DefaultPostAuthenticationChecks'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver, org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer], extractedMethods=[org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getDefaultRolePrefix(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getTrustResolver(), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setTrustResolver(AuthenticationTrustResolver), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer), org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_REGISTRATION_ID, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ELT_CLIENT_REGISTRATION, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_ACCESS_TOKEN_RESPONSE_CLIENT_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_AUTHORIZATION_REQUEST_REPOSITORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_JWT_DECODER_FACTORY_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.ATT_OIDC_USER_SERVICE_REF, org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI], extractedMethods=[org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcUserService(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getLoginEntryPoint(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAccessTokenResponseClient(Element), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginOidcAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2LoginAuthenticationProvider(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getDefaultAuthorizedClientRepository(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOidcAuthProvider(Element, BeanMetadataElement, String), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthenticationEntryPointMatcher(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getOAuth2AuthorizationRequestRedirectFilter(), org.springframework.security.config.http.OAuth2LoginBeanDefinitionParser.getAuthorizationRequestRepository(Element)]"
      } ]
    } ]
  } ]
}