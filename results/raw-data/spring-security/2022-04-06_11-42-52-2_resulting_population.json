{
  "executionId" : "078de428-8663-4662-b0ce-879d55df719d",
  "computingTime" : 3426029,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 30,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.1561403508771924,
    "meanNumConcerns" : 1.6132963988919662,
    "meanMetricsIntensity" : 0.0535659749901517,
    "meanLackOfCohesion" : 0.5516677364702989
  },
  "population" : [ {
    "solutionId" : "8b076eb7-9f23-411f-bb1c-4a76075fd5f7",
    "objectives" : {
      "NumberOfConcerns" : 0.9972527472527473,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5524470133218364,
      "MetricsIntensity" : 0.053551515277802615,
      "Density" : 0.9955530850472485
    },
    "euclideanDistance" : 31.03697318448381,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6079734219269117,
      "LackOfCohesion" : 0.5524470133218364,
      "MetricsIntensity" : 0.05355151527780262,
      "Density" : 3.142105263157895
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4d7ca5ad-6ddf-42b1-8e9d-ddaf50d6ebaf",
    "objectives" : {
      "NumberOfConcerns" : 0.9972527472527473,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5524470133218363,
      "MetricsIntensity" : 0.05355151527780263,
      "Density" : 0.9955530850472485
    },
    "euclideanDistance" : 31.03697318448381,
    "generation" : 1,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6079734219269102,
      "LackOfCohesion" : 0.5524470133218363,
      "MetricsIntensity" : 0.05355151527780262,
      "Density" : 3.142105263157895
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "bc0ccacc-270a-4fe2-a88a-2b93a62a9fbb",
    "objectives" : {
      "NumberOfConcerns" : 0.9969093406593407,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5521181303044286,
      "MetricsIntensity" : 0.053548906130215346,
      "Density" : 0.9949972206781545
    },
    "euclideanDistance" : 32.03578545342395,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6074197120708746,
      "LackOfCohesion" : 0.5521181303044286,
      "MetricsIntensity" : 0.053548906130215346,
      "Density" : 3.1403508771929824
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "c7eac23f-e403-4283-9fd0-12735fc25542",
    "objectives" : {
      "NumberOfConcerns" : 0.9969093406593407,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5524917821534904,
      "MetricsIntensity" : 0.05354710465300407,
      "Density" : 0.9949972206781545
    },
    "euclideanDistance" : 32.03579189226349,
    "generation" : 1,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6074197120708746,
      "LackOfCohesion" : 0.5524917821534904,
      "MetricsIntensity" : 0.05354710465300407,
      "Density" : 3.140350877192983
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "5ab213d1-dc70-4140-bcac-03d6ad892d55",
    "objectives" : {
      "NumberOfConcerns" : 0.9965659340659341,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5524859064263032,
      "MetricsIntensity" : 0.05356855081028158,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 33.03468686228448,
    "generation" : 1,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6068660022148393,
      "LackOfCohesion" : 0.5524859064263032,
      "MetricsIntensity" : 0.05356855081028158,
      "Density" : 3.139181286549708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0aba1bd7-4f18-4ad3-9270-fe3011c4d36a",
    "objectives" : {
      "NumberOfConcerns" : 0.9965659340659341,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.552468519441703,
      "MetricsIntensity" : 0.05356855081028159,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 35.03270638813629,
    "generation" : 1,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606866002214839,
      "LackOfCohesion" : 0.552468519441703,
      "MetricsIntensity" : 0.05356855081028158,
      "Density" : 3.139181286549708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "673e4187-e03a-4591-a85a-11bed83291e4",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5520265826899304,
      "MetricsIntensity" : 0.0535782447970866,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 38.03011588309599,
    "generation" : 1,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5520265826899304,
      "MetricsIntensity" : 0.053578244797086595,
      "Density" : 3.139766081871346
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "1d6bf0a0-ff7c-4d25-ac03-25c812ba2aeb",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5520525212322623,
      "MetricsIntensity" : 0.053578244797086595,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 38.03011625961604,
    "generation" : 1,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5520525212322623,
      "MetricsIntensity" : 0.05357824479708659,
      "Density" : 3.139766081871346
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "15e82fa6-1314-4bf6-8c8c-593669f31c1c",
    "objectives" : {
      "NumberOfConcerns" : 0.9969093406593407,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5519797442824362,
      "MetricsIntensity" : 0.05356887711558776,
      "Density" : 0.9953677969242172
    },
    "euclideanDistance" : 38.03014773238912,
    "generation" : 1,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6074197120708746,
      "LackOfCohesion" : 0.5519797442824362,
      "MetricsIntensity" : 0.05356887711558777,
      "Density" : 3.1415204678362567
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f087a4fa-e347-4236-b999-c7f4eeea9963",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5523150854440069,
      "MetricsIntensity" : 0.05357920461378589,
      "Density" : 0.9944413563090606
    },
    "euclideanDistance" : 39.02933014438394,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6057585825027685,
      "LackOfCohesion" : 0.5523150854440069,
      "MetricsIntensity" : 0.05357920461378588,
      "Density" : 3.1385964912280695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "2dfbd8e2-0cfa-4aaf-b16d-8dc9cc468079",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5520230059388126,
      "MetricsIntensity" : 0.053578244797086595,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 39.02934421858506,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5520230059388126,
      "MetricsIntensity" : 0.05357824479708659,
      "Density" : 3.139766081871345
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "c4ebe1bf-1d98-4b0d-a4e6-513b02b52a00",
    "objectives" : {
      "NumberOfConcerns" : 0.9965659340659341,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5520621471254947,
      "MetricsIntensity" : 0.05357644331987528,
      "Density" : 0.9949972206781545
    },
    "euclideanDistance" : 39.029358259900526,
    "generation" : 1,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6068660022148393,
      "LackOfCohesion" : 0.5520621471254947,
      "MetricsIntensity" : 0.05357644331987529,
      "Density" : 3.140350877192982
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "f6eaa570-8bf2-4823-b4b1-189c7b1d7853",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5525789609128003,
      "MetricsIntensity" : 0.053597991447561,
      "Density" : 0.9942560681860293
    },
    "euclideanDistance" : 40.028605030728954,
    "generation" : 1,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5525789609128003,
      "MetricsIntensity" : 0.05359799144756101,
      "Density" : 3.138011695906432
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "7a7e1528-859e-4acf-b08f-7d2f66c96fb2",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5520705540191476,
      "MetricsIntensity" : 0.05357824479708658,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 40.02861179994041,
    "generation" : 1,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5520705540191476,
      "MetricsIntensity" : 0.05357824479708658,
      "Density" : 3.1397660818713464
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "18d46e41-2ca4-4026-8993-c706cceca156",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5525844253936747,
      "MetricsIntensity" : 0.053610516003411095,
      "Density" : 0.9942560681860293
    },
    "euclideanDistance" : 41.02789958049451,
    "generation" : 1,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6057585825027685,
      "LackOfCohesion" : 0.5525844253936747,
      "MetricsIntensity" : 0.053610516003411095,
      "Density" : 3.138011695906433
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "86cc1c45-b7ec-4740-b133-9209a7b766cc",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5525516385084288,
      "MetricsIntensity" : 0.053610516003411095,
      "Density" : 0.9942560681860293
    },
    "euclideanDistance" : 42.027235309417776,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.605758582502768,
      "LackOfCohesion" : 0.5525516385084288,
      "MetricsIntensity" : 0.053610516003411095,
      "Density" : 3.138011695906432
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "aa218c7a-792e-4ceb-b058-47655d56100b",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5525791030293358,
      "MetricsIntensity" : 0.05357429773300078,
      "Density" : 0.9942560681860293
    },
    "euclideanDistance" : 42.02724376310979,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5525791030293358,
      "MetricsIntensity" : 0.053574297733000785,
      "Density" : 3.138011695906433
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "0b1a6f72-5390-4ca3-96c5-e31490a65894",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5525315620457293,
      "MetricsIntensity" : 0.05356983693228707,
      "Density" : 0.9944413563090606
    },
    "euclideanDistance" : 42.02724751622294,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5525315620457293,
      "MetricsIntensity" : 0.05356983693228707,
      "Density" : 3.1385964912280695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "4a8027fd-985c-4a60-bb60-a2927d4eb70d",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5525745492952739,
      "MetricsIntensity" : 0.05356983693228706,
      "Density" : 0.9944413563090606
    },
    "euclideanDistance" : 42.027248081397616,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5525745492952739,
      "MetricsIntensity" : 0.05356983693228706,
      "Density" : 3.1385964912280695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "a85786e3-69d5-4637-a4e4-86ccdcfa6489",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5525521709450266,
      "MetricsIntensity" : 0.05356537613157332,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 42.02725216615041,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588036,
      "LackOfCohesion" : 0.5525521709450266,
      "MetricsIntensity" : 0.053565376131573327,
      "Density" : 3.139181286549708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e15b0c96-b21b-4dbf-a478-624360142425",
    "objectives" : {
      "NumberOfConcerns" : 0.9965659340659341,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5524689026650371,
      "MetricsIntensity" : 0.05356046925078823,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 42.027259206793794,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6068660022148393,
      "LackOfCohesion" : 0.5524689026650371,
      "MetricsIntensity" : 0.05356046925078822,
      "Density" : 3.139181286549708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "81f2f612-cd40-44bb-9340-aa4e96ff5808",
    "objectives" : {
      "NumberOfConcerns" : 0.9965659340659341,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5524530485737733,
      "MetricsIntensity" : 0.05356357465436201,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 42.02726338782366,
    "generation" : 1,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6068660022148393,
      "LackOfCohesion" : 0.5524530485737733,
      "MetricsIntensity" : 0.05356357465436201,
      "Density" : 3.1397660818713455
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "488433c7-38e0-4c70-b3e0-fd35723b6566",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5521752707959955,
      "MetricsIntensity" : 0.053599690954364135,
      "Density" : 0.9944413563090606
    },
    "euclideanDistance" : 43.02660176322422,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6057585825027687,
      "LackOfCohesion" : 0.5521752707959955,
      "MetricsIntensity" : 0.053599690954364135,
      "Density" : 3.1385964912280695
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "c35cfad6-d3c5-4eae-bbe4-f1bb569e3cc5",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5525689026650372,
      "MetricsIntensity" : 0.053581863937288296,
      "Density" : 0.9942560681860293
    },
    "euclideanDistance" : 43.026610462151254,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588045,
      "LackOfCohesion" : 0.5525689026650372,
      "MetricsIntensity" : 0.05358186393728829,
      "Density" : 3.138011695906433
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "e84527b8-ae4c-4815-8416-11cbeb24123c",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5525599773462758,
      "MetricsIntensity" : 0.05356983693228705,
      "Density" : 0.9944413563090606
    },
    "euclideanDistance" : 43.02661461457752,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5525599773462758,
      "MetricsIntensity" : 0.053569836932287056,
      "Density" : 3.13859649122807
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "42576a35-52aa-421e-b352-7626a37c402c",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5525599773462757,
      "MetricsIntensity" : 0.053569836932287056,
      "Density" : 0.9944413563090606
    },
    "euclideanDistance" : 43.02661461457752,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606312292358804,
      "LackOfCohesion" : 0.5525599773462757,
      "MetricsIntensity" : 0.05356983693228706,
      "Density" : 3.13859649122807
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "6b8e7eaa-3b6c-4682-8a97-91bb81208957",
    "objectives" : {
      "NumberOfConcerns" : 0.9962225274725275,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5525419705807281,
      "MetricsIntensity" : 0.053565376131573327,
      "Density" : 0.9948119325551232
    },
    "euclideanDistance" : 43.026622944221074,
    "generation" : 1,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6063122923588038,
      "LackOfCohesion" : 0.5525419705807281,
      "MetricsIntensity" : 0.05356537613157333,
      "Density" : 3.139766081871346
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "c283a3fd-9336-4be2-8ecc-2a2900f12704",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5523705700322784,
      "MetricsIntensity" : 0.05359704781664077,
      "Density" : 0.994070780062998
    },
    "euclideanDistance" : 44.02599161665017,
    "generation" : 1,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.605758582502768,
      "LackOfCohesion" : 0.5523705700322784,
      "MetricsIntensity" : 0.05359704781664078,
      "Density" : 3.137426900584796
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "279f6446-870b-4760-8416-ea79f15e2b90",
    "objectives" : {
      "NumberOfConcerns" : 0.9965659340659341,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5524459518453652,
      "MetricsIntensity" : 0.05356803545507576,
      "Density" : 0.9946266444320919
    },
    "euclideanDistance" : 44.02602062288719,
    "generation" : 1,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.606866002214839,
      "LackOfCohesion" : 0.5524459518453652,
      "MetricsIntensity" : 0.053568035455075755,
      "Density" : 3.139181286549708
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.redirectStrategy', targetTypeName='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthorityName(String, String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setPermissionCacheOptimizer(PermissionCacheOptimizer)', targetType='org.springframework.security.acls.domain.AbstractPermission'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.trustResolver', targetTypeName='org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  }, {
    "solutionId" : "9ab1b9bb-44ce-4e71-a54f-1b9bb6db7603",
    "objectives" : {
      "NumberOfConcerns" : 0.9958791208791209,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.55247959033802,
      "MetricsIntensity" : 0.053607770895279565,
      "Density" : 0.9938854919399667
    },
    "euclideanDistance" : 45.02541161483515,
    "generation" : 1,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6057585825027683,
      "LackOfCohesion" : 0.55247959033802,
      "MetricsIntensity" : 0.053607770895279565,
      "Density" : 3.1368421052631588
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.ldap.authentication.AbstractLdapAuthenticator",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setMessageSource(MessageSource)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.messages', targetTypeName='org.springframework.security.config.annotation.web.configurers.oauth2.client.OAuth2LoginConfigurer.RedirectionEndpointConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.authentication.AbstractLdapAuthenticator.setUserDnPatterns(String[])', targetType='org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setUseReferer(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer.FeaturePolicyConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.getTargetUrlParameter()', targetType='org.springframework.security.oauth2.jwt.NimbusJwtDecoder.JwkSetUriJwtDecoderBuilder.RestOperationsResourceRetriever'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.handle(HttpServletRequest, HttpServletResponse, Authentication)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler.setRedirectStrategy(RedirectStrategy)', targetType='org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction.UnAuthenticatedReactiveOAuth2AuthorizedClientManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authentication.dao.DaoAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(String, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.authentication.ReactivePreAuthenticatedAuthenticationManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.additionalAuthenticationChecks(UserDetails, UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.introspection.BadOpaqueTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.mitigateAgainstTimingAttack(UsernamePasswordAuthenticationToken)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.createSuccessAuthentication(Object, Authentication, UserDetails)', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.prepareTimingAttackProtection()', targetType='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authentication.dao.DaoAuthenticationProvider.USER_NOT_FOUND_PASSWORD', targetTypeName='org.springframework.security.web.server.header.ContentTypeOptionsServerHttpHeadersWriter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.getPasswordEncoder()', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authentication.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder)', targetType='org.springframework.security.config.method.MethodSecurityBeanDefinitionParser.Jsr250AuthorizationMethodInterceptor'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.SecurityExpressionRoot",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setRoleHierarchy(RoleHierarchy)', targetType='org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setPermissionEvaluator(PermissionEvaluator)', targetType='org.springframework.security.crypto.password.Md4'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAuthority(String)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyAuthority(String...)', targetType='org.springframework.security.config.authentication.PasswordEncoderParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isRememberMe()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAnonymous()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.permitAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.denyAll()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isAuthenticated()', targetType='org.springframework.security.rsocket.core.PayloadSocketAcceptor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.isFullyAuthenticated()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setTrustResolver(AuthenticationTrustResolver)', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getAuthoritySet()', targetType='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.roles', targetTypeName='org.springframework.security.crypto.encrypt.Encryptors'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasRole(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.setDefaultRolePrefix(String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.hasAnyRole(String...)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.SecurityExpressionRoot.getRoleWithDefaultPrefix(String, String)', targetType='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.SecurityExpressionRoot.defaultRolePrefix', targetTypeName='org.springframework.security.web.server.authentication.logout.HeaderWriterServerLogoutHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.oauth2.client.endpoint.DefaultRefreshTokenTokenResponseClient'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher.toString()', targetType='org.springframework.security.jackson2.UserMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.createSecurityExpressionRoot(Authentication, MethodInvocation)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer.UserDetailsBuilder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.filter(Object, Expression, EvaluationContext)', targetType='org.springframework.security.oauth2.client.JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setDefaultRolePrefix(String)', targetType='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.defaultRolePrefix', targetTypeName='org.springframework.security.config.annotation.web.configurers.HeadersConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.setParameterNameDiscoverer(ParameterNameDiscoverer)', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.getParameterNameDiscoverer()', targetType='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.parameterNameDiscoverer', targetTypeName='org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler.<T>filterCollection(Collection<T>, Expression, EvaluationContext, MethodSecurityExpressionOperations)', targetType='org.springframework.security.core.authority.mapping.SimpleAuthorityMapper'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponse.Builder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setContextAttributesMapper(Function<OAuth2AuthorizeRequest,Map<String,Object>>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.createAttributes(HttpServletRequest, HttpServletResponse), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletResponseOrDefault(Map<String,Object>), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.setAuthorizationFailureHandler(OAuth2AuthorizationFailureHandler), org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizedClientManager.getHttpServletRequestOrDefault(Map<String,Object>)]"
      } ]
    } ]
  } ]
}