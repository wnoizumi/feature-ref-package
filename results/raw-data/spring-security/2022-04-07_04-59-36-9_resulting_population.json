{
  "executionId" : "0f62eb12-7ed4-4068-a789-5c2f85e595dd",
  "computingTime" : 3435903,
  "maxEvaluations" : 100,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 31,
  "algorithm" : "MOSA",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.22459584295612,
    "meanNumConcerns" : 1.6747922437673122,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "1b46ea11-7881-4a07-8dc4-a03c335b2151",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 8.0,
      "LackOfCohesion" : 0.552557063017132,
      "MetricsIntensity" : 0.05354470333082012,
      "Density" : 0.998746642793196
    },
    "euclideanDistance" : 8.142830048554101,
    "generation" : 1,
    "numberOfRefactorings" : 8,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6738648947951276,
      "LackOfCohesion" : 0.552557063017132,
      "MetricsIntensity" : 0.05354470333082011,
      "Density" : 3.21869590305828
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "a9e8d8b4-28c4-4cdd-89a4-097ccc333c9e",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5538586303023058,
      "MetricsIntensity" : 0.053538441052895076,
      "Density" : 0.998746642793196
    },
    "euclideanDistance" : 9.127273448490595,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673864894795126,
      "LackOfCohesion" : 0.5538586303023058,
      "MetricsIntensity" : 0.053538441052895076,
      "Density" : 3.21869590305828
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "a1d8b050-e4d6-4bfa-8a6d-8ced27e05d71",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5538586303023059,
      "MetricsIntensity" : 0.05353844105289506,
      "Density" : 0.998746642793196
    },
    "euclideanDistance" : 9.127273448490595,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6738648947951276,
      "LackOfCohesion" : 0.5538586303023059,
      "MetricsIntensity" : 0.053538441052895056,
      "Density" : 3.21869590305828
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "4e94189c-8602-4b0f-b2b7-9cdb40a8f99d",
    "objectives" : {
      "NumberOfConcerns" : 1.0003307972213034,
      "NumberOfRefactorings" : 9.0,
      "LackOfCohesion" : 0.5537243602008227,
      "MetricsIntensity" : 0.0535447033308201,
      "Density" : 0.9989256938227394
    },
    "euclideanDistance" : 9.127321181375358,
    "generation" : 1,
    "numberOfRefactorings" : 9,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6744186046511629,
      "LackOfCohesion" : 0.5537243602008227,
      "MetricsIntensity" : 0.0535447033308201,
      "Density" : 3.2192729371032893
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "72321acc-3d54-4b18-b2dd-a9a8c408fc21",
    "objectives" : {
      "NumberOfConcerns" : 1.0003307972213034,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5534019558292379,
      "MetricsIntensity" : 0.053544703330820106,
      "Density" : 0.9989256938227394
    },
    "euclideanDistance" : 10.114723674209744,
    "generation" : 1,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6744186046511629,
      "LackOfCohesion" : 0.5534019558292379,
      "MetricsIntensity" : 0.053544703330820106,
      "Density" : 3.2192729371032884
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "e121840d-707b-435a-aa38-83c587f2ef98",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5534019558292381,
      "MetricsIntensity" : 0.05355853181303266,
      "Density" : 0.9985675917636526
    },
    "euclideanDistance" : 11.104275605602927,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830565,
      "LackOfCohesion" : 0.5534019558292381,
      "MetricsIntensity" : 0.05355853181303266,
      "Density" : 3.218118869013272
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "b72750cc-3e31-4bc7-80f1-31b2bfabfc76",
    "objectives" : {
      "NumberOfConcerns" : 0.9996692027786966,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5528803462912348,
      "MetricsIntensity" : 0.05355853181303267,
      "Density" : 0.998746642793196
    },
    "euclideanDistance" : 11.104295500621367,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673311184939092,
      "LackOfCohesion" : 0.5528803462912348,
      "MetricsIntensity" : 0.05355853181303267,
      "Density" : 3.2186959030582805
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "2dfd9185-77a1-47c6-88b0-7274b59965ae",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.553856146447363,
      "MetricsIntensity" : 0.05355226953510762,
      "Density" : 0.9985675917636526
    },
    "euclideanDistance" : 11.104298220089037,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830567,
      "LackOfCohesion" : 0.553856146447363,
      "MetricsIntensity" : 0.05355226953510762,
      "Density" : 3.2181188690132707
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "b44bef2c-cd96-48f1-a78c-789206532a3b",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 11.0,
      "LackOfCohesion" : 0.5538561464473629,
      "MetricsIntensity" : 0.053552269535107624,
      "Density" : 0.9985675917636526
    },
    "euclideanDistance" : 11.104298220089037,
    "generation" : 1,
    "numberOfRefactorings" : 11,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830565,
      "LackOfCohesion" : 0.5538561464473629,
      "MetricsIntensity" : 0.053552269535107624,
      "Density" : 3.218118869013272
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "a1f83476-a396-4119-8a77-4c4c7e15410c",
    "objectives" : {
      "NumberOfConcerns" : 0.9996692027786966,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5528445787800575,
      "MetricsIntensity" : 0.05355853181303266,
      "Density" : 0.998746642793196
    },
    "euclideanDistance" : 12.095674392777417,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673311184939092,
      "LackOfCohesion" : 0.5528445787800575,
      "MetricsIntensity" : 0.05355853181303266,
      "Density" : 3.2186959030582805
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "41a48038-9cb9-4c11-b88e-76e6ed9a07fa",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5525063081513886,
      "MetricsIntensity" : 0.05356786550439544,
      "Density" : 0.999104744852283
    },
    "euclideanDistance" : 12.095715895636278,
    "generation" : 1,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6738648947951276,
      "LackOfCohesion" : 0.5525063081513886,
      "MetricsIntensity" : 0.05356786550439544,
      "Density" : 3.2198499711482973
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "db3b34e9-0af1-42d6-b74d-3d3aa3516316",
    "objectives" : {
      "NumberOfConcerns" : 0.9986768111147867,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5539811908019155,
      "MetricsIntensity" : 0.053554996838882166,
      "Density" : 0.9974932855863922
    },
    "euclideanDistance" : 15.076541762794845,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6716500553709854,
      "LackOfCohesion" : 0.5539811908019155,
      "MetricsIntensity" : 0.05355499683888217,
      "Density" : 3.2146566647432198
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "a6c20176-ab45-4bf6-b983-a4f0c2df26ee",
    "objectives" : {
      "NumberOfConcerns" : 0.9986768111147867,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5539811908019154,
      "MetricsIntensity" : 0.05355499683888217,
      "Density" : 0.9974932855863922
    },
    "euclideanDistance" : 15.076541762794845,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6716500553709857,
      "LackOfCohesion" : 0.5539811908019154,
      "MetricsIntensity" : 0.05355499683888217,
      "Density" : 3.21465666474322
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "8b3d0ffb-2680-4c88-bc50-6794a8145491",
    "objectives" : {
      "NumberOfConcerns" : 0.9990076083360899,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5536533219494565,
      "MetricsIntensity" : 0.05355499683888214,
      "Density" : 0.997851387645479
    },
    "euclideanDistance" : 15.076575331683635,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6722037652270203,
      "LackOfCohesion" : 0.5536533219494565,
      "MetricsIntensity" : 0.053554996838882145,
      "Density" : 3.2158107328332375
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "7c516a01-2ef4-43a9-a83e-a780a222b76d",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5544408143598998,
      "MetricsIntensity" : 0.053548734560957115,
      "Density" : 0.9980304386750224
    },
    "euclideanDistance" : 15.076638023410425,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830565,
      "LackOfCohesion" : 0.5544408143598998,
      "MetricsIntensity" : 0.053548734560957115,
      "Density" : 3.216387766878246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "04483035-0a0c-460e-98aa-f37ffcd740f5",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 15.0,
      "LackOfCohesion" : 0.5544408143598997,
      "MetricsIntensity" : 0.053548734560957136,
      "Density" : 0.9980304386750224
    },
    "euclideanDistance" : 15.076638023410425,
    "generation" : 1,
    "numberOfRefactorings" : 15,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830567,
      "LackOfCohesion" : 0.5544408143598997,
      "MetricsIntensity" : 0.053548734560957136,
      "Density" : 3.2163877668782455
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.logger', targetTypeName='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.doFinal(Cipher, byte[])', targetType='org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer.AbstractInterceptUrlRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "d5a592a7-d17a-4167-bba3-b7c1292a7efe",
    "objectives" : {
      "NumberOfConcerns" : 0.9976844194508766,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.555457381278106,
      "MetricsIntensity" : 0.053507609409761715,
      "Density" : 0.9960608773500448
    },
    "euclideanDistance" : 16.071680292952678,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6699889258028788,
      "LackOfCohesion" : 0.555457381278106,
      "MetricsIntensity" : 0.053507609409761715,
      "Density" : 3.2118937644341803
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "4f136277-fdcc-4cb9-bbee-28b29920d28d",
    "objectives" : {
      "NumberOfConcerns" : 0.9983460138934833,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5554528275440439,
      "MetricsIntensity" : 0.053510646833063356,
      "Density" : 0.9964189794091316
    },
    "euclideanDistance" : 16.071743426863648,
    "generation" : 1,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.67109634551495,
      "LackOfCohesion" : 0.5554528275440439,
      "MetricsIntensity" : 0.05351064683306336,
      "Density" : 3.2130484988452657
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "62a5e199-3b44-4a97-80c9-d3be2b5ac34c",
    "objectives" : {
      "NumberOfConcerns" : 0.9996692027786966,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5561833765942652,
      "MetricsIntensity" : 0.05353490607874457,
      "Density" : 0.9940913160250672
    },
    "euclideanDistance" : 19.06042397204609,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673311184939092,
      "LackOfCohesion" : 0.5561833765942652,
      "MetricsIntensity" : 0.05353490607874456,
      "Density" : 3.2055427251732103
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "8296a589-2d2f-47b0-8047-74326d534900",
    "objectives" : {
      "NumberOfConcerns" : 0.9996692027786966,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5562715889283791,
      "MetricsIntensity" : 0.05353490607874456,
      "Density" : 0.9940913160250672
    },
    "euclideanDistance" : 19.0604265462869,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673311184939092,
      "LackOfCohesion" : 0.5562715889283791,
      "MetricsIntensity" : 0.05353490607874456,
      "Density" : 3.2055427251732107
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "b0e3754a-f051-4c77-9a2c-8624c0bc06d7",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5556197544240857,
      "MetricsIntensity" : 0.05352553839724574,
      "Density" : 0.9942703670546106
    },
    "euclideanDistance" : 19.060434199082923,
    "generation" : 1,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6738648947951276,
      "LackOfCohesion" : 0.5556197544240857,
      "MetricsIntensity" : 0.053525538397245734,
      "Density" : 3.206120092378752
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "5ed832ff-7afc-4375-91ec-e3263eff6a00",
    "objectives" : {
      "NumberOfConcerns" : 0.9986768111147867,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5546040115149,
      "MetricsIntensity" : 0.05354919812166991,
      "Density" : 0.9967770814682184
    },
    "euclideanDistance" : 20.05745180847773,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6716500553709857,
      "LackOfCohesion" : 0.5546040115149,
      "MetricsIntensity" : 0.0535491981216699,
      "Density" : 3.214203233256351
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "2ec917d1-371a-4bab-b06e-c84b80957363",
    "objectives" : {
      "NumberOfConcerns" : 0.9990076083360899,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5546015580745073,
      "MetricsIntensity" : 0.05355853181303266,
      "Density" : 0.9969561324977618
    },
    "euclideanDistance" : 20.05747713787023,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6722037652270192,
      "LackOfCohesion" : 0.5546015580745073,
      "MetricsIntensity" : 0.053558531813032655,
      "Density" : 3.214780600461894
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "76f0e949-c88d-45dd-bf76-c277dd86246c",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5546562028832507,
      "MetricsIntensity" : 0.053536176014971,
      "Density" : 0.9967770814682184
    },
    "euclideanDistance" : 20.057486169121532,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830565,
      "LackOfCohesion" : 0.5546562028832507,
      "MetricsIntensity" : 0.053536176014971,
      "Density" : 3.214203233256351
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "941ba7bc-7d94-4b9c-b528-a378a2945c62",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5545687711892617,
      "MetricsIntensity" : 0.0535585318130327,
      "Density" : 0.9973142345568488
    },
    "euclideanDistance" : 20.057510512762548,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830567,
      "LackOfCohesion" : 0.5545687711892617,
      "MetricsIntensity" : 0.053558531813032696,
      "Density" : 3.215935334872978
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "0f888a51-8d1e-40f7-8386-15aa54ba36e8",
    "objectives" : {
      "NumberOfConcerns" : 0.9996692027786966,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5546780608067482,
      "MetricsIntensity" : 0.05353617601497098,
      "Density" : 0.9971351835273052
    },
    "euclideanDistance" : 20.057521057261656,
    "generation" : 1,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6733111849390911,
      "LackOfCohesion" : 0.5546780608067482,
      "MetricsIntensity" : 0.053536176014970974,
      "Density" : 3.215357967667436
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "90e4cb08-41f3-4562-8f93-a286c1091b87",
    "objectives" : {
      "NumberOfConcerns" : 0.9993384055573933,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5549476232765447,
      "MetricsIntensity" : 0.05355053603816845,
      "Density" : 0.9937332139659804
    },
    "euclideanDistance" : 21.05461986058764,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6727574750830567,
      "LackOfCohesion" : 0.5549476232765447,
      "MetricsIntensity" : 0.05355053603816844,
      "Density" : 3.204387990762125
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "11a1c191-4549-471c-8777-177fc9d8be68",
    "objectives" : {
      "NumberOfConcerns" : 0.9996692027786966,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5562583180462558,
      "MetricsIntensity" : 0.05353490607874457,
      "Density" : 0.9939122649955238
    },
    "euclideanDistance" : 21.05467856339909,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.673311184939092,
      "LackOfCohesion" : 0.5562583180462558,
      "MetricsIntensity" : 0.05353490607874457,
      "Density" : 3.2049653579676685
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.getMapping(HttpServletRequest)', targetType='org.springframework.security.config.method.GlobalMethodSecurityBeanDefinitionParser.DefaultMethodSecurityExpressionHandlerBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "8d8006dc-5545-4579-be5a-0b2d8589b204",
    "objectives" : {
      "NumberOfConcerns" : 1.0003307972213034,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5556205350642105,
      "MetricsIntensity" : 0.053525538397245734,
      "Density" : 0.9942703670546106
    },
    "euclideanDistance" : 21.054710029561512,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.674418604651163,
      "LackOfCohesion" : 0.5556205350642105,
      "MetricsIntensity" : 0.053525538397245734,
      "Density" : 3.206120092378752
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.setResourceLoader(ResourceLoader)', targetType='org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(MethodInvocation)', targetType='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.setOrder(int)', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.order', targetTypeName='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.setMethod(HttpMethod)', targetType='org.springframework.security.cas.authentication.CasAuthenticationProvider'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matcher(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getAdvice()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizationSuccessHandler(OAuth2AuthorizationSuccessHandler)', targetType='org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "fdf4269b-1145-46ed-83ee-125d755df3c6",
    "objectives" : {
      "NumberOfConcerns" : 0.9990076083360899,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5545906291127589,
      "MetricsIntensity" : 0.053558531813032696,
      "Density" : 0.9969561324977618
    },
    "euclideanDistance" : 21.05474713725786,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6722037652270196,
      "LackOfCohesion" : 0.5545906291127589,
      "MetricsIntensity" : 0.05355853181303268,
      "Density" : 3.2147806004618946
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  }, {
    "solutionId" : "7377f03f-ec8c-498a-b35f-9b60b730154b",
    "objectives" : {
      "NumberOfConcerns" : 0.9990076083360899,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.554590629112759,
      "MetricsIntensity" : 0.05355853181303268,
      "Density" : 0.9969561324977618
    },
    "euclideanDistance" : 21.05474713725786,
    "generation" : 1,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.672203765227021,
      "LackOfCohesion" : 0.554590629112759,
      "MetricsIntensity" : 0.05355853181303268,
      "Density" : 3.214780600461894
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.core.userdetails.UserDetailsResourceFactoryBean.getObject()', targetType='org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.setPreAuthenticatedUserDetailsService(AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken>)', targetType='org.springframework.security.web.csrf.MissingCsrfTokenException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.afterPropertiesSet()', targetType='org.springframework.security.crypto.password.MessageDigestPasswordEncoder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider.supports(Class<?>)', targetType='org.springframework.security.access.expression.method.MethodSecurityEvaluationContext'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getAdvice()', targetType='org.springframework.security.config.http.HttpConfigurationBuilder.SecurityContextHolderAwareRequestFilterBeanFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.logger', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.AUTHENTICATION_SUPPLIER', targetTypeName='org.springframework.security.oauth2.client.R2dbcReactiveOAuth2AuthorizedClientService.OAuth2AuthorizedClientParametersMapper'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.jsr250()', targetType='org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.isPerInstance()', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationException'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.getOrder()', targetType='org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.authentication.AnonymousAuthenticationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.authenticationDetailsSource, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.principal, org.springframework.security.web.authentication.AnonymousAuthenticationFilter.key], extractedMethods=[org.springframework.security.web.authentication.AnonymousAuthenticationFilter.afterPropertiesSet(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.createAuthentication(HttpServletRequest), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.getPrincipal(), org.springframework.security.web.authentication.AnonymousAuthenticationFilter.setAuthenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest,?>)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.extractUriTemplateVariables(HttpServletRequest)', targetType='org.springframework.security.crypto.argon2.Argon2EncodingUtils'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.servlet.util.matcher.MvcRequestMatcher.matches(HttpServletRequest)', targetType='org.springframework.security.oauth2.client.jackson2.OAuth2ErrorMixin'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.getOrder()', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.setOrder(int)', targetType='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.order', targetTypeName='org.springframework.security.oauth2.core.user.OAuth2UserAuthority'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.invoke(MethodInvocation)', targetType='org.springframework.security.authentication.event.LoggerListener'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.authorization.method.AuthorizationManagerAfterMethodInterceptor.isPerInstance()', targetType='org.springframework.security.authentication.event.LoggerListener'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.client.AuthorizedClientServiceOAuth2AuthorizedClientManager.setAuthorizedClientProvider(OAuth2AuthorizedClientProvider)', targetType='org.springframework.security.access.annotation.Jsr250SecurityConfig'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.crypto.encrypt.CipherUtils",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.crypto.encrypt.CipherUtils.initCipher(Cipher, int, SecretKey, byte[], int)', targetType='org.springframework.security.convention.versions.GitHubApi'"
      } ]
    } ]
  } ]
}