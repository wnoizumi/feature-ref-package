{
  "executionId" : "f8567bfa-9dcc-47f9-aa8b-43ededb6d5e2",
  "computingTime" : 887121,
  "maxEvaluations" : 10240,
  "initialPopulationSize" : 128,
  "finalPopulationSize" : 128,
  "algorithm" : "NSGAII",
  "projectBeforeRefactoring" : {
    "meanDensity" : 3.2816492450638797,
    "meanNumConcerns" : 1.7074792243767314,
    "meanMetricsIntensity" : 0.05356597499015171,
    "meanLackOfCohesion" : 0.551667736470299
  },
  "population" : [ {
    "solutionId" : "6ac56dd9-3e03-4032-b02f-cb52dffe632a",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5533144250920424,
      "MetricsIntensity" : 0.053276270961306556,
      "Density" : 1.0017695983011856
    },
    "euclideanDistance" : 10.115480579853768,
    "generation" : 9,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7078280044101437,
      "LackOfCohesion" : 0.5533144250920424,
      "MetricsIntensity" : 0.053276270961306556,
      "Density" : 3.2684757505773683
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "abdca248-f144-43f6-a621-6bdbbe7f9fc7",
    "objectives" : {
      "NumberOfConcerns" : 1.0058403634003894,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538020689260659,
      "MetricsIntensity" : 0.053208188812741676,
      "Density" : 1.0014156786409485
    },
    "euclideanDistance" : 10.115536369415953,
    "generation" : 12,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7089305402425574,
      "LackOfCohesion" : 0.5538020689260659,
      "MetricsIntensity" : 0.053208188812741676,
      "Density" : 3.2673210161662816
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "6e6833f7-6f1e-434a-ae02-1a55331ee73d",
    "objectives" : {
      "NumberOfConcerns" : 1.0058403634003894,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5538020689260658,
      "MetricsIntensity" : 0.05320818881274168,
      "Density" : 1.0014156786409485
    },
    "euclideanDistance" : 10.115536369415953,
    "generation" : 37,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7089305402425574,
      "LackOfCohesion" : 0.5538020689260658,
      "MetricsIntensity" : 0.05320818881274169,
      "Density" : 3.2673210161662833
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "25c12e63-b9da-412b-a6e0-e922dd24639c",
    "objectives" : {
      "NumberOfConcerns" : 1.0064892926670992,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.553534930107068,
      "MetricsIntensity" : 0.05321441841080799,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 10.115656426286943,
    "generation" : 10,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7100330760749727,
      "LackOfCohesion" : 0.553534930107068,
      "MetricsIntensity" : 0.05321441841080799,
      "Density" : 3.269630484988452
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "45d427c8-38e8-4982-8989-862222633eba",
    "objectives" : {
      "NumberOfConcerns" : 1.0068137573004543,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5534624505825336,
      "MetricsIntensity" : 0.053214418410808,
      "Density" : 1.0023004777915414
    },
    "euclideanDistance" : 10.11570228151275,
    "generation" : 30,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7105843439911799,
      "LackOfCohesion" : 0.5534624505825336,
      "MetricsIntensity" : 0.053214418410808005,
      "Density" : 3.2702078521939955
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "1af84506-6cde-437e-90ef-18e2c9e43470",
    "objectives" : {
      "NumberOfConcerns" : 1.0068137573004543,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5547153109351983,
      "MetricsIntensity" : 0.053198870016730126,
      "Density" : 1.0019465581313043
    },
    "euclideanDistance" : 10.115735763808663,
    "generation" : 22,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7105843439911799,
      "LackOfCohesion" : 0.5547153109351983,
      "MetricsIntensity" : 0.05319887001673013,
      "Density" : 3.26905311778291
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "53a4ce33-5aa5-445e-9d59-0aad5eec86ac",
    "objectives" : {
      "NumberOfConcerns" : 1.0071382219338092,
      "NumberOfRefactorings" : 10.0,
      "LackOfCohesion" : 0.5546428314106638,
      "MetricsIntensity" : 0.05319887001673013,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 10.115781617529002,
    "generation" : 21,
    "numberOfRefactorings" : 10,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7111356119073866,
      "LackOfCohesion" : 0.5546428314106638,
      "MetricsIntensity" : 0.05319887001673014,
      "Density" : 3.269630484988452
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f6da2837-4d27-47b1-98f1-469312500135",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5535668061354009,
      "MetricsIntensity" : 0.053308852003659646,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 12.096176711831617,
    "generation" : 14,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706012134583563,
      "LackOfCohesion" : 0.5535668061354009,
      "MetricsIntensity" : 0.05330885200365964,
      "Density" : 3.26632004621606
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "87de718b-26be-46d3-98ef-d8c873012450",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5540547682747992,
      "MetricsIntensity" : 0.05324072541504998,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 12.096223339720396,
    "generation" : 40,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7071152785438501,
      "LackOfCohesion" : 0.5540547682747992,
      "MetricsIntensity" : 0.05324072541504998,
      "Density" : 3.2651646447140386
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "58efad3a-aa7a-40c1-b96f-c149b50b43d7",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5547479574471006,
      "MetricsIntensity" : 0.053293293460499484,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 12.096243042661248,
    "generation" : 39,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7065637065637067,
      "LackOfCohesion" : 0.5547479574471006,
      "MetricsIntensity" : 0.05329329346049949,
      "Density" : 3.2657423454650485
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "28349424-2433-42e3-ae81-e2fc7231be20",
    "objectives" : {
      "NumberOfConcerns" : 1.0055158987670343,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5548960795599748,
      "MetricsIntensity" : 0.0532314005362734,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 12.096428226751817,
    "generation" : 39,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7093215664644232,
      "LackOfCohesion" : 0.5548960795599748,
      "MetricsIntensity" : 0.0532314005362734,
      "Density" : 3.2674754477180823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "8dd2df56-a879-4916-9442-08ad75ef543f",
    "objectives" : {
      "NumberOfConcerns" : 1.0055158987670343,
      "NumberOfRefactorings" : 12.0,
      "LackOfCohesion" : 0.5548960795599746,
      "MetricsIntensity" : 0.05323140053627341,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 12.096428226751817,
    "generation" : 20,
    "numberOfRefactorings" : 12,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7093215664644237,
      "LackOfCohesion" : 0.5548960795599746,
      "MetricsIntensity" : 0.05323140053627342,
      "Density" : 3.267475447718082
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "d03b177d-ab2f-478f-b82e-d0828cf66fdd",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5523429157959754,
      "MetricsIntensity" : 0.05330082509335747,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 14.082465681643255,
    "generation" : 25,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7054605626034194,
      "LackOfCohesion" : 0.5523429157959754,
      "MetricsIntensity" : 0.05330082509335747,
      "Density" : 3.266897746967071
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "24e269d9-e491-4d9c-af7a-4e2aeafeaf3d",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.551577199788745,
      "MetricsIntensity" : 0.05324825704790798,
      "Density" : 1.0007078393204742
    },
    "euclideanDistance" : 14.082481715770639,
    "generation" : 38,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7065637065637067,
      "LackOfCohesion" : 0.551577199788745,
      "MetricsIntensity" : 0.05324825704790798,
      "Density" : 3.2668977469670706
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e94f7ae8-4d07-4ee8-80f8-f34fa64bd2b1",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5524910379088495,
      "MetricsIntensity" : 0.053238932169131434,
      "Density" : 1.00123871881083
    },
    "euclideanDistance" : 14.08262466052784,
    "generation" : 38,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7082184225041366,
      "LackOfCohesion" : 0.5524910379088495,
      "MetricsIntensity" : 0.053238932169131434,
      "Density" : 3.268630849220104
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e0c841f6-2c86-48e9-8aed-b224e9e0c9bc",
    "objectives" : {
      "NumberOfConcerns" : 1.0048669695003245,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.5537447160554779,
      "MetricsIntensity" : 0.05322337362597124,
      "Density" : 1.000884799150593
    },
    "euclideanDistance" : 14.082648683597238,
    "generation" : 38,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.708218422504137,
      "LackOfCohesion" : 0.5537447160554779,
      "MetricsIntensity" : 0.053223373625971244,
      "Density" : 3.2674754477180823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "39e96910-c898-4aba-be93-64d0f6ac7864",
    "objectives" : {
      "NumberOfConcerns" : 1.0051914341336794,
      "NumberOfRefactorings" : 14.0,
      "LackOfCohesion" : 0.553672189220549,
      "MetricsIntensity" : 0.05322337362597128,
      "Density" : 1.0010617589807114
    },
    "euclideanDistance" : 14.082681565851217,
    "generation" : 37,
    "numberOfRefactorings" : 14,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7087699944842798,
      "LackOfCohesion" : 0.553672189220549,
      "MetricsIntensity" : 0.05322337362597128,
      "Density" : 3.268053148469093
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "0bcf8d92-e32e-4163-b3cc-92cc1b207edd",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5525948271278691,
      "MetricsIntensity" : 0.053333443454570376,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 16.072037559073756,
    "generation" : 7,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7036423841059596,
      "LackOfCohesion" : 0.5525948271278691,
      "MetricsIntensity" : 0.05333344345457038,
      "Density" : 3.2647398843930637
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "2f162622-b139-4714-8820-a24c2f188b86",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5540255359067164,
      "MetricsIntensity" : 0.05325594139837464,
      "Density" : 0.9996460803397629
    },
    "euclideanDistance" : 16.072198748026562,
    "generation" : 40,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706401766004415,
      "LackOfCohesion" : 0.5540255359067164,
      "MetricsIntensity" : 0.05325594139837465,
      "Density" : 3.2653179190751445
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "5012b990-f430-4a32-92c9-de6df082b0dc",
    "objectives" : {
      "NumberOfConcerns" : 1.0055158987670343,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5528011387987318,
      "MetricsIntensity" : 0.05325139949789865,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 16.07224350021121,
    "generation" : 25,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7093215664644232,
      "LackOfCohesion" : 0.5528011387987318,
      "MetricsIntensity" : 0.05325139949789865,
      "Density" : 3.2605430387059515
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "98ecbb77-a2ed-40e0-baf1-38d5caeed03d",
    "objectives" : {
      "NumberOfConcerns" : 1.0061648280337443,
      "NumberOfRefactorings" : 16.0,
      "LackOfCohesion" : 0.5539097632755025,
      "MetricsIntensity" : 0.053235840954738455,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 16.072322229179854,
    "generation" : 24,
    "numberOfRefactorings" : 16,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7104247104247101,
      "LackOfCohesion" : 0.5539097632755025,
      "MetricsIntensity" : 0.05323584095473846,
      "Density" : 3.260543038705951
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "dd20c8a0-a3a9-40f4-a58c-5e3798ae0b59",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5545026450281588,
      "MetricsIntensity" : 0.0532420233835244,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 17.068053906597076,
    "generation" : 21,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7065637065637067,
      "LackOfCohesion" : 0.5545026450281588,
      "MetricsIntensity" : 0.0532420233835244,
      "Density" : 3.265164644714038
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e21a10c6-9b29-4e71-98ee-945166336e05",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5533214937164593,
      "MetricsIntensity" : 0.05325758192668458,
      "Density" : 1.0030083171120157
    },
    "euclideanDistance" : 17.068162692279568,
    "generation" : 28,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706012134583563,
      "LackOfCohesion" : 0.5533214937164593,
      "MetricsIntensity" : 0.05325758192668458,
      "Density" : 3.2725173210161658
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "eae8e6c5-c495-4f5f-bea6-1cdb5d2d91dd",
    "objectives" : {
      "NumberOfConcerns" : 1.0035691109669047,
      "NumberOfRefactorings" : 17.0,
      "LackOfCohesion" : 0.5533214937164592,
      "MetricsIntensity" : 0.053257581926684595,
      "Density" : 1.0030083171120157
    },
    "euclideanDistance" : 17.068162692279568,
    "generation" : 38,
    "numberOfRefactorings" : 17,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706012134583563,
      "LackOfCohesion" : 0.5533214937164592,
      "MetricsIntensity" : 0.05325758192668459,
      "Density" : 3.2725173210161658
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "558ee60d-9ee3-41be-aefd-69000e373115",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 18.0,
      "LackOfCohesion" : 0.5541626980218177,
      "MetricsIntensity" : 0.053268416870400334,
      "Density" : 0.9975225623783401
    },
    "euclideanDistance" : 18.064165929448638,
    "generation" : 13,
    "numberOfRefactorings" : 18,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7086092715231787,
      "LackOfCohesion" : 0.5541626980218177,
      "MetricsIntensity" : 0.053268416870400334,
      "Density" : 3.258381502890173
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "b9b8fab6-aae8-4fc0-9d8a-68745cee3f7b",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5547559670257823,
      "MetricsIntensity" : 0.0532746033373501,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 19.060771695792823,
    "generation" : 39,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7047461368653423,
      "LackOfCohesion" : 0.5547559670257823,
      "MetricsIntensity" : 0.053274603337350096,
      "Density" : 3.263005780346821
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "aef9c4f8-96e0-43f0-b8a8-79012e528583",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 19.0,
      "LackOfCohesion" : 0.5535740442240031,
      "MetricsIntensity" : 0.053290172042850685,
      "Density" : 1.0017695983011856
    },
    "euclideanDistance" : 19.060868914048445,
    "generation" : 39,
    "numberOfRefactorings" : 19,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704194260485651,
      "LackOfCohesion" : 0.5535740442240031,
      "MetricsIntensity" : 0.053290172042850685,
      "Density" : 3.2703639514731373
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "bf23ffb9-5d7f-41b7-824e-89d0e6fb892c",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.5508862317636402,
      "MetricsIntensity" : 0.05328528439216662,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 20.057722231059532,
    "generation" : 27,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7052980132450333,
      "LackOfCohesion" : 0.5508862317636402,
      "MetricsIntensity" : 0.05328528439216663,
      "Density" : 3.267630057803468
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "37a0efdc-fb8c-426b-9f55-3e193941f3ac",
    "objectives" : {
      "NumberOfConcerns" : 1.0042180402336145,
      "NumberOfRefactorings" : 20.0,
      "LackOfCohesion" : 0.552938008276553,
      "MetricsIntensity" : 0.0532603847171783,
      "Density" : 0.9976995222084587
    },
    "euclideanDistance" : 20.05772757115129,
    "generation" : 37,
    "numberOfRefactorings" : 20,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7080573951434899,
      "LackOfCohesion" : 0.552938008276553,
      "MetricsIntensity" : 0.0532603847171783,
      "Density" : 3.258959537572255
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "8baaa9fa-e539-4680-8eb0-e6a01703b8eb",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5534587030733911,
      "MetricsIntensity" : 0.05326657118412803,
      "Density" : 0.9992921606795258
    },
    "euclideanDistance" : 21.05498245901581,
    "generation" : 37,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7047461368653423,
      "LackOfCohesion" : 0.5534587030733911,
      "MetricsIntensity" : 0.05326657118412803,
      "Density" : 3.2641618497109826
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "aa81a521-46de-496d-915d-639fa99fd12c",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5530429964199314,
      "MetricsIntensity" : 0.05333474227083608,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 21.055059964231337,
    "generation" : 39,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7030905077262692,
      "LackOfCohesion" : 0.5530429964199314,
      "MetricsIntensity" : 0.05333474227083609,
      "Density" : 3.271519352975158
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "8b1839e3-9f22-47e1-b611-a1b05d34d49e",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 21.0,
      "LackOfCohesion" : 0.5523047731800752,
      "MetricsIntensity" : 0.053282139889628655,
      "Density" : 1.0021235179614227
    },
    "euclideanDistance" : 21.055071324024127,
    "generation" : 34,
    "numberOfRefactorings" : 21,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7041942604856515,
      "LackOfCohesion" : 0.5523047731800752,
      "MetricsIntensity" : 0.053282139889628655,
      "Density" : 3.2715193529751594
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "a46a07b9-0e6e-4651-8f8b-678a5f7e0cad",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5540966551229215,
      "MetricsIntensity" : 0.05331167210228431,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 22.052338629191183,
    "generation" : 36,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732748,
      "LackOfCohesion" : 0.5540966551229215,
      "MetricsIntensity" : 0.05331167210228432,
      "Density" : 3.2550607287449393
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "187362ee-4f76-4a78-ab4c-4126bffbce39",
    "objectives" : {
      "NumberOfConcerns" : 1.0032446463335496,
      "NumberOfRefactorings" : 22.0,
      "LackOfCohesion" : 0.5517923238759864,
      "MetricsIntensity" : 0.053272808920140906,
      "Density" : 1.0003539196602371
    },
    "euclideanDistance" : 22.052540002136606,
    "generation" : 24,
    "numberOfRefactorings" : 22,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706401766004415,
      "LackOfCohesion" : 0.5517923238759864,
      "MetricsIntensity" : 0.05327280892014091,
      "Density" : 3.267630057803468
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "3482b0cc-ea79-4258-acc1-71bb38d5e043",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5532955299687896,
      "MetricsIntensity" : 0.05336740411932916,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 23.0500498727051,
    "generation" : 37,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.701270016565433,
      "LackOfCohesion" : 0.5532955299687896,
      "MetricsIntensity" : 0.05336740411932916,
      "Density" : 3.26257952573742
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "d5e616b2-a595-402f-8dc3-42eced71ffdd",
    "objectives" : {
      "NumberOfConcerns" : 1.0045425048669696,
      "NumberOfRefactorings" : 23.0,
      "LackOfCohesion" : 0.5535022522409749,
      "MetricsIntensity" : 0.05323857827566484,
      "Density" : 1.0005308794903558
    },
    "euclideanDistance" : 23.050365870726452,
    "generation" : 35,
    "numberOfRefactorings" : 23,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7086092715231789,
      "LackOfCohesion" : 0.5535022522409749,
      "MetricsIntensity" : 0.05323857827566485,
      "Density" : 3.2682080924855494
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "ec51920a-e434-42e9-9f95-2cadbf4dbf85",
    "objectives" : {
      "NumberOfConcerns" : 1.0038935756002596,
      "NumberOfRefactorings" : 24.0,
      "LackOfCohesion" : 0.5521026273138046,
      "MetricsIntensity" : 0.05328528439216662,
      "Density" : 0.9978764820385773
    },
    "euclideanDistance" : 24.0481021375317,
    "generation" : 37,
    "numberOfRefactorings" : 24,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.707505518763797,
      "LackOfCohesion" : 0.5521026273138046,
      "MetricsIntensity" : 0.05328528439216662,
      "Density" : 3.259537572254336
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "8ebdeb24-5d3a-400b-be22-0a0696064482",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 25.0,
      "LackOfCohesion" : 0.5554299094730502,
      "MetricsIntensity" : 0.053337598079488846,
      "Density" : 0.9978764820385773
    },
    "euclideanDistance" : 25.046099591695146,
    "generation" : 36,
    "numberOfRefactorings" : 25,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702762430939226,
      "LackOfCohesion" : 0.5554299094730502,
      "MetricsIntensity" : 0.053337598079488846,
      "Density" : 3.263310185185186
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "81d82eb7-afb2-4c1f-bb14-9be0bef8f028",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 26.0,
      "LackOfCohesion" : 0.5519402824472722,
      "MetricsIntensity" : 0.05335188663437348,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 26.044134665515536,
    "generation" : 34,
    "numberOfRefactorings" : 26,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7022099447513814,
      "LackOfCohesion" : 0.5519402824472722,
      "MetricsIntensity" : 0.053351886634373485,
      "Density" : 3.254050925925926
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "f7a4dfb6-31b2-431d-aec1-2d039ec08b61",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5516138290800463,
      "MetricsIntensity" : 0.05331921358041404,
      "Density" : 0.9959299239072731
    },
    "euclideanDistance" : 27.04256451315122,
    "generation" : 29,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.70292655991165,
      "LackOfCohesion" : 0.5516138290800463,
      "MetricsIntensity" : 0.05331921358041405,
      "Density" : 3.2550607287449393
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "740c07b8-d950-4f89-8b92-ac2f97c1c21a",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5540718387232202,
      "MetricsIntensity" : 0.05340140920614782,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 27.042583152308,
    "generation" : 36,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7000000000000004,
      "LackOfCohesion" : 0.5540718387232202,
      "MetricsIntensity" : 0.05340140920614782,
      "Density" : 3.261574074074074
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "2c176721-d909-4e2f-814b-c8e409b26d42",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5515858178755645,
      "MetricsIntensity" : 0.05331921358041404,
      "Density" : 0.9991152008494072
    },
    "euclideanDistance" : 27.042681437261898,
    "generation" : 33,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7029265599116508,
      "LackOfCohesion" : 0.5515858178755645,
      "MetricsIntensity" : 0.05331921358041405,
      "Density" : 3.265471370734528
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "339b17d2-30b9-470e-b9e3-cafea908fb38",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 27.0,
      "LackOfCohesion" : 0.5531225483233387,
      "MetricsIntensity" : 0.05329299796596313,
      "Density" : 0.9994691205096443
    },
    "euclideanDistance" : 27.04279795790053,
    "generation" : 40,
    "numberOfRefactorings" : 27,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706239646604085,
      "LackOfCohesion" : 0.5531225483233387,
      "MetricsIntensity" : 0.05329299796596313,
      "Density" : 3.2666281087333724
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "ad53017a-35fd-4a0a-a511-325e74d92dbc",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 28.0,
      "LackOfCohesion" : 0.5510284232005227,
      "MetricsIntensity" : 0.05330987651225344,
      "Density" : 1.0001769598301187
    },
    "euclideanDistance" : 28.041244192805323,
    "generation" : 23,
    "numberOfRefactorings" : 28,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.5510284232005227,
      "MetricsIntensity" : 0.05330987651225345,
      "Density" : 3.268941584731058
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "cee95f45-206d-4892-954c-54a4dfe11434",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5529763927561915,
      "MetricsIntensity" : 0.05333629756431372,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 29.039583148197746,
    "generation" : 37,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7022099447513814,
      "LackOfCohesion" : 0.5529763927561915,
      "MetricsIntensity" : 0.05333629756431372,
      "Density" : 3.252893518518518
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "7aeb0be6-2321-4d9d-9500-c4a9cd559da4",
    "objectives" : {
      "NumberOfConcerns" : 1.0022712524334847,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5506417411856688,
      "MetricsIntensity" : 0.05330053944409285,
      "Density" : 1.0
    },
    "euclideanDistance" : 29.039810518288434,
    "generation" : 21,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7056874654886807,
      "LackOfCohesion" : 0.5506417411856688,
      "MetricsIntensity" : 0.053300539444092854,
      "Density" : 3.2683632157316374
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "e6770ab3-ec4c-4df5-9c62-e413fbd67f4e",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 29.0,
      "LackOfCohesion" : 0.5518244364860112,
      "MetricsIntensity" : 0.053284960562967755,
      "Density" : 0.9998230401698814
    },
    "euclideanDistance" : 29.039838046711978,
    "generation" : 40,
    "numberOfRefactorings" : 29,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040863,
      "LackOfCohesion" : 0.5518244364860112,
      "MetricsIntensity" : 0.05328496056296775,
      "Density" : 3.267784846732216
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "6f1585c3-ef49-4de5-b391-d89fcb0ff097",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5513805029981044,
      "MetricsIntensity" : 0.05334254345956269,
      "Density" : 0.995576004247036
    },
    "euclideanDistance" : 30.038287010094397,
    "generation" : 36,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7033149171270714,
      "LackOfCohesion" : 0.5513805029981044,
      "MetricsIntensity" : 0.05334254345956269,
      "Density" : 3.2557870370370363
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "dd332122-c8d0-4a47-b22e-ec02d721cb54",
    "objectives" : {
      "NumberOfConcerns" : 1.00064892926671,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5512798043362545,
      "MetricsIntensity" : 0.0533425434595627,
      "Density" : 0.9989382410192886
    },
    "euclideanDistance" : 30.038407593256753,
    "generation" : 9,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7038674033149175,
      "LackOfCohesion" : 0.5512798043362545,
      "MetricsIntensity" : 0.05334254345956271,
      "Density" : 3.266782407407407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "28340609-c3a9-415b-a342-c0ff7f9b2c55",
    "objectives" : {
      "NumberOfConcerns" : 1.001622323166775,
      "NumberOfRefactorings" : 30.0,
      "LackOfCohesion" : 0.5532885154904661,
      "MetricsIntensity" : 0.053281814005199345,
      "Density" : 0.9987612811891701
    },
    "euclideanDistance" : 30.03847097487064,
    "generation" : 40,
    "numberOfRefactorings" : 30,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704583103257869,
      "LackOfCohesion" : 0.5532885154904661,
      "MetricsIntensity" : 0.053281814005199345,
      "Density" : 3.2643146327356853
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "53a1b4be-f9b8-4fff-9e36-c8d760eef54e",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5546673895464389,
      "MetricsIntensity" : 0.05337475659067441,
      "Density" : 0.9945142452663246
    },
    "euclideanDistance" : 31.037036223218873,
    "generation" : 35,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7020453289110002,
      "LackOfCohesion" : 0.5546673895464389,
      "MetricsIntensity" : 0.0533747565906744,
      "Density" : 3.254198031268094
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "a22d7fbf-176f-43b9-a3cd-5bbdd2bce609",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 31.0,
      "LackOfCohesion" : 0.5539267734683591,
      "MetricsIntensity" : 0.05332695438950292,
      "Density" : 0.9953990444169174
    },
    "euclideanDistance" : 31.0371244688286,
    "generation" : 38,
    "numberOfRefactorings" : 31,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7049723756906072,
      "LackOfCohesion" : 0.5539267734683591,
      "MetricsIntensity" : 0.05332695438950292,
      "Density" : 3.2552083333333335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "94543201-8ce2-4808-8578-eec4f0869cd8",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5561053370163072,
      "MetricsIntensity" : 0.05337160591437489,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 32.03594073411377,
    "generation" : 27,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700386954118297,
      "LackOfCohesion" : 0.5561053370163072,
      "MetricsIntensity" : 0.05337160591437489,
      "Density" : 3.2611464968152872
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "44222120-ca0f-4d40-9736-7c8c4ec1387c",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 32.0,
      "LackOfCohesion" : 0.5536140439142299,
      "MetricsIntensity" : 0.05331446259900498,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 32.03597010187883,
    "generation" : 40,
    "numberOfRefactorings" : 32,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7022099447513814,
      "LackOfCohesion" : 0.5536140439142299,
      "MetricsIntensity" : 0.05331446259900497,
      "Density" : 3.2615740740740744
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "bae08e13-c960-4838-90c7-b27073952c53",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5532637611794596,
      "MetricsIntensity" : 0.053438609478541906,
      "Density" : 0.9941603256060875
    },
    "euclideanDistance" : 33.03472073260416,
    "generation" : 38,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6998341625207294,
      "LackOfCohesion" : 0.5532637611794596,
      "MetricsIntensity" : 0.053438609478541906,
      "Density" : 3.253039953676896
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "c36599a3-d55e-4a93-a299-b0125226bca7",
    "objectives" : {
      "NumberOfConcerns" : 1.0012978585334198,
      "NumberOfRefactorings" : 33.0,
      "LackOfCohesion" : 0.5526278126370242,
      "MetricsIntensity" : 0.05331891172986726,
      "Density" : 0.9957529640771545
    },
    "euclideanDistance" : 33.03486585068297,
    "generation" : 37,
    "numberOfRefactorings" : 33,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.704972375690607,
      "LackOfCohesion" : 0.5526278126370242,
      "MetricsIntensity" : 0.053318911729867254,
      "Density" : 3.256365740740741
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "d0456d0d-0ecb-46cd-b508-8372c8ed8be4",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5545646034345724,
      "MetricsIntensity" : 0.0533747565906744,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 34.033833856921625,
    "generation" : 39,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.700939745715866,
      "LackOfCohesion" : 0.5545646034345724,
      "MetricsIntensity" : 0.0533747565906744,
      "Density" : 3.2634626519976835
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "902a973a-9998-4843-a623-35b92846a9cf",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 34.0,
      "LackOfCohesion" : 0.5537794149679105,
      "MetricsIntensity" : 0.053326954389502905,
      "Density" : 0.9952220845867988
    },
    "euclideanDistance" : 34.03383507830776,
    "generation" : 39,
    "numberOfRefactorings" : 34,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027625,
      "LackOfCohesion" : 0.5537794149679105,
      "MetricsIntensity" : 0.0533269543895029,
      "Density" : 3.2546296296296298
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "a4514f18-4f2d-48d2-b382-eb2602664f16",
    "objectives" : {
      "NumberOfConcerns" : 1.0029201817001947,
      "NumberOfRefactorings" : 35.0,
      "LackOfCohesion" : 0.5572546914856146,
      "MetricsIntensity" : 0.05330233503412373,
      "Density" : 0.9961068837373916
    },
    "euclideanDistance" : 35.033005177186745,
    "generation" : 26,
    "numberOfRefactorings" : 35,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.706791827719492,
      "LackOfCohesion" : 0.5572546914856146,
      "MetricsIntensity" : 0.05330233503412373,
      "Density" : 3.2575231481481484
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultEntryPointMappings, org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultDeniedHandlerMappings], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.authenticationEntryPoint(AuthenticationEntryPoint), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAuthenticationEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAuthenticationEntryPointFor(AuthenticationEntryPoint, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultEntryPoint(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "567d2c45-0418-46e3-94c6-239eaf726074",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.551973296693329,
      "MetricsIntensity" : 0.053367205241500036,
      "Density" : 0.9948681649265617
    },
    "euclideanDistance" : 36.031892612579234,
    "generation" : 41,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037037,
      "LackOfCohesion" : 0.551973296693329,
      "MetricsIntensity" : 0.05336720524150003,
      "Density" : 3.2553561088592935
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "0c060464-9e27-4e42-bdc5-3c9e8f41141f",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5532068258448227,
      "MetricsIntensity" : 0.05336405456520051,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 36.03190645192057,
    "generation" : 25,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7003869541182977,
      "LackOfCohesion" : 0.5532068258448227,
      "MetricsIntensity" : 0.05336405456520051,
      "Density" : 3.261146496815287
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "eaf4653d-3867-463d-a67f-acf4e59a1d7e",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 36.0,
      "LackOfCohesion" : 0.5543183524799097,
      "MetricsIntensity" : 0.05334845529286974,
      "Density" : 0.9966377632277473
    },
    "euclideanDistance" : 36.03194149212668,
    "generation" : 36,
    "numberOfRefactorings" : 36,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7014925373134326,
      "LackOfCohesion" : 0.5543183524799097,
      "MetricsIntensity" : 0.05334845529286973,
      "Density" : 3.2611464968152872
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "e7683eb1-c2a4-4a3e-832b-afcabe5a85a6",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5520532804062337,
      "MetricsIntensity" : 0.05337655453095404,
      "Density" : 0.9975225623783401
    },
    "euclideanDistance" : 37.0310602215091,
    "generation" : 39,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7009397457158655,
      "LackOfCohesion" : 0.5520532804062337,
      "MetricsIntensity" : 0.05337655453095404,
      "Density" : 3.2640416907932823
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "19f03a6b-eef1-40f7-b5d3-d2b85375811f",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 37.0,
      "LackOfCohesion" : 0.5519805637104804,
      "MetricsIntensity" : 0.053376554530954023,
      "Density" : 0.9976995222084587
    },
    "euclideanDistance" : 37.031072653965516,
    "generation" : 40,
    "numberOfRefactorings" : 37,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7014925373134322,
      "LackOfCohesion" : 0.5519805637104804,
      "MetricsIntensity" : 0.053376554530954023,
      "Density" : 3.264620729588882
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "2ddf33fc-157c-40c3-8b23-6e60d0d3fe4b",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5548812663712385,
      "MetricsIntensity" : 0.05347716069281388,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 38.03013183015927,
    "generation" : 17,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698561946902655,
      "LackOfCohesion" : 0.5548812663712385,
      "MetricsIntensity" : 0.053477160692813885,
      "Density" : 3.253186558516802
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "23baea4f-f002-4dd3-9308-9adf1b0a8375",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5553708262910538,
      "MetricsIntensity" : 0.05340881103089512,
      "Density" : 0.9932755264554946
    },
    "euclideanDistance" : 38.03014664304237,
    "generation" : 40,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6996681415929207,
      "LackOfCohesion" : 0.5553708262910538,
      "MetricsIntensity" : 0.05340881103089511,
      "Density" : 3.2520278099652375
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "aa0f47d6-b982-4c17-b15b-4a43bff3e160",
    "objectives" : {
      "NumberOfConcerns" : 1.0025957170668398,
      "NumberOfRefactorings" : 38.0,
      "LackOfCohesion" : 0.5568596611204355,
      "MetricsIntensity" : 0.05328985140819472,
      "Density" : 0.9985843213590515
    },
    "euclideanDistance" : 38.030452289043204,
    "generation" : 39,
    "numberOfRefactorings" : 38,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7062396466040863,
      "LackOfCohesion" : 0.5568596611204355,
      "MetricsIntensity" : 0.05328985140819473,
      "Density" : 3.265625
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "b520c76f-68de-43ae-9749-2f28efaee57d",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5511360158822262,
      "MetricsIntensity" : 0.05335785595204601,
      "Density" : 0.9952220845867988
    },
    "euclideanDistance" : 39.02943844031635,
    "generation" : 35,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7037037037037037,
      "LackOfCohesion" : 0.5511360158822262,
      "MetricsIntensity" : 0.053357855952046014,
      "Density" : 3.2565141864504916
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "75c0d750-414a-4560-85f3-21e84aab3eda",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 39.0,
      "LackOfCohesion" : 0.5553682219138808,
      "MetricsIntensity" : 0.05333629756431373,
      "Density" : 0.9945142452663246
    },
    "euclideanDistance" : 39.029480360447884,
    "generation" : 42,
    "numberOfRefactorings" : 39,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7027624309392262,
      "LackOfCohesion" : 0.5553682219138808,
      "MetricsIntensity" : 0.05333629756431373,
      "Density" : 3.254198031268094
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "05779814-cdc9-4d9e-8583-297dc33a429b",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5551389711389464,
      "MetricsIntensity" : 0.05341191236714266,
      "Density" : 0.9964608033976288
    },
    "euclideanDistance" : 40.028716372204954,
    "generation" : 20,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699668141592921,
      "LackOfCohesion" : 0.5551389711389464,
      "MetricsIntensity" : 0.05341191236714267,
      "Density" : 3.262456546929317
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "9050279d-d926-4c9f-aff1-86b4b7a7bacb",
    "objectives" : {
      "NumberOfConcerns" : 0.9990266060999351,
      "NumberOfRefactorings" : 40.0,
      "LackOfCohesion" : 0.5525739633520945,
      "MetricsIntensity" : 0.0533547052757465,
      "Density" : 0.9973456025482216
    },
    "euclideanDistance" : 40.02875138097824,
    "generation" : 39,
    "numberOfRefactorings" : 40,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7020453289110005,
      "LackOfCohesion" : 0.5525739633520945,
      "MetricsIntensity" : 0.0533547052757465,
      "Density" : 3.263462651997683
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "e60d1b9a-eb87-4ccf-8f05-faa81e84e4be",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5535252513609994,
      "MetricsIntensity" : 0.053463350322562324,
      "Density" : 0.9968147230578659
    },
    "euclideanDistance" : 41.027995434348114,
    "generation" : 35,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6991150442477878,
      "LackOfCohesion" : 0.5535252513609994,
      "MetricsIntensity" : 0.053463350322562324,
      "Density" : 3.2636152954808804
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "e5bb4a0f-fa8a-4834-865a-b6b7a43166a9",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 41.0,
      "LackOfCohesion" : 0.5534524870446202,
      "MetricsIntensity" : 0.05346335032256234,
      "Density" : 0.9969916828879845
    },
    "euclideanDistance" : 41.028006636504436,
    "generation" : 36,
    "numberOfRefactorings" : 41,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699668141592921,
      "LackOfCohesion" : 0.5534524870446202,
      "MetricsIntensity" : 0.05346335032256234,
      "Density" : 3.2641946697566633
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "514b8903-a829-4bed-9148-2a544977d6e6",
    "objectives" : {
      "NumberOfConcerns" : 1.0,
      "NumberOfRefactorings" : 42.0,
      "LackOfCohesion" : 0.5570432691252262,
      "MetricsIntensity" : 0.05334564073912451,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 42.027394037678235,
    "generation" : 25,
    "numberOfRefactorings" : 42,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7027624309392262,
      "LackOfCohesion" : 0.5570432691252262,
      "MetricsIntensity" : 0.05334564073912451,
      "Density" : 3.253618992472495
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "b8f477a9-c854-47d4-9454-9b2d37cf46a4",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5552417239803789,
      "MetricsIntensity" : 0.05345852982039623,
      "Density" : 0.9927446469651389
    },
    "euclideanDistance" : 43.02660713011505,
    "generation" : 33,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809076,
      "LackOfCohesion" : 0.5552417239803789,
      "MetricsIntensity" : 0.05345852982039623,
      "Density" : 3.252173913043478
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "0759e97b-ff34-4ba9-9e15-fdeec3d386db",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5544228719619743,
      "MetricsIntensity" : 0.05339010020668332,
      "Density" : 0.9936294461157317
    },
    "euclideanDistance" : 43.026654498736754,
    "generation" : 28,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831853,
      "LackOfCohesion" : 0.5544228719619743,
      "MetricsIntensity" : 0.05339010020668332,
      "Density" : 3.253186558516802
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "8db6c060-8d8d-4ae3-b205-4b1930f6b764",
    "objectives" : {
      "NumberOfConcerns" : 1.0019467878001298,
      "NumberOfRefactorings" : 43.0,
      "LackOfCohesion" : 0.5573807449748525,
      "MetricsIntensity" : 0.05329115107335993,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 43.02690121153032,
    "generation" : 40,
    "numberOfRefactorings" : 43,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7051352843732743,
      "LackOfCohesion" : 0.5573807449748525,
      "MetricsIntensity" : 0.05329115107335994,
      "Density" : 3.265046296296296
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f8fe20b0-c8ef-47d9-b676-3d685d98bfd8",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5516577817835734,
      "MetricsIntensity" : 0.053359157318343634,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 44.02608307436343,
    "generation" : 42,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702598120508568,
      "LackOfCohesion" : 0.5516577817835734,
      "MetricsIntensity" : 0.053359157318343634,
      "Density" : 3.2559351476548923
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "4dcfe116-c507-4867-8e79-39a62924d4fa",
    "objectives" : {
      "NumberOfConcerns" : 0.999675535366645,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5515570172194579,
      "MetricsIntensity" : 0.053359157318343654,
      "Density" : 0.998407361528933
    },
    "euclideanDistance" : 44.02616529722387,
    "generation" : 22,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7031509121061363,
      "LackOfCohesion" : 0.5515570172194579,
      "MetricsIntensity" : 0.053359157318343654,
      "Density" : 3.266936884771279
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.pathInfo, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURI, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setPathInfo(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURI(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "830783dd-8034-407c-a6f3-3046fca093aa",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 44.0,
      "LackOfCohesion" : 0.5564281472049551,
      "MetricsIntensity" : 0.05338275314410853,
      "Density" : 0.9985843213590515
    },
    "euclideanDistance" : 44.02617912051661,
    "generation" : 27,
    "numberOfRefactorings" : 44,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6992813709231618,
      "LackOfCohesion" : 0.5564281472049551,
      "MetricsIntensity" : 0.05338275314410852,
      "Density" : 3.267515923566879
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "e25fbcc3-ee5c-4765-b8cc-e1578cdd02c1",
    "objectives" : {
      "NumberOfConcerns" : 1.000324464633355,
      "NumberOfRefactorings" : 45.0,
      "LackOfCohesion" : 0.5576362806702796,
      "MetricsIntensity" : 0.053323805773815756,
      "Density" : 0.997168642718103
    },
    "euclideanDistance" : 45.02564598077796,
    "generation" : 38,
    "numberOfRefactorings" : 45,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7033149171270712,
      "LackOfCohesion" : 0.5576362806702796,
      "MetricsIntensity" : 0.05332380577381576,
      "Density" : 3.262883613202084
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "176bc335-af90-4837-b111-e9f5a3fe9626",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5544033458156573,
      "MetricsIntensity" : 0.05344916827761397,
      "Density" : 0.993098566625376
    },
    "euclideanDistance" : 46.02487037086802,
    "generation" : 30,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809078,
      "LackOfCohesion" : 0.5544033458156573,
      "MetricsIntensity" : 0.053449168277613965,
      "Density" : 3.2533333333333334
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "9824bd60-3379-4aca-939e-bfba46f8aa9f",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5550992605023977,
      "MetricsIntensity" : 0.05350194301262614,
      "Density" : 0.9932755264554946
    },
    "euclideanDistance" : 46.024875617754454,
    "generation" : 36,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698395130049806,
      "LackOfCohesion" : 0.5550992605023977,
      "MetricsIntensity" : 0.053501943012626146,
      "Density" : 3.253913043478261
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "f770123f-b5c4-4214-b27b-feb9a8f00b3f",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.5518371400049261,
      "MetricsIntensity" : 0.05339189932439599,
      "Density" : 0.9939833657759689
    },
    "euclideanDistance" : 46.02490073938046,
    "generation" : 36,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283182,
      "LackOfCohesion" : 0.5518371400049261,
      "MetricsIntensity" : 0.05339189932439599,
      "Density" : 3.254345307068366
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "f6375388-ced8-41dd-a160-515ad62fdc7f",
    "objectives" : {
      "NumberOfConcerns" : 0.9983776768332252,
      "NumberOfRefactorings" : 46.0,
      "LackOfCohesion" : 0.555998940258307,
      "MetricsIntensity" : 0.053370304548077285,
      "Density" : 0.9934524862856131
    },
    "euclideanDistance" : 46.024946377362376,
    "generation" : 38,
    "numberOfRefactorings" : 46,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7009397457158655,
      "LackOfCohesion" : 0.555998940258307,
      "MetricsIntensity" : 0.05337030454807729,
      "Density" : 3.25260718424102
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "1e5b6ad4-fdf0-4623-b2cf-d0108718b39a",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5591599792365752,
      "MetricsIntensity" : 0.05340565829128433,
      "Density" : 0.9953990444169174
    },
    "euclideanDistance" : 49.02346226593351,
    "generation" : 13,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699115044247788,
      "LackOfCohesion" : 0.5591599792365752,
      "MetricsIntensity" : 0.053405658291284325,
      "Density" : 3.2608695652173916
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "2d4f26e8-90f8-473c-a51d-b0e26dc183af",
    "objectives" : {
      "NumberOfConcerns" : 0.9987021414665801,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5565923398999212,
      "MetricsIntensity" : 0.05334845529286973,
      "Density" : 0.9962838435675102
    },
    "euclideanDistance" : 49.0234905790565,
    "generation" : 36,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7014925373134324,
      "LackOfCohesion" : 0.5565923398999212,
      "MetricsIntensity" : 0.05334845529286973,
      "Density" : 3.2618771726535343
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "e917bf9e-b65b-4d8b-9de3-1ccd3a5d46de",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5579749603698275,
      "MetricsIntensity" : 0.053421267779248584,
      "Density" : 0.9982304016988144
    },
    "euclideanDistance" : 49.023499756134775,
    "generation" : 26,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698561946902655,
      "LackOfCohesion" : 0.5579749603698275,
      "MetricsIntensity" : 0.05342126777924858,
      "Density" : 3.268250289687139
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "1587bf5a-ae9e-4600-89a1-1e026fc36ea1",
    "objectives" : {
      "NumberOfConcerns" : 1.000973393900065,
      "NumberOfRefactorings" : 49.0,
      "LackOfCohesion" : 0.5566199996430273,
      "MetricsIntensity" : 0.05332825490467805,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 49.02351203516911,
    "generation" : 31,
    "numberOfRefactorings" : 49,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7044198895027622,
      "LackOfCohesion" : 0.5566199996430273,
      "MetricsIntensity" : 0.05332825490467805,
      "Density" : 3.2559351476548932
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "f6574f4c-df15-4be7-857e-4213f2667919",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5526868312281709,
      "MetricsIntensity" : 0.05342598731453412,
      "Density" : 0.9929216067952574
    },
    "euclideanDistance" : 50.02286562066785,
    "generation" : 38,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6995019369120088,
      "LackOfCohesion" : 0.5526868312281709,
      "MetricsIntensity" : 0.053425987314534115,
      "Density" : 3.2527536231884064
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "4446a291-fb23-4b62-b2ba-e570b58427c6",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 50.0,
      "LackOfCohesion" : 0.5575462594586283,
      "MetricsIntensity" : 0.05345709624670399,
      "Density" : 0.9925676871350203
    },
    "euclideanDistance" : 50.022912556375,
    "generation" : 34,
    "numberOfRefactorings" : 50,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6985619469026547,
      "LackOfCohesion" : 0.5575462594586283,
      "MetricsIntensity" : 0.053457096246703986,
      "Density" : 3.25159420289855
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "93d6b9d6-3753-4589-b0d6-b0f72ee64b99",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5559430981489346,
      "MetricsIntensity" : 0.05341996556071368,
      "Density" : 0.9927446469651389
    },
    "euclideanDistance" : 51.02246207817924,
    "generation" : 41,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.699668141592921,
      "LackOfCohesion" : 0.5559430981489346,
      "MetricsIntensity" : 0.053419965560713684,
      "Density" : 3.252173913043478
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "86ca667e-b24b-4ab0-a7c9-a38c652c95ca",
    "objectives" : {
      "NumberOfConcerns" : 0.9993510707332901,
      "NumberOfRefactorings" : 51.0,
      "LackOfCohesion" : 0.5568752047038757,
      "MetricsIntensity" : 0.05336095525862326,
      "Density" : 0.9938064059458503
    },
    "euclideanDistance" : 51.02253728618595,
    "generation" : 29,
    "numberOfRefactorings" : 51,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.702598120508568,
      "LackOfCohesion" : 0.5568752047038757,
      "MetricsIntensity" : 0.05336095525862326,
      "Density" : 3.2537659327925854
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.delegate], extractedMethods=[org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString(), org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "ec9f17e2-ed66-4c61-924a-2d671bfad967",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 52.0,
      "LackOfCohesion" : 0.555072147599416,
      "MetricsIntensity" : 0.053473948492445626,
      "Density" : 0.9922137674747832
    },
    "euclideanDistance" : 52.02197985791382,
    "generation" : 32,
    "numberOfRefactorings" : 52,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698781838316722,
      "LackOfCohesion" : 0.555072147599416,
      "MetricsIntensity" : 0.053473948492445626,
      "Density" : 3.2523201856148494
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method, org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath], extractedMethods=[org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String), org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "7fbd80da-e679-41ff-9e3f-12c24d1e8e1f",
    "objectives" : {
      "NumberOfConcerns" : 0.9967553536664504,
      "NumberOfRefactorings" : 53.0,
      "LackOfCohesion" : 0.5562595698914359,
      "MetricsIntensity" : 0.0533981019968911,
      "Density" : 0.9980534418686958
    },
    "euclideanDistance" : 53.02171166582876,
    "generation" : 23,
    "numberOfRefactorings" : 53,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6991150442477871,
      "LackOfCohesion" : 0.5562595698914359,
      "MetricsIntensity" : 0.0533981019968911,
      "Density" : 3.2676709154113546
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "5039ddb9-df10-4d94-9723-62bd994ea292",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.559033359988119,
      "MetricsIntensity" : 0.05345537501476995,
      "Density" : 0.9948681649265617
    },
    "euclideanDistance" : 54.02126174157429,
    "generation" : 24,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6983951300498064,
      "LackOfCohesion" : 0.559033359988119,
      "MetricsIntensity" : 0.05345537501476995,
      "Density" : 3.2610208816705337
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "e9802e4c-5379-411d-8c15-55e51752a668",
    "objectives" : {
      "NumberOfConcerns" : 0.9974042829331603,
      "NumberOfRefactorings" : 54.0,
      "LackOfCohesion" : 0.5565368863954223,
      "MetricsIntensity" : 0.0533981019968911,
      "Density" : 0.995576004247036
    },
    "euclideanDistance" : 54.021278877374435,
    "generation" : 39,
    "numberOfRefactorings" : 54,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7002212389380533,
      "LackOfCohesion" : 0.5565368863954223,
      "MetricsIntensity" : 0.05339810199689111,
      "Density" : 3.2614492753623185
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "73e74808-2709-4deb-8fe9-8870774be964",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5567226680399598,
      "MetricsIntensity" : 0.053454071942880876,
      "Density" : 0.9918598478145461
    },
    "euclideanDistance" : 55.02079756906492,
    "generation" : 28,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698395130049806,
      "LackOfCohesion" : 0.5567226680399598,
      "MetricsIntensity" : 0.05345407194288087,
      "Density" : 3.2511600928074245
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "99eaef6f-92f0-4b5b-a391-d8ca6794139f",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5574185827267003,
      "MetricsIntensity" : 0.05350684667789303,
      "Density" : 0.9920368076446646
    },
    "euclideanDistance" : 55.020801985352314,
    "generation" : 34,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6978417266187051,
      "LackOfCohesion" : 0.5574185827267003,
      "MetricsIntensity" : 0.05350684667789303,
      "Density" : 3.2517401392111367
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "a6947b68-5db2-4409-ba1d-35ba02e463d0",
    "objectives" : {
      "NumberOfConcerns" : 0.9951330304996755,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5579090235513477,
      "MetricsIntensity" : 0.05351130455540841,
      "Density" : 0.9923907273049017
    },
    "euclideanDistance" : 55.020807473557745,
    "generation" : 28,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6972883231876041,
      "LackOfCohesion" : 0.5579090235513477,
      "MetricsIntensity" : 0.0535113045554084,
      "Density" : 3.252900232018562
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "c5fcdab9-a140-4608-9c5f-b7a2767b71ba",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5583989042836929,
      "MetricsIntensity" : 0.0534429101034097,
      "Density" : 0.9920368076446646
    },
    "euclideanDistance" : 55.02081773492705,
    "generation" : 29,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6983951300498061,
      "LackOfCohesion" : 0.5583989042836929,
      "MetricsIntensity" : 0.0534429101034097,
      "Density" : 3.2517401392111367
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "739661aa-ec7a-4262-a9d8-0a7e27ed3b5e",
    "objectives" : {
      "NumberOfConcerns" : 0.9977287475665152,
      "NumberOfRefactorings" : 55.0,
      "LackOfCohesion" : 0.5558300818662374,
      "MetricsIntensity" : 0.05338564524853764,
      "Density" : 0.9929216067952574
    },
    "euclideanDistance" : 55.02084289683308,
    "generation" : 31,
    "numberOfRefactorings" : 55,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7007743362831855,
      "LackOfCohesion" : 0.5558300818662374,
      "MetricsIntensity" : 0.053385645248537644,
      "Density" : 3.252753623188407
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "80ad4da9-0db5-44f3-a3e0-394ca2601660",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 57.0,
      "LackOfCohesion" : 0.5581949818233973,
      "MetricsIntensity" : 0.053446013471987706,
      "Density" : 0.9952220845867988
    },
    "euclideanDistance" : 57.02014106281336,
    "generation" : 19,
    "numberOfRefactorings" : 57,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.698395130049806,
      "LackOfCohesion" : 0.5581949818233973,
      "MetricsIntensity" : 0.053446013471987706,
      "Density" : 3.2621809744779586
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "2070a3a2-8f2a-43d5-ae22-e78d4f584268",
    "objectives" : {
      "NumberOfConcerns" : 0.9980532121998702,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5555192742862742,
      "MetricsIntensity" : 0.05340255695503676,
      "Density" : 0.9934524862856131
    },
    "euclideanDistance" : 58.01977690024396,
    "generation" : 37,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7013274336283188,
      "LackOfCohesion" : 0.5555192742862742,
      "MetricsIntensity" : 0.05340255695503676,
      "Density" : 3.254492753623188
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.web.FilterInvocation.getChain(), org.springframework.security.web.FilterInvocation.getHttpResponse(), org.springframework.security.web.FilterInvocation.getFullRequestUrl(), org.springframework.security.web.FilterInvocation.toString(), org.springframework.security.web.FilterInvocation.getResponse()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache(), org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl), org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)]"
      } ]
    } ]
  }, {
    "solutionId" : "5cd2627f-b9af-4877-b5e6-e055fc52a9d7",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5573168454006328,
      "MetricsIntensity" : 0.05343219405169013,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 58.019781933990025,
    "generation" : 35,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809076,
      "LackOfCohesion" : 0.5573168454006328,
      "MetricsIntensity" : 0.05343219405169012,
      "Density" : 3.2604408352668215
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "40fafa35-2fd1-44dc-a283-2b521e59e9fb",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 58.0,
      "LackOfCohesion" : 0.5589930816443657,
      "MetricsIntensity" : 0.05342103221221899,
      "Density" : 0.9948681649265617
    },
    "euclideanDistance" : 58.019801083305374,
    "generation" : 37,
    "numberOfRefactorings" : 58,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809076,
      "LackOfCohesion" : 0.5589930816443657,
      "MetricsIntensity" : 0.053421032212218986,
      "Density" : 3.261020881670534
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "d19c2864-4ba9-47ef-934b-1a005e37d381",
    "objectives" : {
      "NumberOfConcerns" : 0.9957819597663855,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5554965942771214,
      "MetricsIntensity" : 0.053435348857316343,
      "Density" : 0.9920368076446646
    },
    "euclideanDistance" : 59.01937944897318,
    "generation" : 37,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6983951300498061,
      "LackOfCohesion" : 0.5554965942771214,
      "MetricsIntensity" : 0.05343534885731635,
      "Density" : 3.2517401392111367
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "1709e900-d99d-4eb7-9cb1-94716ed09835",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5566823896962064,
      "MetricsIntensity" : 0.05341972914032985,
      "Density" : 0.9918598478145461
    },
    "euclideanDistance" : 59.019393108679935,
    "generation" : 30,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809078,
      "LackOfCohesion" : 0.5566823896962064,
      "MetricsIntensity" : 0.05341972914032986,
      "Density" : 3.2511600928074245
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "fd22ccd4-e0bd-4aae-a0c7-55132d308142",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 59.0,
      "LackOfCohesion" : 0.5566823896962064,
      "MetricsIntensity" : 0.05341972914032985,
      "Density" : 0.9918598478145461
    },
    "euclideanDistance" : 59.019393108679935,
    "generation" : 37,
    "numberOfRefactorings" : 59,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809071,
      "LackOfCohesion" : 0.5566823896962064,
      "MetricsIntensity" : 0.053419729140329865,
      "Density" : 3.2511600928074245
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter, org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.context], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "979ecb9f-fcdf-4231-b90e-6806994e0a28",
    "objectives" : {
      "NumberOfConcerns" : 0.9948085658663206,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5582717029406781,
      "MetricsIntensity" : 0.05349268385544327,
      "Density" : 0.9915059281543089
    },
    "euclideanDistance" : 60.019057447196026,
    "generation" : 26,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.697674418604651,
      "LackOfCohesion" : 0.5582717029406781,
      "MetricsIntensity" : 0.05349268385544327,
      "Density" : 3.2518862449216477
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "e9ac885c-40e2-4667-9b9d-e5037f3af557",
    "objectives" : {
      "NumberOfConcerns" : 0.9944841012329656,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5589680739649178,
      "MetricsIntensity" : 0.05354549319683909,
      "Density" : 0.9916828879844275
    },
    "euclideanDistance" : 60.01906152219876,
    "generation" : 24,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6971207087486158,
      "LackOfCohesion" : 0.5589680739649178,
      "MetricsIntensity" : 0.05354549319683909,
      "Density" : 3.2524666279744627
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "0c16576d-43a8-4777-8da0-e2c9f29c2c0b",
    "objectives" : {
      "NumberOfConcerns" : 0.9944841012329656,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5589680739649181,
      "MetricsIntensity" : 0.053545493196839065,
      "Density" : 0.9916828879844275
    },
    "euclideanDistance" : 60.01906152219876,
    "generation" : 30,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.697120708748616,
      "LackOfCohesion" : 0.5589680739649181,
      "MetricsIntensity" : 0.05354549319683907,
      "Density" : 3.2524666279744627
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "eb7a8cbe-d33f-45ae-a977-160d04c1455d",
    "objectives" : {
      "NumberOfConcerns" : 0.9970798182998053,
      "NumberOfRefactorings" : 60.0,
      "LackOfCohesion" : 0.5550105505407501,
      "MetricsIntensity" : 0.05342598731453411,
      "Density" : 0.9929216067952574
    },
    "euclideanDistance" : 60.019088234732735,
    "generation" : 36,
    "numberOfRefactorings" : 60,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.7006087437742117,
      "LackOfCohesion" : 0.5550105505407501,
      "MetricsIntensity" : 0.05342598731453411,
      "Density" : 3.2546403712296987
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H), org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "4226c62f-be0c-4acf-aabc-2dcbd66866b4",
    "objectives" : {
      "NumberOfConcerns" : 0.9961064243997404,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.5564784672359111,
      "MetricsIntensity" : 0.05342283250890786,
      "Density" : 0.9950451247566803
    },
    "euclideanDistance" : 61.01880747025922,
    "generation" : 31,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6989485334809074,
      "LackOfCohesion" : 0.5564784672359111,
      "MetricsIntensity" : 0.053422832508907864,
      "Density" : 3.261600928074246
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "1d8ab8de-cb39-47a5-8f14-525901dc29be",
    "objectives" : {
      "NumberOfConcerns" : 0.9964308890330954,
      "NumberOfRefactorings" : 61.0,
      "LackOfCohesion" : 0.5564056552364935,
      "MetricsIntensity" : 0.05342283250890788,
      "Density" : 0.9952220845867988
    },
    "euclideanDistance" : 61.01881498985769,
    "generation" : 36,
    "numberOfRefactorings" : 61,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6995019369120097,
      "LackOfCohesion" : 0.5564056552364935,
      "MetricsIntensity" : 0.05342283250890787,
      "Density" : 3.262180974477959
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "61da5599-3510-4e1d-a215-62355d884387",
    "objectives" : {
      "NumberOfConcerns" : 0.9948085658663206,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.557432775019783,
      "MetricsIntensity" : 0.05348331617394445,
      "Density" : 0.9918598478145461
    },
    "euclideanDistance" : 63.01814835271029,
    "generation" : 37,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6976744186046508,
      "LackOfCohesion" : 0.557432775019783,
      "MetricsIntensity" : 0.05348331617394445,
      "Density" : 3.2530470110272787
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.messages, org.springframework.security.web.access.ExceptionTranslationFilter.throwableAnalyzer, org.springframework.security.web.access.ExceptionTranslationFilter.accessDeniedHandler], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer), org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException), org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain), org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource), org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException), org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception), org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException), org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "305785df-9af8-47ae-8a1d-3c899fe95581",
    "objectives" : {
      "NumberOfConcerns" : 0.9944841012329656,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5581291460440228,
      "MetricsIntensity" : 0.05353612551534025,
      "Density" : 0.9920368076446646
    },
    "euclideanDistance" : 63.01815222549552,
    "generation" : 19,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6971207087486155,
      "LackOfCohesion" : 0.5581291460440228,
      "MetricsIntensity" : 0.05353612551534024,
      "Density" : 3.2536273940800937
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.ExceptionTranslationFilter.authenticationTrustResolver], extractedMethods=[org.springframework.security.web.access.ExceptionTranslationFilter.getAuthenticationTrustResolver(), org.springframework.security.web.access.ExceptionTranslationFilter.setAuthenticationTrustResolver(AuthenticationTrustResolver)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "5f6422cc-ad07-4e2b-a81f-5568e11def66",
    "objectives" : {
      "NumberOfConcerns" : 0.9951330304996755,
      "NumberOfRefactorings" : 63.0,
      "LackOfCohesion" : 0.5588662699258495,
      "MetricsIntensity" : 0.05347079161809438,
      "Density" : 0.994337285436206
    },
    "euclideanDistance" : 63.01820520309046,
    "generation" : 9,
    "numberOfRefactorings" : 63,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6982281284606866,
      "LackOfCohesion" : 0.5588662699258495,
      "MetricsIntensity" : 0.05347079161809438,
      "Density" : 3.261172373766686
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "a9f61500-e278-4592-a086-ca0faaed7320",
    "objectives" : {
      "NumberOfConcerns" : 0.9951330304996755,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5565540627698558,
      "MetricsIntensity" : 0.05346948769173191,
      "Density" : 0.9913289683241904
    },
    "euclideanDistance" : 64.01785402747213,
    "generation" : 39,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6982281284606864,
      "LackOfCohesion" : 0.5565540627698558,
      "MetricsIntensity" : 0.05346948769173191,
      "Density" : 3.2513058618688335
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "49a9fc7b-4f2c-4a35-9e60-9f0dc7b848b0",
    "objectives" : {
      "NumberOfConcerns" : 0.9948085658663206,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5570448251950445,
      "MetricsIntensity" : 0.053473948492445654,
      "Density" : 0.9916828879844275
    },
    "euclideanDistance" : 64.01785873827306,
    "generation" : 38,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6976744186046508,
      "LackOfCohesion" : 0.5570448251950445,
      "MetricsIntensity" : 0.053473948492445654,
      "Density" : 3.2524666279744627
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[], extractedMethods=[org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder(), org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "7af15ef2-5886-4db0-8ba1-f120fa8b8a4c",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 64.0,
      "LackOfCohesion" : 0.5564812030248649,
      "MetricsIntensity" : 0.05346948769173189,
      "Density" : 0.9915059281543089
    },
    "euclideanDistance" : 64.01786117909293,
    "generation" : 40,
    "numberOfRefactorings" : 64,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6987818383167215,
      "LackOfCohesion" : 0.5564812030248649,
      "MetricsIntensity" : 0.0534694876917319,
      "Density" : 3.2518862449216477
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "072f8943-4df3-48ca-8e01-7a5e885306d1",
    "objectives" : {
      "NumberOfConcerns" : 0.9951330304996755,
      "NumberOfRefactorings" : 66.0,
      "LackOfCohesion" : 0.5580273420049546,
      "MetricsIntensity" : 0.05346142393659554,
      "Density" : 0.9946912050964432
    },
    "euclideanDistance" : 66.01737614431644,
    "generation" : 13,
    "numberOfRefactorings" : 66,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6982281284606866,
      "LackOfCohesion" : 0.5580273420049546,
      "MetricsIntensity" : 0.053461423936595545,
      "Density" : 3.2623331398723154
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.observeOncePerRequest, org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED], extractedMethods=[org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy(), org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "687ddd8c-3131-43d4-944b-97900d254030",
    "objectives" : {
      "NumberOfConcerns" : 0.9951330304996755,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5557151348489606,
      "MetricsIntensity" : 0.05346012001023307,
      "Density" : 0.9916828879844275
    },
    "euclideanDistance" : 67.01705306856041,
    "generation" : 9,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6982281284606875,
      "LackOfCohesion" : 0.5557151348489606,
      "MetricsIntensity" : 0.05346012001023308,
      "Density" : 3.2524666279744627
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getDescription(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "10ab5e69-82d3-40d9-bad1-6319d1f3e661",
    "objectives" : {
      "NumberOfConcerns" : 0.9954574951330305,
      "NumberOfRefactorings" : 67.0,
      "LackOfCohesion" : 0.5556422751039696,
      "MetricsIntensity" : 0.05346012001023307,
      "Density" : 0.9918598478145461
    },
    "euclideanDistance" : 67.01705990197298,
    "generation" : 7,
    "numberOfRefactorings" : 67,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6987818383167217,
      "LackOfCohesion" : 0.5556422751039696,
      "MetricsIntensity" : 0.05346012001023307,
      "Density" : 3.2530470110272787
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Extract Class",
        "change" : "extractedFields=[org.springframework.security.ldap.userdetails.Person.telephoneNumber, org.springframework.security.ldap.userdetails.Person.cn, org.springframework.security.ldap.userdetails.Person.description, org.springframework.security.ldap.userdetails.Person.serialVersionUID], extractedMethods=[org.springframework.security.ldap.userdetails.Person.getTelephoneNumber(), org.springframework.security.ldap.userdetails.Person.getCn(), org.springframework.security.ldap.userdetails.Person.getDescription()]"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "729878cb-9862-4e64-bedd-461ae8c3a083",
    "objectives" : {
      "NumberOfConcerns" : 0.9941596365996106,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5581040034642949,
      "MetricsIntensity" : 0.05350813505551571,
      "Density" : 0.9909750486639533
    },
    "euclideanDistance" : 69.01655401517318,
    "generation" : 22,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6975069252077566,
      "LackOfCohesion" : 0.5581040034642949,
      "MetricsIntensity" : 0.05350813505551571,
      "Density" : 3.252032520325204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "ab50a7ea-a62d-41d1-a46f-cb0b0e13f8af",
    "objectives" : {
      "NumberOfConcerns" : 0.9941596365996106,
      "NumberOfRefactorings" : 69.0,
      "LackOfCohesion" : 0.5581040034642951,
      "MetricsIntensity" : 0.053508135055515695,
      "Density" : 0.9909750486639533
    },
    "euclideanDistance" : 69.01655401517318,
    "generation" : 24,
    "numberOfRefactorings" : 69,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6975069252077561,
      "LackOfCohesion" : 0.5581040034642951,
      "MetricsIntensity" : 0.0535081350555157,
      "Density" : 3.252032520325204
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.and()', targetType='org.springframework.security.config.annotation.method.configuration.Jsr250MethodSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.web.server.header.StaticServerHttpHeadersWriter.Builder'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configuration.OAuth2ClientConfiguration.OAuth2ClientWebMvcSecurityConfiguration'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.authentication.event.AuthenticationFailureDisabledEvent'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "03f10a88-685d-4235-a6d7-d72498cc0abe",
    "objectives" : {
      "NumberOfConcerns" : 0.9941596365996106,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5572645250657615,
      "MetricsIntensity" : 0.05349876122724423,
      "Density" : 0.9913289683241904
    },
    "euclideanDistance" : 72.01586278296492,
    "generation" : 3,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6975069252077566,
      "LackOfCohesion" : 0.5572645250657615,
      "MetricsIntensity" : 0.053498761227244236,
      "Density" : 3.253193960511034
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  }, {
    "solutionId" : "eabca45f-5ce4-4fa5-b24f-5faf9f44bdb7",
    "objectives" : {
      "NumberOfConcerns" : 0.9941596365996106,
      "NumberOfRefactorings" : 72.0,
      "LackOfCohesion" : 0.5572645250657614,
      "MetricsIntensity" : 0.053498761227244236,
      "Density" : 0.9913289683241904
    },
    "euclideanDistance" : 72.01586278296492,
    "generation" : 22,
    "numberOfRefactorings" : 72,
    "additionalInformation" : {
      "NumberOfConcerns" : 1.6975069252077566,
      "LackOfCohesion" : 0.5572645250657614,
      "MetricsIntensity" : 0.053498761227244236,
      "Density" : 3.253193960511034
    },
    "sequences" : [ {
      "refactoredTypeName" : "org.springframework.security.web.access.intercept.FilterSecurityInterceptor",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isObserveOncePerRequest()', targetType='org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.setObserveOncePerRequest(boolean)', targetType='org.springframework.security.config.annotation.web.configurers.PermitAllSupport'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.destroy()', targetType='org.springframework.security.oauth2.client.jackson2.StdConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.getSecureObjectClass()', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.isApplied(FilterInvocation)', targetType='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.access.intercept.FilterSecurityInterceptor.FILTER_APPLIED', targetTypeName='org.springframework.security.provisioning.JdbcUserDetailsManager'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.ldap.userdetails.Person",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getTelephoneNumber()', targetType='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.telephoneNumber', targetTypeName='org.springframework.security.config.http.PortMappingsBeanDefinitionParser'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getDescription()', targetType='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.description', targetTypeName='org.springframework.gradle.maven.SpringNexusPublishPlugin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.ldap.userdetails.Person.getCn()', targetType='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.ldap.userdetails.Person.cn', targetTypeName='org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.FilterInvocation",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getChain()', targetType='org.springframework.security.oauth2.core.OAuth2AccessToken.TokenType'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getFullRequestUrl()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.toString()', targetType='org.springframework.security.web.authentication.logout.ForwardLogoutSuccessHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getHttpResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.FilterInvocation.getResponse()', targetType='org.springframework.security.web.savedrequest.NullRequestCache'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.toString()', targetType='org.springframework.security.config.annotation.web.socket.AbstractSecurityWebSocketMessageBrokerConfigurer.WebSocketMessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.hashCode()', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserAuthorityMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getHeaderName()', targetType='org.springframework.security.core.ComparableVersion.ListItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.equals(Object)', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.csrf.LazyCsrfTokenRepository.SaveOnAccessCsrfToken.getParameterName()', targetType='org.springframework.security.core.ComparableVersion.BigIntegerItem'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.authenticationManager(AuthenticationManager)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.decoder(JwtDecoder)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwtAuthenticationConverter(Converter<Jwt,? extends AbstractAuthenticationToken>)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationManager(H)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.JwtConfigurer(ApplicationContext)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtAuthenticationConverter()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getAuthenticationProvider()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri(String)', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer.getJwtDecoder()', targetType='org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer.JwtConfigurer'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.configure(H)', targetType='org.springframework.security.oauth2.client.jackson2.OidcUserInfoMixin'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getRequestCache(H)', targetType='org.springframework.security.authorization.method.AbstractAuthorizationManagerRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler()', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedPage(String)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.accessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry.Constraint'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.getAccessDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.defaultAccessDeniedHandlerFor(AccessDeniedHandler, RequestMatcher)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer.createDefaultDeniedHandler(H)', targetType='org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider.InternalCallbackHandler'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerName(String)', targetType='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverName', targetTypeName='org.springframework.security.config.http.OrderDecorator'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setContextPath(String)', targetType='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.contextPath', targetTypeName='org.springframework.security.remoting.dns.JndiDnsResolver.DefaultInitialContextFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setHeaders(Map<String,List<String>>)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.ExceptionHandlingSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setScheme(String)', targetType='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.scheme', targetTypeName='org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setParameters(Map<String,String[]>)', targetType='org.springframework.security.web.util.matcher.NegatedRequestMatcher'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setMethod(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServletPath(String)', targetType='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.servletPath', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.method', targetTypeName='org.springframework.security.web.access.expression.ExpressionBasedFilterInvocationSecurityMetadataSource.AntPathMatcherEvaluationContextPostProcessor'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setRequestURL(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setServerPort(int)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.setQueryString(String)', targetType='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.serverPort', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.requestURL', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      }, {
        "refactoringKind" : "Move Field",
        "change" : "fieldName='org.springframework.security.web.savedrequest.DefaultSavedRequest.Builder.queryString', targetTypeName='org.springframework.security.web.header.writers.frameoptions.RegExpAllowFromStrategy'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.oauth2.server.resource.authentication.JwtIssuerAuthenticationManagerResolver.JwtClaimIssuerConverter.convert(BearerTokenAuthenticationToken)', targetType='org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.web.access.ExceptionTranslationFilter",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setAccessDeniedHandler(AccessDeniedHandler)', targetType='org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.sendStartAuthentication(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.access.intercept.InterceptorStatusToken'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setThrowableAnalyzer(ThrowableAnalyzer)', targetType='org.springframework.security.config.annotation.web.builders.HttpSecurity.OrderedFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ServletRequest, ServletResponse, FilterChain)', targetType='org.springframework.security.config.annotation.web.messaging.MessageSecurityMetadataSourceRegistry'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAccessDeniedException(HttpServletRequest, HttpServletResponse, FilterChain, AccessDeniedException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleAuthenticationException(HttpServletRequest, HttpServletResponse, FilterChain, AuthenticationException)', targetType='org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.setMessageSource(MessageSource)', targetType='org.springframework.security.saml2.provider.service.registration.OpenSamlRelyingPartyRegistrationBuilderHttpMessageConverter'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.rethrow(Exception)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.handleSpringSecurityException(HttpServletRequest, HttpServletResponse, FilterChain, RuntimeException)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(HttpServletRequest, HttpServletResponse, FilterChain)', targetType='org.springframework.security.config.web.server.ServerHttpSecurity.CsrfSpec'"
      } ]
    }, {
      "refactoredTypeName" : "org.springframework.security.acls.domain.SpringCacheBasedAclCache",
      "refactorings" : [ {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.putInCache(MutableAcl)', targetType='org.springframework.security.config.http.GrantedAuthorityDefaultsParserUtils.AbstractGrantedAuthorityDefaultsBeanFactory'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.clearCache()', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      }, {
        "refactoringKind" : "Move Method",
        "change" : "method='org.springframework.security.acls.domain.SpringCacheBasedAclCache.getFromCache(Object)', targetType='org.springframework.security.oauth2.core.http.converter.HttpMessageConverters'"
      } ]
    } ]
  } ]
}